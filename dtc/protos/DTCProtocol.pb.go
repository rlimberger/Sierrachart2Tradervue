// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.2
// source: dtc/DTCProtocol.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ============================================================================
// DTC protocol version
type DTCVersion int32

const (
	DTCVersion_DTC_VERSION_UNSET DTCVersion = 0
	DTCVersion_CURRENT_VERSION   DTCVersion = 8
)

// Enum value maps for DTCVersion.
var (
	DTCVersion_name = map[int32]string{
		0: "DTC_VERSION_UNSET",
		8: "CURRENT_VERSION",
	}
	DTCVersion_value = map[string]int32{
		"DTC_VERSION_UNSET": 0,
		"CURRENT_VERSION":   8,
	}
)

func (x DTCVersion) Enum() *DTCVersion {
	p := new(DTCVersion)
	*p = x
	return p
}

func (x DTCVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTCVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[0].Descriptor()
}

func (DTCVersion) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[0]
}

func (x DTCVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTCVersion.Descriptor instead.
func (DTCVersion) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{0}
}

type DTCMessageType int32

const (
	DTCMessageType_MESSAGE_TYPE_UNSET DTCMessageType = 0
	// Authentication and connection monitoring
	DTCMessageType_LOGON_REQUEST     DTCMessageType = 1
	DTCMessageType_LOGON_RESPONSE    DTCMessageType = 2
	DTCMessageType_HEARTBEAT         DTCMessageType = 3
	DTCMessageType_LOGOFF            DTCMessageType = 5
	DTCMessageType_ENCODING_REQUEST  DTCMessageType = 6
	DTCMessageType_ENCODING_RESPONSE DTCMessageType = 7
	// Market data
	DTCMessageType_MARKET_DATA_REQUEST                                 DTCMessageType = 101
	DTCMessageType_MARKET_DATA_REJECT                                  DTCMessageType = 103
	DTCMessageType_MARKET_DATA_SNAPSHOT                                DTCMessageType = 104
	DTCMessageType_MARKET_DATA_UPDATE_TRADE                            DTCMessageType = 107
	DTCMessageType_MARKET_DATA_UPDATE_TRADE_COMPACT                    DTCMessageType = 112
	DTCMessageType_MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT              DTCMessageType = 134
	DTCMessageType_MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR   DTCMessageType = 137
	DTCMessageType_MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2 DTCMessageType = 146
	DTCMessageType_MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP               DTCMessageType = 142
	DTCMessageType_MARKET_DATA_UPDATE_BID_ASK                          DTCMessageType = 108
	DTCMessageType_MARKET_DATA_UPDATE_BID_ASK_COMPACT                  DTCMessageType = 117
	DTCMessageType_MARKET_DATA_UPDATE_BID_ASK_NO_TIMESTAMP             DTCMessageType = 143
	DTCMessageType_MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS  DTCMessageType = 144
	DTCMessageType_MARKET_DATA_UPDATE_SESSION_OPEN                     DTCMessageType = 120
	DTCMessageType_MARKET_DATA_UPDATE_SESSION_HIGH                     DTCMessageType = 114
	DTCMessageType_MARKET_DATA_UPDATE_SESSION_LOW                      DTCMessageType = 115
	DTCMessageType_MARKET_DATA_UPDATE_SESSION_VOLUME                   DTCMessageType = 113
	DTCMessageType_MARKET_DATA_UPDATE_OPEN_INTEREST                    DTCMessageType = 124
	DTCMessageType_MARKET_DATA_UPDATE_SESSION_SETTLEMENT               DTCMessageType = 119
	DTCMessageType_MARKET_DATA_UPDATE_SESSION_NUM_TRADES               DTCMessageType = 135
	DTCMessageType_MARKET_DATA_UPDATE_TRADING_SESSION_DATE             DTCMessageType = 136
	DTCMessageType_MARKET_DEPTH_REQUEST                                DTCMessageType = 102
	DTCMessageType_MARKET_DEPTH_REJECT                                 DTCMessageType = 121
	DTCMessageType_MARKET_DEPTH_SNAPSHOT_LEVEL                         DTCMessageType = 122
	DTCMessageType_MARKET_DEPTH_SNAPSHOT_LEVEL_FLOAT                   DTCMessageType = 145
	DTCMessageType_MARKET_DEPTH_UPDATE_LEVEL                           DTCMessageType = 106
	DTCMessageType_MARKET_DEPTH_UPDATE_LEVEL_FLOAT_WITH_MILLISECONDS   DTCMessageType = 140
	DTCMessageType_MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP              DTCMessageType = 141
	DTCMessageType_MARKET_DATA_FEED_STATUS                             DTCMessageType = 100
	DTCMessageType_MARKET_DATA_FEED_SYMBOL_STATUS                      DTCMessageType = 116
	DTCMessageType_TRADING_SYMBOL_STATUS                               DTCMessageType = 138
	DTCMessageType_MARKET_ORDERS_REQUEST                               DTCMessageType = 150
	DTCMessageType_MARKET_ORDERS_REJECT                                DTCMessageType = 151
	DTCMessageType_MARKET_ORDERS_ADD                                   DTCMessageType = 152
	DTCMessageType_MARKET_ORDERS_MODIFY                                DTCMessageType = 153
	DTCMessageType_MARKET_ORDERS_REMOVE                                DTCMessageType = 154
	DTCMessageType_MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY             DTCMessageType = 155
	// Order entry and modification
	DTCMessageType_SUBMIT_NEW_SINGLE_ORDER             DTCMessageType = 208
	DTCMessageType_SUBMIT_NEW_OCO_ORDER                DTCMessageType = 201
	DTCMessageType_SUBMIT_FLATTEN_POSITION_ORDER       DTCMessageType = 209
	DTCMessageType_FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT DTCMessageType = 210
	DTCMessageType_CANCEL_ORDER                        DTCMessageType = 203
	DTCMessageType_CANCEL_REPLACE_ORDER                DTCMessageType = 204
	// Trading related
	DTCMessageType_OPEN_ORDERS_REQUEST            DTCMessageType = 300
	DTCMessageType_OPEN_ORDERS_REJECT             DTCMessageType = 302
	DTCMessageType_ORDER_UPDATE                   DTCMessageType = 301
	DTCMessageType_HISTORICAL_ORDER_FILLS_REQUEST DTCMessageType = 303
	DTCMessageType_HISTORICAL_ORDER_FILL_RESPONSE DTCMessageType = 304
	DTCMessageType_HISTORICAL_ORDER_FILLS_REJECT  DTCMessageType = 308
	DTCMessageType_CURRENT_POSITIONS_REQUEST      DTCMessageType = 305
	DTCMessageType_CURRENT_POSITIONS_REJECT       DTCMessageType = 307
	DTCMessageType_POSITION_UPDATE                DTCMessageType = 306
	DTCMessageType_ADD_CORRECTING_ORDER_FILL      DTCMessageType = 309
	DTCMessageType_CORRECTING_ORDER_FILL_RESPONSE DTCMessageType = 310
	// Account list
	DTCMessageType_TRADE_ACCOUNTS_REQUEST DTCMessageType = 400
	DTCMessageType_TRADE_ACCOUNT_RESPONSE DTCMessageType = 401
	// Symbol discovery and security definitions
	DTCMessageType_EXCHANGE_LIST_REQUEST                   DTCMessageType = 500
	DTCMessageType_EXCHANGE_LIST_RESPONSE                  DTCMessageType = 501
	DTCMessageType_SYMBOLS_FOR_EXCHANGE_REQUEST            DTCMessageType = 502
	DTCMessageType_UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST DTCMessageType = 503
	DTCMessageType_SYMBOLS_FOR_UNDERLYING_REQUEST          DTCMessageType = 504
	DTCMessageType_SECURITY_DEFINITION_FOR_SYMBOL_REQUEST  DTCMessageType = 506
	DTCMessageType_SECURITY_DEFINITION_RESPONSE            DTCMessageType = 507
	DTCMessageType_SYMBOL_SEARCH_REQUEST                   DTCMessageType = 508
	DTCMessageType_SECURITY_DEFINITION_REJECT              DTCMessageType = 509
	// Account balance
	DTCMessageType_ACCOUNT_BALANCE_REQUEST             DTCMessageType = 601
	DTCMessageType_ACCOUNT_BALANCE_REJECT              DTCMessageType = 602
	DTCMessageType_ACCOUNT_BALANCE_UPDATE              DTCMessageType = 600
	DTCMessageType_ACCOUNT_BALANCE_ADJUSTMENT          DTCMessageType = 607
	DTCMessageType_ACCOUNT_BALANCE_ADJUSTMENT_REJECT   DTCMessageType = 608
	DTCMessageType_ACCOUNT_BALANCE_ADJUSTMENT_COMPLETE DTCMessageType = 609
	DTCMessageType_HISTORICAL_ACCOUNT_BALANCES_REQUEST DTCMessageType = 603
	DTCMessageType_HISTORICAL_ACCOUNT_BALANCES_REJECT  DTCMessageType = 604
	DTCMessageType_HISTORICAL_ACCOUNT_BALANCE_RESPONSE DTCMessageType = 606
	// Logging
	DTCMessageType_USER_MESSAGE            DTCMessageType = 700
	DTCMessageType_GENERAL_LOG_MESSAGE     DTCMessageType = 701
	DTCMessageType_ALERT_MESSAGE           DTCMessageType = 702
	DTCMessageType_JOURNAL_ENTRY_ADD       DTCMessageType = 703
	DTCMessageType_JOURNAL_ENTRIES_REQUEST DTCMessageType = 704
	DTCMessageType_JOURNAL_ENTRIES_REJECT  DTCMessageType = 705
	DTCMessageType_JOURNAL_ENTRY_RESPONSE  DTCMessageType = 706
	// Historical price data
	DTCMessageType_HISTORICAL_PRICE_DATA_REQUEST              DTCMessageType = 800
	DTCMessageType_HISTORICAL_PRICE_DATA_RESPONSE_HEADER      DTCMessageType = 801
	DTCMessageType_HISTORICAL_PRICE_DATA_REJECT               DTCMessageType = 802
	DTCMessageType_HISTORICAL_PRICE_DATA_RECORD_RESPONSE      DTCMessageType = 803
	DTCMessageType_HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE DTCMessageType = 804
	DTCMessageType_HISTORICAL_PRICE_DATA_RESPONSE_TRAILER     DTCMessageType = 807
	// Historical market depth data
	DTCMessageType_HISTORICAL_MARKET_DEPTH_DATA_REQUEST         DTCMessageType = 900
	DTCMessageType_HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER DTCMessageType = 901
	DTCMessageType_HISTORICAL_MARKET_DEPTH_DATA_REJECT          DTCMessageType = 902
	DTCMessageType_HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE DTCMessageType = 903
	// Nonstandard
	DTCMessageType_TRADE_ACCOUNT_TRADING_IS_DISABLED_REQUEST  DTCMessageType = 10206
	DTCMessageType_TRADE_ACCOUNT_TRADING_IS_DISABLED_RESPONSE DTCMessageType = 10207
	DTCMessageType_TRADE_ACCOUNT_DATA_DUPLICATE               DTCMessageType = 10208
)

// Enum value maps for DTCMessageType.
var (
	DTCMessageType_name = map[int32]string{
		0:     "MESSAGE_TYPE_UNSET",
		1:     "LOGON_REQUEST",
		2:     "LOGON_RESPONSE",
		3:     "HEARTBEAT",
		5:     "LOGOFF",
		6:     "ENCODING_REQUEST",
		7:     "ENCODING_RESPONSE",
		101:   "MARKET_DATA_REQUEST",
		103:   "MARKET_DATA_REJECT",
		104:   "MARKET_DATA_SNAPSHOT",
		107:   "MARKET_DATA_UPDATE_TRADE",
		112:   "MARKET_DATA_UPDATE_TRADE_COMPACT",
		134:   "MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT",
		137:   "MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR",
		146:   "MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2",
		142:   "MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP",
		108:   "MARKET_DATA_UPDATE_BID_ASK",
		117:   "MARKET_DATA_UPDATE_BID_ASK_COMPACT",
		143:   "MARKET_DATA_UPDATE_BID_ASK_NO_TIMESTAMP",
		144:   "MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS",
		120:   "MARKET_DATA_UPDATE_SESSION_OPEN",
		114:   "MARKET_DATA_UPDATE_SESSION_HIGH",
		115:   "MARKET_DATA_UPDATE_SESSION_LOW",
		113:   "MARKET_DATA_UPDATE_SESSION_VOLUME",
		124:   "MARKET_DATA_UPDATE_OPEN_INTEREST",
		119:   "MARKET_DATA_UPDATE_SESSION_SETTLEMENT",
		135:   "MARKET_DATA_UPDATE_SESSION_NUM_TRADES",
		136:   "MARKET_DATA_UPDATE_TRADING_SESSION_DATE",
		102:   "MARKET_DEPTH_REQUEST",
		121:   "MARKET_DEPTH_REJECT",
		122:   "MARKET_DEPTH_SNAPSHOT_LEVEL",
		145:   "MARKET_DEPTH_SNAPSHOT_LEVEL_FLOAT",
		106:   "MARKET_DEPTH_UPDATE_LEVEL",
		140:   "MARKET_DEPTH_UPDATE_LEVEL_FLOAT_WITH_MILLISECONDS",
		141:   "MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP",
		100:   "MARKET_DATA_FEED_STATUS",
		116:   "MARKET_DATA_FEED_SYMBOL_STATUS",
		138:   "TRADING_SYMBOL_STATUS",
		150:   "MARKET_ORDERS_REQUEST",
		151:   "MARKET_ORDERS_REJECT",
		152:   "MARKET_ORDERS_ADD",
		153:   "MARKET_ORDERS_MODIFY",
		154:   "MARKET_ORDERS_REMOVE",
		155:   "MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY",
		208:   "SUBMIT_NEW_SINGLE_ORDER",
		201:   "SUBMIT_NEW_OCO_ORDER",
		209:   "SUBMIT_FLATTEN_POSITION_ORDER",
		210:   "FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT",
		203:   "CANCEL_ORDER",
		204:   "CANCEL_REPLACE_ORDER",
		300:   "OPEN_ORDERS_REQUEST",
		302:   "OPEN_ORDERS_REJECT",
		301:   "ORDER_UPDATE",
		303:   "HISTORICAL_ORDER_FILLS_REQUEST",
		304:   "HISTORICAL_ORDER_FILL_RESPONSE",
		308:   "HISTORICAL_ORDER_FILLS_REJECT",
		305:   "CURRENT_POSITIONS_REQUEST",
		307:   "CURRENT_POSITIONS_REJECT",
		306:   "POSITION_UPDATE",
		309:   "ADD_CORRECTING_ORDER_FILL",
		310:   "CORRECTING_ORDER_FILL_RESPONSE",
		400:   "TRADE_ACCOUNTS_REQUEST",
		401:   "TRADE_ACCOUNT_RESPONSE",
		500:   "EXCHANGE_LIST_REQUEST",
		501:   "EXCHANGE_LIST_RESPONSE",
		502:   "SYMBOLS_FOR_EXCHANGE_REQUEST",
		503:   "UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST",
		504:   "SYMBOLS_FOR_UNDERLYING_REQUEST",
		506:   "SECURITY_DEFINITION_FOR_SYMBOL_REQUEST",
		507:   "SECURITY_DEFINITION_RESPONSE",
		508:   "SYMBOL_SEARCH_REQUEST",
		509:   "SECURITY_DEFINITION_REJECT",
		601:   "ACCOUNT_BALANCE_REQUEST",
		602:   "ACCOUNT_BALANCE_REJECT",
		600:   "ACCOUNT_BALANCE_UPDATE",
		607:   "ACCOUNT_BALANCE_ADJUSTMENT",
		608:   "ACCOUNT_BALANCE_ADJUSTMENT_REJECT",
		609:   "ACCOUNT_BALANCE_ADJUSTMENT_COMPLETE",
		603:   "HISTORICAL_ACCOUNT_BALANCES_REQUEST",
		604:   "HISTORICAL_ACCOUNT_BALANCES_REJECT",
		606:   "HISTORICAL_ACCOUNT_BALANCE_RESPONSE",
		700:   "USER_MESSAGE",
		701:   "GENERAL_LOG_MESSAGE",
		702:   "ALERT_MESSAGE",
		703:   "JOURNAL_ENTRY_ADD",
		704:   "JOURNAL_ENTRIES_REQUEST",
		705:   "JOURNAL_ENTRIES_REJECT",
		706:   "JOURNAL_ENTRY_RESPONSE",
		800:   "HISTORICAL_PRICE_DATA_REQUEST",
		801:   "HISTORICAL_PRICE_DATA_RESPONSE_HEADER",
		802:   "HISTORICAL_PRICE_DATA_REJECT",
		803:   "HISTORICAL_PRICE_DATA_RECORD_RESPONSE",
		804:   "HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE",
		807:   "HISTORICAL_PRICE_DATA_RESPONSE_TRAILER",
		900:   "HISTORICAL_MARKET_DEPTH_DATA_REQUEST",
		901:   "HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER",
		902:   "HISTORICAL_MARKET_DEPTH_DATA_REJECT",
		903:   "HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE",
		10206: "TRADE_ACCOUNT_TRADING_IS_DISABLED_REQUEST",
		10207: "TRADE_ACCOUNT_TRADING_IS_DISABLED_RESPONSE",
		10208: "TRADE_ACCOUNT_DATA_DUPLICATE",
	}
	DTCMessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSET":                     0,
		"LOGON_REQUEST":                          1,
		"LOGON_RESPONSE":                         2,
		"HEARTBEAT":                              3,
		"LOGOFF":                                 5,
		"ENCODING_REQUEST":                       6,
		"ENCODING_RESPONSE":                      7,
		"MARKET_DATA_REQUEST":                    101,
		"MARKET_DATA_REJECT":                     103,
		"MARKET_DATA_SNAPSHOT":                   104,
		"MARKET_DATA_UPDATE_TRADE":               107,
		"MARKET_DATA_UPDATE_TRADE_COMPACT":       112,
		"MARKET_DATA_UPDATE_LAST_TRADE_SNAPSHOT": 134,
		"MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR":   137,
		"MARKET_DATA_UPDATE_TRADE_WITH_UNBUNDLED_INDICATOR_2": 146,
		"MARKET_DATA_UPDATE_TRADE_NO_TIMESTAMP":               142,
		"MARKET_DATA_UPDATE_BID_ASK":                          108,
		"MARKET_DATA_UPDATE_BID_ASK_COMPACT":                  117,
		"MARKET_DATA_UPDATE_BID_ASK_NO_TIMESTAMP":             143,
		"MARKET_DATA_UPDATE_BID_ASK_FLOAT_WITH_MICROSECONDS":  144,
		"MARKET_DATA_UPDATE_SESSION_OPEN":                     120,
		"MARKET_DATA_UPDATE_SESSION_HIGH":                     114,
		"MARKET_DATA_UPDATE_SESSION_LOW":                      115,
		"MARKET_DATA_UPDATE_SESSION_VOLUME":                   113,
		"MARKET_DATA_UPDATE_OPEN_INTEREST":                    124,
		"MARKET_DATA_UPDATE_SESSION_SETTLEMENT":               119,
		"MARKET_DATA_UPDATE_SESSION_NUM_TRADES":               135,
		"MARKET_DATA_UPDATE_TRADING_SESSION_DATE":             136,
		"MARKET_DEPTH_REQUEST":                                102,
		"MARKET_DEPTH_REJECT":                                 121,
		"MARKET_DEPTH_SNAPSHOT_LEVEL":                         122,
		"MARKET_DEPTH_SNAPSHOT_LEVEL_FLOAT":                   145,
		"MARKET_DEPTH_UPDATE_LEVEL":                           106,
		"MARKET_DEPTH_UPDATE_LEVEL_FLOAT_WITH_MILLISECONDS":   140,
		"MARKET_DEPTH_UPDATE_LEVEL_NO_TIMESTAMP":              141,
		"MARKET_DATA_FEED_STATUS":                             100,
		"MARKET_DATA_FEED_SYMBOL_STATUS":                      116,
		"TRADING_SYMBOL_STATUS":                               138,
		"MARKET_ORDERS_REQUEST":                               150,
		"MARKET_ORDERS_REJECT":                                151,
		"MARKET_ORDERS_ADD":                                   152,
		"MARKET_ORDERS_MODIFY":                                153,
		"MARKET_ORDERS_REMOVE":                                154,
		"MARKET_ORDERS_SNAPSHOT_MESSAGE_BOUNDARY":             155,
		"SUBMIT_NEW_SINGLE_ORDER":                             208,
		"SUBMIT_NEW_OCO_ORDER":                                201,
		"SUBMIT_FLATTEN_POSITION_ORDER":                       209,
		"FLATTEN_POSITIONS_FOR_TRADE_ACCOUNT":                 210,
		"CANCEL_ORDER":                                        203,
		"CANCEL_REPLACE_ORDER":                                204,
		"OPEN_ORDERS_REQUEST":                                 300,
		"OPEN_ORDERS_REJECT":                                  302,
		"ORDER_UPDATE":                                        301,
		"HISTORICAL_ORDER_FILLS_REQUEST":                      303,
		"HISTORICAL_ORDER_FILL_RESPONSE":                      304,
		"HISTORICAL_ORDER_FILLS_REJECT":                       308,
		"CURRENT_POSITIONS_REQUEST":                           305,
		"CURRENT_POSITIONS_REJECT":                            307,
		"POSITION_UPDATE":                                     306,
		"ADD_CORRECTING_ORDER_FILL":                           309,
		"CORRECTING_ORDER_FILL_RESPONSE":                      310,
		"TRADE_ACCOUNTS_REQUEST":                              400,
		"TRADE_ACCOUNT_RESPONSE":                              401,
		"EXCHANGE_LIST_REQUEST":                               500,
		"EXCHANGE_LIST_RESPONSE":                              501,
		"SYMBOLS_FOR_EXCHANGE_REQUEST":                        502,
		"UNDERLYING_SYMBOLS_FOR_EXCHANGE_REQUEST":             503,
		"SYMBOLS_FOR_UNDERLYING_REQUEST":                      504,
		"SECURITY_DEFINITION_FOR_SYMBOL_REQUEST":              506,
		"SECURITY_DEFINITION_RESPONSE":                        507,
		"SYMBOL_SEARCH_REQUEST":                               508,
		"SECURITY_DEFINITION_REJECT":                          509,
		"ACCOUNT_BALANCE_REQUEST":                             601,
		"ACCOUNT_BALANCE_REJECT":                              602,
		"ACCOUNT_BALANCE_UPDATE":                              600,
		"ACCOUNT_BALANCE_ADJUSTMENT":                          607,
		"ACCOUNT_BALANCE_ADJUSTMENT_REJECT":                   608,
		"ACCOUNT_BALANCE_ADJUSTMENT_COMPLETE":                 609,
		"HISTORICAL_ACCOUNT_BALANCES_REQUEST":                 603,
		"HISTORICAL_ACCOUNT_BALANCES_REJECT":                  604,
		"HISTORICAL_ACCOUNT_BALANCE_RESPONSE":                 606,
		"USER_MESSAGE":                                        700,
		"GENERAL_LOG_MESSAGE":                                 701,
		"ALERT_MESSAGE":                                       702,
		"JOURNAL_ENTRY_ADD":                                   703,
		"JOURNAL_ENTRIES_REQUEST":                             704,
		"JOURNAL_ENTRIES_REJECT":                              705,
		"JOURNAL_ENTRY_RESPONSE":                              706,
		"HISTORICAL_PRICE_DATA_REQUEST":                       800,
		"HISTORICAL_PRICE_DATA_RESPONSE_HEADER":               801,
		"HISTORICAL_PRICE_DATA_REJECT":                        802,
		"HISTORICAL_PRICE_DATA_RECORD_RESPONSE":               803,
		"HISTORICAL_PRICE_DATA_TICK_RECORD_RESPONSE":          804,
		"HISTORICAL_PRICE_DATA_RESPONSE_TRAILER":              807,
		"HISTORICAL_MARKET_DEPTH_DATA_REQUEST":                900,
		"HISTORICAL_MARKET_DEPTH_DATA_RESPONSE_HEADER":        901,
		"HISTORICAL_MARKET_DEPTH_DATA_REJECT":                 902,
		"HISTORICAL_MARKET_DEPTH_DATA_RECORD_RESPONSE":        903,
		"TRADE_ACCOUNT_TRADING_IS_DISABLED_REQUEST":           10206,
		"TRADE_ACCOUNT_TRADING_IS_DISABLED_RESPONSE":          10207,
		"TRADE_ACCOUNT_DATA_DUPLICATE":                        10208,
	}
)

func (x DTCMessageType) Enum() *DTCMessageType {
	p := new(DTCMessageType)
	*p = x
	return p
}

func (x DTCMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DTCMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[1].Descriptor()
}

func (DTCMessageType) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[1]
}

func (x DTCMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DTCMessageType.Descriptor instead.
func (DTCMessageType) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{1}
}

// ============================================================================
type EncodingEnum int32

const (
	EncodingEnum_BINARY_ENCODING                     EncodingEnum = 0
	EncodingEnum_BINARY_WITH_VARIABLE_LENGTH_STRINGS EncodingEnum = 1
	EncodingEnum_JSON_ENCODING                       EncodingEnum = 2
	EncodingEnum_JSON_COMPACT_ENCODING               EncodingEnum = 3
	EncodingEnum_PROTOCOL_BUFFERS                    EncodingEnum = 4
)

// Enum value maps for EncodingEnum.
var (
	EncodingEnum_name = map[int32]string{
		0: "BINARY_ENCODING",
		1: "BINARY_WITH_VARIABLE_LENGTH_STRINGS",
		2: "JSON_ENCODING",
		3: "JSON_COMPACT_ENCODING",
		4: "PROTOCOL_BUFFERS",
	}
	EncodingEnum_value = map[string]int32{
		"BINARY_ENCODING":                     0,
		"BINARY_WITH_VARIABLE_LENGTH_STRINGS": 1,
		"JSON_ENCODING":                       2,
		"JSON_COMPACT_ENCODING":               3,
		"PROTOCOL_BUFFERS":                    4,
	}
)

func (x EncodingEnum) Enum() *EncodingEnum {
	p := new(EncodingEnum)
	*p = x
	return p
}

func (x EncodingEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncodingEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[2].Descriptor()
}

func (EncodingEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[2]
}

func (x EncodingEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncodingEnum.Descriptor instead.
func (EncodingEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{2}
}

// ============================================================================
type LogonStatusEnum int32

const (
	LogonStatusEnum_LOGON_STATUS_UNSET          LogonStatusEnum = 0
	LogonStatusEnum_LOGON_SUCCESS               LogonStatusEnum = 1
	LogonStatusEnum_LOGON_ERROR                 LogonStatusEnum = 2
	LogonStatusEnum_LOGON_ERROR_NO_RECONNECT    LogonStatusEnum = 3
	LogonStatusEnum_LOGON_RECONNECT_NEW_ADDRESS LogonStatusEnum = 4
)

// Enum value maps for LogonStatusEnum.
var (
	LogonStatusEnum_name = map[int32]string{
		0: "LOGON_STATUS_UNSET",
		1: "LOGON_SUCCESS",
		2: "LOGON_ERROR",
		3: "LOGON_ERROR_NO_RECONNECT",
		4: "LOGON_RECONNECT_NEW_ADDRESS",
	}
	LogonStatusEnum_value = map[string]int32{
		"LOGON_STATUS_UNSET":          0,
		"LOGON_SUCCESS":               1,
		"LOGON_ERROR":                 2,
		"LOGON_ERROR_NO_RECONNECT":    3,
		"LOGON_RECONNECT_NEW_ADDRESS": 4,
	}
)

func (x LogonStatusEnum) Enum() *LogonStatusEnum {
	p := new(LogonStatusEnum)
	*p = x
	return p
}

func (x LogonStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogonStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[3].Descriptor()
}

func (LogonStatusEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[3]
}

func (x LogonStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogonStatusEnum.Descriptor instead.
func (LogonStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{3}
}

// ============================================================================
type MessageSupportedEnum int32

const (
	MessageSupportedEnum_MESSAGE_UNSUPPORTED MessageSupportedEnum = 0
	MessageSupportedEnum_MESSAGE_SUPPORTED   MessageSupportedEnum = 1
)

// Enum value maps for MessageSupportedEnum.
var (
	MessageSupportedEnum_name = map[int32]string{
		0: "MESSAGE_UNSUPPORTED",
		1: "MESSAGE_SUPPORTED",
	}
	MessageSupportedEnum_value = map[string]int32{
		"MESSAGE_UNSUPPORTED": 0,
		"MESSAGE_SUPPORTED":   1,
	}
)

func (x MessageSupportedEnum) Enum() *MessageSupportedEnum {
	p := new(MessageSupportedEnum)
	*p = x
	return p
}

func (x MessageSupportedEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSupportedEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[4].Descriptor()
}

func (MessageSupportedEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[4]
}

func (x MessageSupportedEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSupportedEnum.Descriptor instead.
func (MessageSupportedEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{4}
}

// ============================================================================
type RequestActionEnum int32

const (
	RequestActionEnum_REQUEST_ACTION_UNSET RequestActionEnum = 0
	RequestActionEnum_SUBSCRIBE            RequestActionEnum = 1
	RequestActionEnum_UNSUBSCRIBE          RequestActionEnum = 2
	RequestActionEnum_SNAPSHOT             RequestActionEnum = 3
)

// Enum value maps for RequestActionEnum.
var (
	RequestActionEnum_name = map[int32]string{
		0: "REQUEST_ACTION_UNSET",
		1: "SUBSCRIBE",
		2: "UNSUBSCRIBE",
		3: "SNAPSHOT",
	}
	RequestActionEnum_value = map[string]int32{
		"REQUEST_ACTION_UNSET": 0,
		"SUBSCRIBE":            1,
		"UNSUBSCRIBE":          2,
		"SNAPSHOT":             3,
	}
)

func (x RequestActionEnum) Enum() *RequestActionEnum {
	p := new(RequestActionEnum)
	*p = x
	return p
}

func (x RequestActionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestActionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[5].Descriptor()
}

func (RequestActionEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[5]
}

func (x RequestActionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestActionEnum.Descriptor instead.
func (RequestActionEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{5}
}

// ==========================================================================
type UnbundledTradeIndicatorEnum int32

const (
	UnbundledTradeIndicatorEnum_UNBUNDLED_TRADE_NONE               UnbundledTradeIndicatorEnum = 0
	UnbundledTradeIndicatorEnum_FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE UnbundledTradeIndicatorEnum = 1
	UnbundledTradeIndicatorEnum_LAST_SUB_TRADE_OF_UNBUNDLED_TRADE  UnbundledTradeIndicatorEnum = 2
)

// Enum value maps for UnbundledTradeIndicatorEnum.
var (
	UnbundledTradeIndicatorEnum_name = map[int32]string{
		0: "UNBUNDLED_TRADE_NONE",
		1: "FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE",
		2: "LAST_SUB_TRADE_OF_UNBUNDLED_TRADE",
	}
	UnbundledTradeIndicatorEnum_value = map[string]int32{
		"UNBUNDLED_TRADE_NONE":               0,
		"FIRST_SUB_TRADE_OF_UNBUNDLED_TRADE": 1,
		"LAST_SUB_TRADE_OF_UNBUNDLED_TRADE":  2,
	}
)

func (x UnbundledTradeIndicatorEnum) Enum() *UnbundledTradeIndicatorEnum {
	p := new(UnbundledTradeIndicatorEnum)
	*p = x
	return p
}

func (x UnbundledTradeIndicatorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnbundledTradeIndicatorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[6].Descriptor()
}

func (UnbundledTradeIndicatorEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[6]
}

func (x UnbundledTradeIndicatorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnbundledTradeIndicatorEnum.Descriptor instead.
func (UnbundledTradeIndicatorEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{6}
}

// ==========================================================================
type TradeConditionEnum int32

const (
	TradeConditionEnum_TRADE_CONDITION_NONE                         TradeConditionEnum = 0
	TradeConditionEnum_TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE TradeConditionEnum = 1
	TradeConditionEnum_TRADE_CONDITION_ODD_LOT_EQUITY_TRADE         TradeConditionEnum = 2
)

// Enum value maps for TradeConditionEnum.
var (
	TradeConditionEnum_name = map[int32]string{
		0: "TRADE_CONDITION_NONE",
		1: "TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE",
		2: "TRADE_CONDITION_ODD_LOT_EQUITY_TRADE",
	}
	TradeConditionEnum_value = map[string]int32{
		"TRADE_CONDITION_NONE":                         0,
		"TRADE_CONDITION_NON_LAST_UPDATE_EQUITY_TRADE": 1,
		"TRADE_CONDITION_ODD_LOT_EQUITY_TRADE":         2,
	}
)

func (x TradeConditionEnum) Enum() *TradeConditionEnum {
	p := new(TradeConditionEnum)
	*p = x
	return p
}

func (x TradeConditionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeConditionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[7].Descriptor()
}

func (TradeConditionEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[7]
}

func (x TradeConditionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeConditionEnum.Descriptor instead.
func (TradeConditionEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{7}
}

// ============================================================================
type OrderStatusEnum int32

const (
	OrderStatusEnum_ORDER_STATUS_UNSPECIFIED            OrderStatusEnum = 0
	OrderStatusEnum_ORDER_STATUS_ORDER_SENT             OrderStatusEnum = 1
	OrderStatusEnum_ORDER_STATUS_PENDING_OPEN           OrderStatusEnum = 2
	OrderStatusEnum_ORDER_STATUS_PENDING_CHILD          OrderStatusEnum = 3
	OrderStatusEnum_ORDER_STATUS_OPEN                   OrderStatusEnum = 4
	OrderStatusEnum_ORDER_STATUS_PENDING_CANCEL_REPLACE OrderStatusEnum = 5
	OrderStatusEnum_ORDER_STATUS_PENDING_CANCEL         OrderStatusEnum = 6
	OrderStatusEnum_ORDER_STATUS_FILLED                 OrderStatusEnum = 7
	OrderStatusEnum_ORDER_STATUS_CANCELED               OrderStatusEnum = 8
	OrderStatusEnum_ORDER_STATUS_REJECTED               OrderStatusEnum = 9
	OrderStatusEnum_ORDER_STATUS_PARTIALLY_FILLED       OrderStatusEnum = 10
)

// Enum value maps for OrderStatusEnum.
var (
	OrderStatusEnum_name = map[int32]string{
		0:  "ORDER_STATUS_UNSPECIFIED",
		1:  "ORDER_STATUS_ORDER_SENT",
		2:  "ORDER_STATUS_PENDING_OPEN",
		3:  "ORDER_STATUS_PENDING_CHILD",
		4:  "ORDER_STATUS_OPEN",
		5:  "ORDER_STATUS_PENDING_CANCEL_REPLACE",
		6:  "ORDER_STATUS_PENDING_CANCEL",
		7:  "ORDER_STATUS_FILLED",
		8:  "ORDER_STATUS_CANCELED",
		9:  "ORDER_STATUS_REJECTED",
		10: "ORDER_STATUS_PARTIALLY_FILLED",
	}
	OrderStatusEnum_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED":            0,
		"ORDER_STATUS_ORDER_SENT":             1,
		"ORDER_STATUS_PENDING_OPEN":           2,
		"ORDER_STATUS_PENDING_CHILD":          3,
		"ORDER_STATUS_OPEN":                   4,
		"ORDER_STATUS_PENDING_CANCEL_REPLACE": 5,
		"ORDER_STATUS_PENDING_CANCEL":         6,
		"ORDER_STATUS_FILLED":                 7,
		"ORDER_STATUS_CANCELED":               8,
		"ORDER_STATUS_REJECTED":               9,
		"ORDER_STATUS_PARTIALLY_FILLED":       10,
	}
)

func (x OrderStatusEnum) Enum() *OrderStatusEnum {
	p := new(OrderStatusEnum)
	*p = x
	return p
}

func (x OrderStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[8].Descriptor()
}

func (OrderStatusEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[8]
}

func (x OrderStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatusEnum.Descriptor instead.
func (OrderStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{8}
}

// ============================================================================
type OrderUpdateReasonEnum int32

const (
	OrderUpdateReasonEnum_ORDER_UPDATE_REASON_UNSET     OrderUpdateReasonEnum = 0
	OrderUpdateReasonEnum_OPEN_ORDERS_REQUEST_RESPONSE  OrderUpdateReasonEnum = 1
	OrderUpdateReasonEnum_NEW_ORDER_ACCEPTED            OrderUpdateReasonEnum = 2
	OrderUpdateReasonEnum_GENERAL_ORDER_UPDATE          OrderUpdateReasonEnum = 3
	OrderUpdateReasonEnum_ORDER_FILLED                  OrderUpdateReasonEnum = 4
	OrderUpdateReasonEnum_ORDER_FILLED_PARTIALLY        OrderUpdateReasonEnum = 5
	OrderUpdateReasonEnum_ORDER_CANCELED                OrderUpdateReasonEnum = 6
	OrderUpdateReasonEnum_ORDER_CANCEL_REPLACE_COMPLETE OrderUpdateReasonEnum = 7
	OrderUpdateReasonEnum_NEW_ORDER_REJECTED            OrderUpdateReasonEnum = 8
	OrderUpdateReasonEnum_ORDER_CANCEL_REJECTED         OrderUpdateReasonEnum = 9
	OrderUpdateReasonEnum_ORDER_CANCEL_REPLACE_REJECTED OrderUpdateReasonEnum = 10
)

// Enum value maps for OrderUpdateReasonEnum.
var (
	OrderUpdateReasonEnum_name = map[int32]string{
		0:  "ORDER_UPDATE_REASON_UNSET",
		1:  "OPEN_ORDERS_REQUEST_RESPONSE",
		2:  "NEW_ORDER_ACCEPTED",
		3:  "GENERAL_ORDER_UPDATE",
		4:  "ORDER_FILLED",
		5:  "ORDER_FILLED_PARTIALLY",
		6:  "ORDER_CANCELED",
		7:  "ORDER_CANCEL_REPLACE_COMPLETE",
		8:  "NEW_ORDER_REJECTED",
		9:  "ORDER_CANCEL_REJECTED",
		10: "ORDER_CANCEL_REPLACE_REJECTED",
	}
	OrderUpdateReasonEnum_value = map[string]int32{
		"ORDER_UPDATE_REASON_UNSET":     0,
		"OPEN_ORDERS_REQUEST_RESPONSE":  1,
		"NEW_ORDER_ACCEPTED":            2,
		"GENERAL_ORDER_UPDATE":          3,
		"ORDER_FILLED":                  4,
		"ORDER_FILLED_PARTIALLY":        5,
		"ORDER_CANCELED":                6,
		"ORDER_CANCEL_REPLACE_COMPLETE": 7,
		"NEW_ORDER_REJECTED":            8,
		"ORDER_CANCEL_REJECTED":         9,
		"ORDER_CANCEL_REPLACE_REJECTED": 10,
	}
)

func (x OrderUpdateReasonEnum) Enum() *OrderUpdateReasonEnum {
	p := new(OrderUpdateReasonEnum)
	*p = x
	return p
}

func (x OrderUpdateReasonEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderUpdateReasonEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[9].Descriptor()
}

func (OrderUpdateReasonEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[9]
}

func (x OrderUpdateReasonEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderUpdateReasonEnum.Descriptor instead.
func (OrderUpdateReasonEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{9}
}

// ============================================================================
type AtBidOrAskEnum int32

const (
	AtBidOrAskEnum_BID_ASK_UNSET AtBidOrAskEnum = 0
	AtBidOrAskEnum_AT_BID        AtBidOrAskEnum = 1
	AtBidOrAskEnum_AT_ASK        AtBidOrAskEnum = 2
)

// Enum value maps for AtBidOrAskEnum.
var (
	AtBidOrAskEnum_name = map[int32]string{
		0: "BID_ASK_UNSET",
		1: "AT_BID",
		2: "AT_ASK",
	}
	AtBidOrAskEnum_value = map[string]int32{
		"BID_ASK_UNSET": 0,
		"AT_BID":        1,
		"AT_ASK":        2,
	}
)

func (x AtBidOrAskEnum) Enum() *AtBidOrAskEnum {
	p := new(AtBidOrAskEnum)
	*p = x
	return p
}

func (x AtBidOrAskEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AtBidOrAskEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[10].Descriptor()
}

func (AtBidOrAskEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[10]
}

func (x AtBidOrAskEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AtBidOrAskEnum.Descriptor instead.
func (AtBidOrAskEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{10}
}

// ============================================================================
type AtBidOrAskEnum8 int32

const (
	AtBidOrAskEnum8_BID_ASK_UNSET_8 AtBidOrAskEnum8 = 0
	AtBidOrAskEnum8_AT_BID_8        AtBidOrAskEnum8 = 1
	AtBidOrAskEnum8_AT_ASK_8        AtBidOrAskEnum8 = 2
)

// Enum value maps for AtBidOrAskEnum8.
var (
	AtBidOrAskEnum8_name = map[int32]string{
		0: "BID_ASK_UNSET_8",
		1: "AT_BID_8",
		2: "AT_ASK_8",
	}
	AtBidOrAskEnum8_value = map[string]int32{
		"BID_ASK_UNSET_8": 0,
		"AT_BID_8":        1,
		"AT_ASK_8":        2,
	}
)

func (x AtBidOrAskEnum8) Enum() *AtBidOrAskEnum8 {
	p := new(AtBidOrAskEnum8)
	*p = x
	return p
}

func (x AtBidOrAskEnum8) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AtBidOrAskEnum8) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[11].Descriptor()
}

func (AtBidOrAskEnum8) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[11]
}

func (x AtBidOrAskEnum8) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AtBidOrAskEnum8.Descriptor instead.
func (AtBidOrAskEnum8) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{11}
}

// ============================================================================
type MarketDepthUpdateTypeEnum int32

const (
	MarketDepthUpdateTypeEnum_DEPTH_UNSET                      MarketDepthUpdateTypeEnum = 0
	MarketDepthUpdateTypeEnum_MARKET_DEPTH_INSERT_UPDATE_LEVEL MarketDepthUpdateTypeEnum = 1 // Insert or update depth at the given price level
	MarketDepthUpdateTypeEnum_MARKET_DEPTH_DELETE_LEVEL        MarketDepthUpdateTypeEnum = 2 // Delete depth at the given price level
)

// Enum value maps for MarketDepthUpdateTypeEnum.
var (
	MarketDepthUpdateTypeEnum_name = map[int32]string{
		0: "DEPTH_UNSET",
		1: "MARKET_DEPTH_INSERT_UPDATE_LEVEL",
		2: "MARKET_DEPTH_DELETE_LEVEL",
	}
	MarketDepthUpdateTypeEnum_value = map[string]int32{
		"DEPTH_UNSET":                      0,
		"MARKET_DEPTH_INSERT_UPDATE_LEVEL": 1,
		"MARKET_DEPTH_DELETE_LEVEL":        2,
	}
)

func (x MarketDepthUpdateTypeEnum) Enum() *MarketDepthUpdateTypeEnum {
	p := new(MarketDepthUpdateTypeEnum)
	*p = x
	return p
}

func (x MarketDepthUpdateTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketDepthUpdateTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[12].Descriptor()
}

func (MarketDepthUpdateTypeEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[12]
}

func (x MarketDepthUpdateTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketDepthUpdateTypeEnum.Descriptor instead.
func (MarketDepthUpdateTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{12}
}

// ============================================================================
type FinalUpdateInBatchEnum int32

const (
	FinalUpdateInBatchEnum_FINAL_UPDATE_UNSET       FinalUpdateInBatchEnum = 0
	FinalUpdateInBatchEnum_FINAL_UPDATE_TRUE        FinalUpdateInBatchEnum = 1
	FinalUpdateInBatchEnum_FINAL_UPDATE_FALSE       FinalUpdateInBatchEnum = 2
	FinalUpdateInBatchEnum_FINAL_UPDATE_BEGIN_BATCH FinalUpdateInBatchEnum = 3
)

// Enum value maps for FinalUpdateInBatchEnum.
var (
	FinalUpdateInBatchEnum_name = map[int32]string{
		0: "FINAL_UPDATE_UNSET",
		1: "FINAL_UPDATE_TRUE",
		2: "FINAL_UPDATE_FALSE",
		3: "FINAL_UPDATE_BEGIN_BATCH",
	}
	FinalUpdateInBatchEnum_value = map[string]int32{
		"FINAL_UPDATE_UNSET":       0,
		"FINAL_UPDATE_TRUE":        1,
		"FINAL_UPDATE_FALSE":       2,
		"FINAL_UPDATE_BEGIN_BATCH": 3,
	}
)

func (x FinalUpdateInBatchEnum) Enum() *FinalUpdateInBatchEnum {
	p := new(FinalUpdateInBatchEnum)
	*p = x
	return p
}

func (x FinalUpdateInBatchEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinalUpdateInBatchEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[13].Descriptor()
}

func (FinalUpdateInBatchEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[13]
}

func (x FinalUpdateInBatchEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinalUpdateInBatchEnum.Descriptor instead.
func (FinalUpdateInBatchEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{13}
}

// ============================================================================
type OrderTypeEnum int32

const (
	OrderTypeEnum_ORDER_TYPE_UNSET             OrderTypeEnum = 0
	OrderTypeEnum_ORDER_TYPE_MARKET            OrderTypeEnum = 1
	OrderTypeEnum_ORDER_TYPE_LIMIT             OrderTypeEnum = 2
	OrderTypeEnum_ORDER_TYPE_STOP              OrderTypeEnum = 3
	OrderTypeEnum_ORDER_TYPE_STOP_LIMIT        OrderTypeEnum = 4
	OrderTypeEnum_ORDER_TYPE_MARKET_IF_TOUCHED OrderTypeEnum = 5
	OrderTypeEnum_ORDER_TYPE_LIMIT_IF_TOUCHED  OrderTypeEnum = 6
)

// Enum value maps for OrderTypeEnum.
var (
	OrderTypeEnum_name = map[int32]string{
		0: "ORDER_TYPE_UNSET",
		1: "ORDER_TYPE_MARKET",
		2: "ORDER_TYPE_LIMIT",
		3: "ORDER_TYPE_STOP",
		4: "ORDER_TYPE_STOP_LIMIT",
		5: "ORDER_TYPE_MARKET_IF_TOUCHED",
		6: "ORDER_TYPE_LIMIT_IF_TOUCHED",
	}
	OrderTypeEnum_value = map[string]int32{
		"ORDER_TYPE_UNSET":             0,
		"ORDER_TYPE_MARKET":            1,
		"ORDER_TYPE_LIMIT":             2,
		"ORDER_TYPE_STOP":              3,
		"ORDER_TYPE_STOP_LIMIT":        4,
		"ORDER_TYPE_MARKET_IF_TOUCHED": 5,
		"ORDER_TYPE_LIMIT_IF_TOUCHED":  6,
	}
)

func (x OrderTypeEnum) Enum() *OrderTypeEnum {
	p := new(OrderTypeEnum)
	*p = x
	return p
}

func (x OrderTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[14].Descriptor()
}

func (OrderTypeEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[14]
}

func (x OrderTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTypeEnum.Descriptor instead.
func (OrderTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{14}
}

// ============================================================================
type TimeInForceEnum int32

const (
	TimeInForceEnum_TIF_UNSET               TimeInForceEnum = 0
	TimeInForceEnum_TIF_DAY                 TimeInForceEnum = 1
	TimeInForceEnum_TIF_GOOD_TILL_CANCELED  TimeInForceEnum = 2
	TimeInForceEnum_TIF_GOOD_TILL_DATE_TIME TimeInForceEnum = 3
	TimeInForceEnum_TIF_IMMEDIATE_OR_CANCEL TimeInForceEnum = 4
	TimeInForceEnum_TIF_ALL_OR_NONE         TimeInForceEnum = 5
	TimeInForceEnum_TIF_FILL_OR_KILL        TimeInForceEnum = 6
)

// Enum value maps for TimeInForceEnum.
var (
	TimeInForceEnum_name = map[int32]string{
		0: "TIF_UNSET",
		1: "TIF_DAY",
		2: "TIF_GOOD_TILL_CANCELED",
		3: "TIF_GOOD_TILL_DATE_TIME",
		4: "TIF_IMMEDIATE_OR_CANCEL",
		5: "TIF_ALL_OR_NONE",
		6: "TIF_FILL_OR_KILL",
	}
	TimeInForceEnum_value = map[string]int32{
		"TIF_UNSET":               0,
		"TIF_DAY":                 1,
		"TIF_GOOD_TILL_CANCELED":  2,
		"TIF_GOOD_TILL_DATE_TIME": 3,
		"TIF_IMMEDIATE_OR_CANCEL": 4,
		"TIF_ALL_OR_NONE":         5,
		"TIF_FILL_OR_KILL":        6,
	}
)

func (x TimeInForceEnum) Enum() *TimeInForceEnum {
	p := new(TimeInForceEnum)
	*p = x
	return p
}

func (x TimeInForceEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeInForceEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[15].Descriptor()
}

func (TimeInForceEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[15]
}

func (x TimeInForceEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeInForceEnum.Descriptor instead.
func (TimeInForceEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{15}
}

// ============================================================================
type BuySellEnum int32

const (
	BuySellEnum_BUY_SELL_UNSET BuySellEnum = 0
	BuySellEnum_BUY            BuySellEnum = 1
	BuySellEnum_SELL           BuySellEnum = 2
)

// Enum value maps for BuySellEnum.
var (
	BuySellEnum_name = map[int32]string{
		0: "BUY_SELL_UNSET",
		1: "BUY",
		2: "SELL",
	}
	BuySellEnum_value = map[string]int32{
		"BUY_SELL_UNSET": 0,
		"BUY":            1,
		"SELL":           2,
	}
)

func (x BuySellEnum) Enum() *BuySellEnum {
	p := new(BuySellEnum)
	*p = x
	return p
}

func (x BuySellEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuySellEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[16].Descriptor()
}

func (BuySellEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[16]
}

func (x BuySellEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuySellEnum.Descriptor instead.
func (BuySellEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{16}
}

// ============================================================================
type OpenCloseTradeEnum int32

const (
	OpenCloseTradeEnum_TRADE_UNSET OpenCloseTradeEnum = 0
	OpenCloseTradeEnum_TRADE_OPEN  OpenCloseTradeEnum = 1
	OpenCloseTradeEnum_TRADE_CLOSE OpenCloseTradeEnum = 2
)

// Enum value maps for OpenCloseTradeEnum.
var (
	OpenCloseTradeEnum_name = map[int32]string{
		0: "TRADE_UNSET",
		1: "TRADE_OPEN",
		2: "TRADE_CLOSE",
	}
	OpenCloseTradeEnum_value = map[string]int32{
		"TRADE_UNSET": 0,
		"TRADE_OPEN":  1,
		"TRADE_CLOSE": 2,
	}
)

func (x OpenCloseTradeEnum) Enum() *OpenCloseTradeEnum {
	p := new(OpenCloseTradeEnum)
	*p = x
	return p
}

func (x OpenCloseTradeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenCloseTradeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[17].Descriptor()
}

func (OpenCloseTradeEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[17]
}

func (x OpenCloseTradeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenCloseTradeEnum.Descriptor instead.
func (OpenCloseTradeEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{17}
}

// ============================================================================
type PartialFillHandlingEnum int32

const (
	PartialFillHandlingEnum_PARTIAL_FILL_UNSET                     PartialFillHandlingEnum = 0
	PartialFillHandlingEnum_PARTIAL_FILL_HANDLING_REDUCE_QUANTITY  PartialFillHandlingEnum = 1
	PartialFillHandlingEnum_PARTIAL_FILL_HANDLING_IMMEDIATE_CANCEL PartialFillHandlingEnum = 2
)

// Enum value maps for PartialFillHandlingEnum.
var (
	PartialFillHandlingEnum_name = map[int32]string{
		0: "PARTIAL_FILL_UNSET",
		1: "PARTIAL_FILL_HANDLING_REDUCE_QUANTITY",
		2: "PARTIAL_FILL_HANDLING_IMMEDIATE_CANCEL",
	}
	PartialFillHandlingEnum_value = map[string]int32{
		"PARTIAL_FILL_UNSET":                     0,
		"PARTIAL_FILL_HANDLING_REDUCE_QUANTITY":  1,
		"PARTIAL_FILL_HANDLING_IMMEDIATE_CANCEL": 2,
	}
)

func (x PartialFillHandlingEnum) Enum() *PartialFillHandlingEnum {
	p := new(PartialFillHandlingEnum)
	*p = x
	return p
}

func (x PartialFillHandlingEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartialFillHandlingEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[18].Descriptor()
}

func (PartialFillHandlingEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[18]
}

func (x PartialFillHandlingEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartialFillHandlingEnum.Descriptor instead.
func (PartialFillHandlingEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{18}
}

// ============================================================================
type MarketDataFeedStatusEnum int32

const (
	MarketDataFeedStatusEnum_MARKET_DATA_FEED_STATUS_UNSET MarketDataFeedStatusEnum = 0
	MarketDataFeedStatusEnum_MARKET_DATA_FEED_UNAVAILABLE  MarketDataFeedStatusEnum = 1
	MarketDataFeedStatusEnum_MARKET_DATA_FEED_AVAILABLE    MarketDataFeedStatusEnum = 2
)

// Enum value maps for MarketDataFeedStatusEnum.
var (
	MarketDataFeedStatusEnum_name = map[int32]string{
		0: "MARKET_DATA_FEED_STATUS_UNSET",
		1: "MARKET_DATA_FEED_UNAVAILABLE",
		2: "MARKET_DATA_FEED_AVAILABLE",
	}
	MarketDataFeedStatusEnum_value = map[string]int32{
		"MARKET_DATA_FEED_STATUS_UNSET": 0,
		"MARKET_DATA_FEED_UNAVAILABLE":  1,
		"MARKET_DATA_FEED_AVAILABLE":    2,
	}
)

func (x MarketDataFeedStatusEnum) Enum() *MarketDataFeedStatusEnum {
	p := new(MarketDataFeedStatusEnum)
	*p = x
	return p
}

func (x MarketDataFeedStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketDataFeedStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[19].Descriptor()
}

func (MarketDataFeedStatusEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[19]
}

func (x MarketDataFeedStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketDataFeedStatusEnum.Descriptor instead.
func (MarketDataFeedStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{19}
}

// ============================================================================
type PriceDisplayFormatEnum int32

const (
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_0               PriceDisplayFormatEnum = 0
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_1               PriceDisplayFormatEnum = 1
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_2               PriceDisplayFormatEnum = 2
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_3               PriceDisplayFormatEnum = 3
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_4               PriceDisplayFormatEnum = 4
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_5               PriceDisplayFormatEnum = 5
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_6               PriceDisplayFormatEnum = 6
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_7               PriceDisplayFormatEnum = 7
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_8               PriceDisplayFormatEnum = 8
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_9               PriceDisplayFormatEnum = 9
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_256         PriceDisplayFormatEnum = 356
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_128         PriceDisplayFormatEnum = 228
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_64          PriceDisplayFormatEnum = 164
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_32_QUARTERS PriceDisplayFormatEnum = 136
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_32_HALVES   PriceDisplayFormatEnum = 134
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_32          PriceDisplayFormatEnum = 132
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_16          PriceDisplayFormatEnum = 116
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_8           PriceDisplayFormatEnum = 108
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_4           PriceDisplayFormatEnum = 104
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DENOMINATOR_2           PriceDisplayFormatEnum = 102
	PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_UNSET                   PriceDisplayFormatEnum = -1
)

// Enum value maps for PriceDisplayFormatEnum.
var (
	PriceDisplayFormatEnum_name = map[int32]string{
		0:   "PRICE_DISPLAY_FORMAT_DECIMAL_0",
		1:   "PRICE_DISPLAY_FORMAT_DECIMAL_1",
		2:   "PRICE_DISPLAY_FORMAT_DECIMAL_2",
		3:   "PRICE_DISPLAY_FORMAT_DECIMAL_3",
		4:   "PRICE_DISPLAY_FORMAT_DECIMAL_4",
		5:   "PRICE_DISPLAY_FORMAT_DECIMAL_5",
		6:   "PRICE_DISPLAY_FORMAT_DECIMAL_6",
		7:   "PRICE_DISPLAY_FORMAT_DECIMAL_7",
		8:   "PRICE_DISPLAY_FORMAT_DECIMAL_8",
		9:   "PRICE_DISPLAY_FORMAT_DECIMAL_9",
		356: "PRICE_DISPLAY_FORMAT_DENOMINATOR_256",
		228: "PRICE_DISPLAY_FORMAT_DENOMINATOR_128",
		164: "PRICE_DISPLAY_FORMAT_DENOMINATOR_64",
		136: "PRICE_DISPLAY_FORMAT_DENOMINATOR_32_QUARTERS",
		134: "PRICE_DISPLAY_FORMAT_DENOMINATOR_32_HALVES",
		132: "PRICE_DISPLAY_FORMAT_DENOMINATOR_32",
		116: "PRICE_DISPLAY_FORMAT_DENOMINATOR_16",
		108: "PRICE_DISPLAY_FORMAT_DENOMINATOR_8",
		104: "PRICE_DISPLAY_FORMAT_DENOMINATOR_4",
		102: "PRICE_DISPLAY_FORMAT_DENOMINATOR_2",
		-1:  "PRICE_DISPLAY_FORMAT_UNSET",
	}
	PriceDisplayFormatEnum_value = map[string]int32{
		"PRICE_DISPLAY_FORMAT_DECIMAL_0":               0,
		"PRICE_DISPLAY_FORMAT_DECIMAL_1":               1,
		"PRICE_DISPLAY_FORMAT_DECIMAL_2":               2,
		"PRICE_DISPLAY_FORMAT_DECIMAL_3":               3,
		"PRICE_DISPLAY_FORMAT_DECIMAL_4":               4,
		"PRICE_DISPLAY_FORMAT_DECIMAL_5":               5,
		"PRICE_DISPLAY_FORMAT_DECIMAL_6":               6,
		"PRICE_DISPLAY_FORMAT_DECIMAL_7":               7,
		"PRICE_DISPLAY_FORMAT_DECIMAL_8":               8,
		"PRICE_DISPLAY_FORMAT_DECIMAL_9":               9,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_256":         356,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_128":         228,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_64":          164,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_32_QUARTERS": 136,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_32_HALVES":   134,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_32":          132,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_16":          116,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_8":           108,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_4":           104,
		"PRICE_DISPLAY_FORMAT_DENOMINATOR_2":           102,
		"PRICE_DISPLAY_FORMAT_UNSET":                   -1,
	}
)

func (x PriceDisplayFormatEnum) Enum() *PriceDisplayFormatEnum {
	p := new(PriceDisplayFormatEnum)
	*p = x
	return p
}

func (x PriceDisplayFormatEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceDisplayFormatEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[20].Descriptor()
}

func (PriceDisplayFormatEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[20]
}

func (x PriceDisplayFormatEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceDisplayFormatEnum.Descriptor instead.
func (PriceDisplayFormatEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{20}
}

// ============================================================================
type SecurityTypeEnum int32

const (
	SecurityTypeEnum_SECURITY_TYPE_UNSET            SecurityTypeEnum = 0
	SecurityTypeEnum_SECURITY_TYPE_FUTURE           SecurityTypeEnum = 1
	SecurityTypeEnum_SECURITY_TYPE_STOCK            SecurityTypeEnum = 2
	SecurityTypeEnum_SECURITY_TYPE_FOREX            SecurityTypeEnum = 3
	SecurityTypeEnum_SECURITY_TYPE_INDEX            SecurityTypeEnum = 4
	SecurityTypeEnum_SECURITY_TYPE_FUTURES_STRATEGY SecurityTypeEnum = 5
	SecurityTypeEnum_SECURITY_TYPE_FUTURES_OPTION   SecurityTypeEnum = 7
	SecurityTypeEnum_SECURITY_TYPE_STOCK_OPTION     SecurityTypeEnum = 6
	SecurityTypeEnum_SECURITY_TYPE_INDEX_OPTION     SecurityTypeEnum = 8
	SecurityTypeEnum_SECURITY_TYPE_BOND             SecurityTypeEnum = 9
	SecurityTypeEnum_SECURITY_TYPE_MUTUAL_FUND      SecurityTypeEnum = 10
)

// Enum value maps for SecurityTypeEnum.
var (
	SecurityTypeEnum_name = map[int32]string{
		0:  "SECURITY_TYPE_UNSET",
		1:  "SECURITY_TYPE_FUTURE",
		2:  "SECURITY_TYPE_STOCK",
		3:  "SECURITY_TYPE_FOREX",
		4:  "SECURITY_TYPE_INDEX",
		5:  "SECURITY_TYPE_FUTURES_STRATEGY",
		7:  "SECURITY_TYPE_FUTURES_OPTION",
		6:  "SECURITY_TYPE_STOCK_OPTION",
		8:  "SECURITY_TYPE_INDEX_OPTION",
		9:  "SECURITY_TYPE_BOND",
		10: "SECURITY_TYPE_MUTUAL_FUND",
	}
	SecurityTypeEnum_value = map[string]int32{
		"SECURITY_TYPE_UNSET":            0,
		"SECURITY_TYPE_FUTURE":           1,
		"SECURITY_TYPE_STOCK":            2,
		"SECURITY_TYPE_FOREX":            3,
		"SECURITY_TYPE_INDEX":            4,
		"SECURITY_TYPE_FUTURES_STRATEGY": 5,
		"SECURITY_TYPE_FUTURES_OPTION":   7,
		"SECURITY_TYPE_STOCK_OPTION":     6,
		"SECURITY_TYPE_INDEX_OPTION":     8,
		"SECURITY_TYPE_BOND":             9,
		"SECURITY_TYPE_MUTUAL_FUND":      10,
	}
)

func (x SecurityTypeEnum) Enum() *SecurityTypeEnum {
	p := new(SecurityTypeEnum)
	*p = x
	return p
}

func (x SecurityTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[21].Descriptor()
}

func (SecurityTypeEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[21]
}

func (x SecurityTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityTypeEnum.Descriptor instead.
func (SecurityTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{21}
}

// ============================================================================
type PutCallEnum int32

const (
	PutCallEnum_PC_UNSET PutCallEnum = 0
	PutCallEnum_PC_CALL  PutCallEnum = 1
	PutCallEnum_PC_PUT   PutCallEnum = 2
)

// Enum value maps for PutCallEnum.
var (
	PutCallEnum_name = map[int32]string{
		0: "PC_UNSET",
		1: "PC_CALL",
		2: "PC_PUT",
	}
	PutCallEnum_value = map[string]int32{
		"PC_UNSET": 0,
		"PC_CALL":  1,
		"PC_PUT":   2,
	}
)

func (x PutCallEnum) Enum() *PutCallEnum {
	p := new(PutCallEnum)
	*p = x
	return p
}

func (x PutCallEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PutCallEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[22].Descriptor()
}

func (PutCallEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[22]
}

func (x PutCallEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PutCallEnum.Descriptor instead.
func (PutCallEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{22}
}

// ============================================================================
type SearchTypeEnum int32

const (
	SearchTypeEnum_SEARCH_TYPE_UNSET          SearchTypeEnum = 0
	SearchTypeEnum_SEARCH_TYPE_BY_SYMBOL      SearchTypeEnum = 1
	SearchTypeEnum_SEARCH_TYPE_BY_DESCRIPTION SearchTypeEnum = 2
)

// Enum value maps for SearchTypeEnum.
var (
	SearchTypeEnum_name = map[int32]string{
		0: "SEARCH_TYPE_UNSET",
		1: "SEARCH_TYPE_BY_SYMBOL",
		2: "SEARCH_TYPE_BY_DESCRIPTION",
	}
	SearchTypeEnum_value = map[string]int32{
		"SEARCH_TYPE_UNSET":          0,
		"SEARCH_TYPE_BY_SYMBOL":      1,
		"SEARCH_TYPE_BY_DESCRIPTION": 2,
	}
)

func (x SearchTypeEnum) Enum() *SearchTypeEnum {
	p := new(SearchTypeEnum)
	*p = x
	return p
}

func (x SearchTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[23].Descriptor()
}

func (SearchTypeEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[23]
}

func (x SearchTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchTypeEnum.Descriptor instead.
func (SearchTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{23}
}

// ============================================================================
type HistoricalDataIntervalEnum int32

const (
	HistoricalDataIntervalEnum_INTERVAL_TICK       HistoricalDataIntervalEnum = 0
	HistoricalDataIntervalEnum_INTERVAL_1_SECOND   HistoricalDataIntervalEnum = 1
	HistoricalDataIntervalEnum_INTERVAL_2_SECONDS  HistoricalDataIntervalEnum = 2
	HistoricalDataIntervalEnum_INTERVAL_4_SECONDS  HistoricalDataIntervalEnum = 4
	HistoricalDataIntervalEnum_INTERVAL_5_SECONDS  HistoricalDataIntervalEnum = 5
	HistoricalDataIntervalEnum_INTERVAL_10_SECONDS HistoricalDataIntervalEnum = 10
	HistoricalDataIntervalEnum_INTERVAL_30_SECONDS HistoricalDataIntervalEnum = 30
	HistoricalDataIntervalEnum_INTERVAL_1_MINUTE   HistoricalDataIntervalEnum = 60
	HistoricalDataIntervalEnum_INTERVAL_5_MINUTE   HistoricalDataIntervalEnum = 300
	HistoricalDataIntervalEnum_INTERVAL_10_MINUTE  HistoricalDataIntervalEnum = 600
	HistoricalDataIntervalEnum_INTERVAL_15_MINUTE  HistoricalDataIntervalEnum = 900
	HistoricalDataIntervalEnum_INTERVAL_30_MINUTE  HistoricalDataIntervalEnum = 1800
	HistoricalDataIntervalEnum_INTERVAL_1_HOUR     HistoricalDataIntervalEnum = 3600
	HistoricalDataIntervalEnum_INTERVAL_2_HOURS    HistoricalDataIntervalEnum = 7200
	HistoricalDataIntervalEnum_INTERVAL_1_DAY      HistoricalDataIntervalEnum = 86400
	HistoricalDataIntervalEnum_INTERVAL_1_WEEK     HistoricalDataIntervalEnum = 604800
)

// Enum value maps for HistoricalDataIntervalEnum.
var (
	HistoricalDataIntervalEnum_name = map[int32]string{
		0:      "INTERVAL_TICK",
		1:      "INTERVAL_1_SECOND",
		2:      "INTERVAL_2_SECONDS",
		4:      "INTERVAL_4_SECONDS",
		5:      "INTERVAL_5_SECONDS",
		10:     "INTERVAL_10_SECONDS",
		30:     "INTERVAL_30_SECONDS",
		60:     "INTERVAL_1_MINUTE",
		300:    "INTERVAL_5_MINUTE",
		600:    "INTERVAL_10_MINUTE",
		900:    "INTERVAL_15_MINUTE",
		1800:   "INTERVAL_30_MINUTE",
		3600:   "INTERVAL_1_HOUR",
		7200:   "INTERVAL_2_HOURS",
		86400:  "INTERVAL_1_DAY",
		604800: "INTERVAL_1_WEEK",
	}
	HistoricalDataIntervalEnum_value = map[string]int32{
		"INTERVAL_TICK":       0,
		"INTERVAL_1_SECOND":   1,
		"INTERVAL_2_SECONDS":  2,
		"INTERVAL_4_SECONDS":  4,
		"INTERVAL_5_SECONDS":  5,
		"INTERVAL_10_SECONDS": 10,
		"INTERVAL_30_SECONDS": 30,
		"INTERVAL_1_MINUTE":   60,
		"INTERVAL_5_MINUTE":   300,
		"INTERVAL_10_MINUTE":  600,
		"INTERVAL_15_MINUTE":  900,
		"INTERVAL_30_MINUTE":  1800,
		"INTERVAL_1_HOUR":     3600,
		"INTERVAL_2_HOURS":    7200,
		"INTERVAL_1_DAY":      86400,
		"INTERVAL_1_WEEK":     604800,
	}
)

func (x HistoricalDataIntervalEnum) Enum() *HistoricalDataIntervalEnum {
	p := new(HistoricalDataIntervalEnum)
	*p = x
	return p
}

func (x HistoricalDataIntervalEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistoricalDataIntervalEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[24].Descriptor()
}

func (HistoricalDataIntervalEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[24]
}

func (x HistoricalDataIntervalEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoricalDataIntervalEnum.Descriptor instead.
func (HistoricalDataIntervalEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{24}
}

// ============================================================================
type HistoricalPriceDataRejectReasonCodeEnum int32

const (
	HistoricalPriceDataRejectReasonCodeEnum_HPDR_UNSET                                         HistoricalPriceDataRejectReasonCodeEnum = 0
	HistoricalPriceDataRejectReasonCodeEnum_HPDR_UNABLE_TO_SERVE_DATA_RETRY_LATER              HistoricalPriceDataRejectReasonCodeEnum = 1
	HistoricalPriceDataRejectReasonCodeEnum_HPDR_UNABLE_TO_SERVE_DATA_DO_NOT_RETRY             HistoricalPriceDataRejectReasonCodeEnum = 2
	HistoricalPriceDataRejectReasonCodeEnum_HPDR_DATA_REQUEST_OUTSIDE_BOUNDS_OF_AVAILABLE_DATA HistoricalPriceDataRejectReasonCodeEnum = 3
	HistoricalPriceDataRejectReasonCodeEnum_HPDR_GENERAL_REJECT_ERROR                          HistoricalPriceDataRejectReasonCodeEnum = 4
)

// Enum value maps for HistoricalPriceDataRejectReasonCodeEnum.
var (
	HistoricalPriceDataRejectReasonCodeEnum_name = map[int32]string{
		0: "HPDR_UNSET",
		1: "HPDR_UNABLE_TO_SERVE_DATA_RETRY_LATER",
		2: "HPDR_UNABLE_TO_SERVE_DATA_DO_NOT_RETRY",
		3: "HPDR_DATA_REQUEST_OUTSIDE_BOUNDS_OF_AVAILABLE_DATA",
		4: "HPDR_GENERAL_REJECT_ERROR",
	}
	HistoricalPriceDataRejectReasonCodeEnum_value = map[string]int32{
		"HPDR_UNSET":                                         0,
		"HPDR_UNABLE_TO_SERVE_DATA_RETRY_LATER":              1,
		"HPDR_UNABLE_TO_SERVE_DATA_DO_NOT_RETRY":             2,
		"HPDR_DATA_REQUEST_OUTSIDE_BOUNDS_OF_AVAILABLE_DATA": 3,
		"HPDR_GENERAL_REJECT_ERROR":                          4,
	}
)

func (x HistoricalPriceDataRejectReasonCodeEnum) Enum() *HistoricalPriceDataRejectReasonCodeEnum {
	p := new(HistoricalPriceDataRejectReasonCodeEnum)
	*p = x
	return p
}

func (x HistoricalPriceDataRejectReasonCodeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HistoricalPriceDataRejectReasonCodeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[25].Descriptor()
}

func (HistoricalPriceDataRejectReasonCodeEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[25]
}

func (x HistoricalPriceDataRejectReasonCodeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoricalPriceDataRejectReasonCodeEnum.Descriptor instead.
func (HistoricalPriceDataRejectReasonCodeEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{25}
}

// ============================================================================
type TradingStatusEnum int32

const (
	TradingStatusEnum_TRADING_STATUS_UNKNOWN      TradingStatusEnum = 0
	TradingStatusEnum_TRADING_STATUS_PRE_OPEN     TradingStatusEnum = 1
	TradingStatusEnum_TRADING_STATUS_OPEN         TradingStatusEnum = 2
	TradingStatusEnum_TRADING_STATUS_CLOSE        TradingStatusEnum = 3
	TradingStatusEnum_TRADING_STATUS_TRADING_HALT TradingStatusEnum = 4
)

// Enum value maps for TradingStatusEnum.
var (
	TradingStatusEnum_name = map[int32]string{
		0: "TRADING_STATUS_UNKNOWN",
		1: "TRADING_STATUS_PRE_OPEN",
		2: "TRADING_STATUS_OPEN",
		3: "TRADING_STATUS_CLOSE",
		4: "TRADING_STATUS_TRADING_HALT",
	}
	TradingStatusEnum_value = map[string]int32{
		"TRADING_STATUS_UNKNOWN":      0,
		"TRADING_STATUS_PRE_OPEN":     1,
		"TRADING_STATUS_OPEN":         2,
		"TRADING_STATUS_CLOSE":        3,
		"TRADING_STATUS_TRADING_HALT": 4,
	}
)

func (x TradingStatusEnum) Enum() *TradingStatusEnum {
	p := new(TradingStatusEnum)
	*p = x
	return p
}

func (x TradingStatusEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingStatusEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[26].Descriptor()
}

func (TradingStatusEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[26]
}

func (x TradingStatusEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingStatusEnum.Descriptor instead.
func (TradingStatusEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{26}
}

// ==========================================================================
type MessageSetBoundaryEnum int32

const (
	MessageSetBoundaryEnum_MESSAGE_SET_BOUNDARY_UNSET MessageSetBoundaryEnum = 0
	MessageSetBoundaryEnum_MESSAGE_SET_BOUNDARY_BEGIN MessageSetBoundaryEnum = 1
	MessageSetBoundaryEnum_MESSAGE_SET_BOUNDARY_END   MessageSetBoundaryEnum = 2
)

// Enum value maps for MessageSetBoundaryEnum.
var (
	MessageSetBoundaryEnum_name = map[int32]string{
		0: "MESSAGE_SET_BOUNDARY_UNSET",
		1: "MESSAGE_SET_BOUNDARY_BEGIN",
		2: "MESSAGE_SET_BOUNDARY_END",
	}
	MessageSetBoundaryEnum_value = map[string]int32{
		"MESSAGE_SET_BOUNDARY_UNSET": 0,
		"MESSAGE_SET_BOUNDARY_BEGIN": 1,
		"MESSAGE_SET_BOUNDARY_END":   2,
	}
)

func (x MessageSetBoundaryEnum) Enum() *MessageSetBoundaryEnum {
	p := new(MessageSetBoundaryEnum)
	*p = x
	return p
}

func (x MessageSetBoundaryEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSetBoundaryEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[27].Descriptor()
}

func (MessageSetBoundaryEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[27]
}

func (x MessageSetBoundaryEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSetBoundaryEnum.Descriptor instead.
func (MessageSetBoundaryEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{27}
}

// ============================================================================
type TradingIsDisabledEnum int32

const (
	TradingIsDisabledEnum_TRADING_IS_DISABLED_RETURN_CURRENT_VALUE TradingIsDisabledEnum = 0
	TradingIsDisabledEnum_TRADING_IS_DISABLED_DISABLE              TradingIsDisabledEnum = 1
	TradingIsDisabledEnum_TRADING_IS_DISABLED_ENABLE               TradingIsDisabledEnum = 2
)

// Enum value maps for TradingIsDisabledEnum.
var (
	TradingIsDisabledEnum_name = map[int32]string{
		0: "TRADING_IS_DISABLED_RETURN_CURRENT_VALUE",
		1: "TRADING_IS_DISABLED_DISABLE",
		2: "TRADING_IS_DISABLED_ENABLE",
	}
	TradingIsDisabledEnum_value = map[string]int32{
		"TRADING_IS_DISABLED_RETURN_CURRENT_VALUE": 0,
		"TRADING_IS_DISABLED_DISABLE":              1,
		"TRADING_IS_DISABLED_ENABLE":               2,
	}
)

func (x TradingIsDisabledEnum) Enum() *TradingIsDisabledEnum {
	p := new(TradingIsDisabledEnum)
	*p = x
	return p
}

func (x TradingIsDisabledEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingIsDisabledEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_dtc_DTCProtocol_proto_enumTypes[28].Descriptor()
}

func (TradingIsDisabledEnum) Type() protoreflect.EnumType {
	return &file_dtc_DTCProtocol_proto_enumTypes[28]
}

func (x TradingIsDisabledEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingIsDisabledEnum.Descriptor instead.
func (TradingIsDisabledEnum) EnumDescriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{28}
}

// ============================================================================
type EncodingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion int32        `protobuf:"varint,1,opt,name=ProtocolVersion,proto3" json:"ProtocolVersion,omitempty"`
	Encoding        EncodingEnum `protobuf:"varint,2,opt,name=Encoding,proto3,enum=DTC_PB.EncodingEnum" json:"Encoding,omitempty"`
	ProtocolType    string       `protobuf:"bytes,3,opt,name=ProtocolType,proto3" json:"ProtocolType,omitempty"`
}

func (x *EncodingRequest) Reset() {
	*x = EncodingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingRequest) ProtoMessage() {}

func (x *EncodingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingRequest.ProtoReflect.Descriptor instead.
func (*EncodingRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{0}
}

func (x *EncodingRequest) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *EncodingRequest) GetEncoding() EncodingEnum {
	if x != nil {
		return x.Encoding
	}
	return EncodingEnum_BINARY_ENCODING
}

func (x *EncodingRequest) GetProtocolType() string {
	if x != nil {
		return x.ProtocolType
	}
	return ""
}

// ============================================================================
type EncodingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion int32        `protobuf:"varint,1,opt,name=ProtocolVersion,proto3" json:"ProtocolVersion,omitempty"`
	Encoding        EncodingEnum `protobuf:"varint,2,opt,name=Encoding,proto3,enum=DTC_PB.EncodingEnum" json:"Encoding,omitempty"`
	ProtocolType    string       `protobuf:"bytes,3,opt,name=ProtocolType,proto3" json:"ProtocolType,omitempty"`
}

func (x *EncodingResponse) Reset() {
	*x = EncodingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodingResponse) ProtoMessage() {}

func (x *EncodingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodingResponse.ProtoReflect.Descriptor instead.
func (*EncodingResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{1}
}

func (x *EncodingResponse) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *EncodingResponse) GetEncoding() EncodingEnum {
	if x != nil {
		return x.Encoding
	}
	return EncodingEnum_BINARY_ENCODING
}

func (x *EncodingResponse) GetProtocolType() string {
	if x != nil {
		return x.ProtocolType
	}
	return ""
}

// ============================================================================
type LogonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion                int32  `protobuf:"varint,1,opt,name=ProtocolVersion,proto3" json:"ProtocolVersion,omitempty"`
	Username                       string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Password                       string `protobuf:"bytes,3,opt,name=Password,proto3" json:"Password,omitempty"`
	GeneralTextData                string `protobuf:"bytes,4,opt,name=GeneralTextData,proto3" json:"GeneralTextData,omitempty"`
	Integer_1                      int32  `protobuf:"varint,5,opt,name=Integer_1,json=Integer1,proto3" json:"Integer_1,omitempty"`
	Integer_2                      int32  `protobuf:"varint,6,opt,name=Integer_2,json=Integer2,proto3" json:"Integer_2,omitempty"`
	HeartbeatIntervalInSeconds     int32  `protobuf:"varint,7,opt,name=HeartbeatIntervalInSeconds,proto3" json:"HeartbeatIntervalInSeconds,omitempty"`
	Unused1                        int32  `protobuf:"varint,8,opt,name=Unused1,proto3" json:"Unused1,omitempty"`
	TradeAccount                   string `protobuf:"bytes,9,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	HardwareIdentifier             string `protobuf:"bytes,10,opt,name=HardwareIdentifier,proto3" json:"HardwareIdentifier,omitempty"`
	ClientName                     string `protobuf:"bytes,11,opt,name=ClientName,proto3" json:"ClientName,omitempty"`
	MarketDataTransmissionInterval int32  `protobuf:"varint,12,opt,name=MarketDataTransmissionInterval,proto3" json:"MarketDataTransmissionInterval,omitempty"`
}

func (x *LogonRequest) Reset() {
	*x = LogonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonRequest) ProtoMessage() {}

func (x *LogonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonRequest.ProtoReflect.Descriptor instead.
func (*LogonRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{2}
}

func (x *LogonRequest) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *LogonRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LogonRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LogonRequest) GetGeneralTextData() string {
	if x != nil {
		return x.GeneralTextData
	}
	return ""
}

func (x *LogonRequest) GetInteger_1() int32 {
	if x != nil {
		return x.Integer_1
	}
	return 0
}

func (x *LogonRequest) GetInteger_2() int32 {
	if x != nil {
		return x.Integer_2
	}
	return 0
}

func (x *LogonRequest) GetHeartbeatIntervalInSeconds() int32 {
	if x != nil {
		return x.HeartbeatIntervalInSeconds
	}
	return 0
}

func (x *LogonRequest) GetUnused1() int32 {
	if x != nil {
		return x.Unused1
	}
	return 0
}

func (x *LogonRequest) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *LogonRequest) GetHardwareIdentifier() string {
	if x != nil {
		return x.HardwareIdentifier
	}
	return ""
}

func (x *LogonRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *LogonRequest) GetMarketDataTransmissionInterval() int32 {
	if x != nil {
		return x.MarketDataTransmissionInterval
	}
	return 0
}

// ============================================================================
type LogonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProtocolVersion                               int32           `protobuf:"varint,1,opt,name=ProtocolVersion,proto3" json:"ProtocolVersion,omitempty"`
	Result                                        LogonStatusEnum `protobuf:"varint,2,opt,name=Result,proto3,enum=DTC_PB.LogonStatusEnum" json:"Result,omitempty"`
	ResultText                                    string          `protobuf:"bytes,3,opt,name=ResultText,proto3" json:"ResultText,omitempty"`
	ReconnectAddress                              string          `protobuf:"bytes,4,opt,name=ReconnectAddress,proto3" json:"ReconnectAddress,omitempty"`
	Integer_1                                     int32           `protobuf:"varint,5,opt,name=Integer_1,json=Integer1,proto3" json:"Integer_1,omitempty"`
	ServerName                                    string          `protobuf:"bytes,6,opt,name=ServerName,proto3" json:"ServerName,omitempty"`
	MarketDepthUpdatesBestBidAndAsk               uint32          `protobuf:"varint,7,opt,name=MarketDepthUpdatesBestBidAndAsk,proto3" json:"MarketDepthUpdatesBestBidAndAsk,omitempty"`
	TradingIsSupported                            uint32          `protobuf:"varint,8,opt,name=TradingIsSupported,proto3" json:"TradingIsSupported,omitempty"`
	OCOOrdersSupported                            uint32          `protobuf:"varint,9,opt,name=OCOOrdersSupported,proto3" json:"OCOOrdersSupported,omitempty"`
	OrderCancelReplaceSupported                   uint32          `protobuf:"varint,10,opt,name=OrderCancelReplaceSupported,proto3" json:"OrderCancelReplaceSupported,omitempty"`
	SymbolExchangeDelimiter                       string          `protobuf:"bytes,11,opt,name=SymbolExchangeDelimiter,proto3" json:"SymbolExchangeDelimiter,omitempty"`
	SecurityDefinitionsSupported                  uint32          `protobuf:"varint,12,opt,name=SecurityDefinitionsSupported,proto3" json:"SecurityDefinitionsSupported,omitempty"`
	HistoricalPriceDataSupported                  uint32          `protobuf:"varint,13,opt,name=HistoricalPriceDataSupported,proto3" json:"HistoricalPriceDataSupported,omitempty"`
	ResubscribeWhenMarketDataFeedAvailable        uint32          `protobuf:"varint,14,opt,name=ResubscribeWhenMarketDataFeedAvailable,proto3" json:"ResubscribeWhenMarketDataFeedAvailable,omitempty"`
	MarketDepthIsSupported                        uint32          `protobuf:"varint,15,opt,name=MarketDepthIsSupported,proto3" json:"MarketDepthIsSupported,omitempty"`
	OneHistoricalPriceDataRequestPerConnection    uint32          `protobuf:"varint,16,opt,name=OneHistoricalPriceDataRequestPerConnection,proto3" json:"OneHistoricalPriceDataRequestPerConnection,omitempty"`
	BracketOrdersSupported                        uint32          `protobuf:"varint,17,opt,name=BracketOrdersSupported,proto3" json:"BracketOrdersSupported,omitempty"`
	Unused_1                                      uint32          `protobuf:"varint,18,opt,name=Unused_1,json=Unused1,proto3" json:"Unused_1,omitempty"`
	UsesMultiplePositionsPerSymbolAndTradeAccount uint32          `protobuf:"varint,19,opt,name=UsesMultiplePositionsPerSymbolAndTradeAccount,proto3" json:"UsesMultiplePositionsPerSymbolAndTradeAccount,omitempty"`
	MarketDataSupported                           uint32          `protobuf:"varint,20,opt,name=MarketDataSupported,proto3" json:"MarketDataSupported,omitempty"`
}

func (x *LogonResponse) Reset() {
	*x = LogonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogonResponse) ProtoMessage() {}

func (x *LogonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogonResponse.ProtoReflect.Descriptor instead.
func (*LogonResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{3}
}

func (x *LogonResponse) GetProtocolVersion() int32 {
	if x != nil {
		return x.ProtocolVersion
	}
	return 0
}

func (x *LogonResponse) GetResult() LogonStatusEnum {
	if x != nil {
		return x.Result
	}
	return LogonStatusEnum_LOGON_STATUS_UNSET
}

func (x *LogonResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *LogonResponse) GetReconnectAddress() string {
	if x != nil {
		return x.ReconnectAddress
	}
	return ""
}

func (x *LogonResponse) GetInteger_1() int32 {
	if x != nil {
		return x.Integer_1
	}
	return 0
}

func (x *LogonResponse) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *LogonResponse) GetMarketDepthUpdatesBestBidAndAsk() uint32 {
	if x != nil {
		return x.MarketDepthUpdatesBestBidAndAsk
	}
	return 0
}

func (x *LogonResponse) GetTradingIsSupported() uint32 {
	if x != nil {
		return x.TradingIsSupported
	}
	return 0
}

func (x *LogonResponse) GetOCOOrdersSupported() uint32 {
	if x != nil {
		return x.OCOOrdersSupported
	}
	return 0
}

func (x *LogonResponse) GetOrderCancelReplaceSupported() uint32 {
	if x != nil {
		return x.OrderCancelReplaceSupported
	}
	return 0
}

func (x *LogonResponse) GetSymbolExchangeDelimiter() string {
	if x != nil {
		return x.SymbolExchangeDelimiter
	}
	return ""
}

func (x *LogonResponse) GetSecurityDefinitionsSupported() uint32 {
	if x != nil {
		return x.SecurityDefinitionsSupported
	}
	return 0
}

func (x *LogonResponse) GetHistoricalPriceDataSupported() uint32 {
	if x != nil {
		return x.HistoricalPriceDataSupported
	}
	return 0
}

func (x *LogonResponse) GetResubscribeWhenMarketDataFeedAvailable() uint32 {
	if x != nil {
		return x.ResubscribeWhenMarketDataFeedAvailable
	}
	return 0
}

func (x *LogonResponse) GetMarketDepthIsSupported() uint32 {
	if x != nil {
		return x.MarketDepthIsSupported
	}
	return 0
}

func (x *LogonResponse) GetOneHistoricalPriceDataRequestPerConnection() uint32 {
	if x != nil {
		return x.OneHistoricalPriceDataRequestPerConnection
	}
	return 0
}

func (x *LogonResponse) GetBracketOrdersSupported() uint32 {
	if x != nil {
		return x.BracketOrdersSupported
	}
	return 0
}

func (x *LogonResponse) GetUnused_1() uint32 {
	if x != nil {
		return x.Unused_1
	}
	return 0
}

func (x *LogonResponse) GetUsesMultiplePositionsPerSymbolAndTradeAccount() uint32 {
	if x != nil {
		return x.UsesMultiplePositionsPerSymbolAndTradeAccount
	}
	return 0
}

func (x *LogonResponse) GetMarketDataSupported() uint32 {
	if x != nil {
		return x.MarketDataSupported
	}
	return 0
}

// ============================================================================
type Logoff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason         string `protobuf:"bytes,1,opt,name=Reason,proto3" json:"Reason,omitempty"`
	DoNotReconnect uint32 `protobuf:"varint,2,opt,name=DoNotReconnect,proto3" json:"DoNotReconnect,omitempty"`
}

func (x *Logoff) Reset() {
	*x = Logoff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logoff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logoff) ProtoMessage() {}

func (x *Logoff) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logoff.ProtoReflect.Descriptor instead.
func (*Logoff) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{4}
}

func (x *Logoff) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Logoff) GetDoNotReconnect() uint32 {
	if x != nil {
		return x.DoNotReconnect
	}
	return 0
}

// ============================================================================
type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumDroppedMessages uint32 `protobuf:"varint,1,opt,name=NumDroppedMessages,proto3" json:"NumDroppedMessages,omitempty"`
	CurrentDateTime    int64  `protobuf:"fixed64,2,opt,name=CurrentDateTime,proto3" json:"CurrentDateTime,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{5}
}

func (x *Heartbeat) GetNumDroppedMessages() uint32 {
	if x != nil {
		return x.NumDroppedMessages
	}
	return 0
}

func (x *Heartbeat) GetCurrentDateTime() int64 {
	if x != nil {
		return x.CurrentDateTime
	}
	return 0
}

// ============================================================================
type MarketDataFeedStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status MarketDataFeedStatusEnum `protobuf:"varint,1,opt,name=Status,proto3,enum=DTC_PB.MarketDataFeedStatusEnum" json:"Status,omitempty"`
}

func (x *MarketDataFeedStatus) Reset() {
	*x = MarketDataFeedStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataFeedStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataFeedStatus) ProtoMessage() {}

func (x *MarketDataFeedStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataFeedStatus.ProtoReflect.Descriptor instead.
func (*MarketDataFeedStatus) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{6}
}

func (x *MarketDataFeedStatus) GetStatus() MarketDataFeedStatusEnum {
	if x != nil {
		return x.Status
	}
	return MarketDataFeedStatusEnum_MARKET_DATA_FEED_STATUS_UNSET
}

// ============================================================================
type MarketDataFeedSymbolStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID uint32                   `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Status   MarketDataFeedStatusEnum `protobuf:"varint,2,opt,name=Status,proto3,enum=DTC_PB.MarketDataFeedStatusEnum" json:"Status,omitempty"`
}

func (x *MarketDataFeedSymbolStatus) Reset() {
	*x = MarketDataFeedSymbolStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataFeedSymbolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataFeedSymbolStatus) ProtoMessage() {}

func (x *MarketDataFeedSymbolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataFeedSymbolStatus.ProtoReflect.Descriptor instead.
func (*MarketDataFeedSymbolStatus) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{7}
}

func (x *MarketDataFeedSymbolStatus) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataFeedSymbolStatus) GetStatus() MarketDataFeedStatusEnum {
	if x != nil {
		return x.Status
	}
	return MarketDataFeedStatusEnum_MARKET_DATA_FEED_STATUS_UNSET
}

// ============================================================================
type TradingSymbolStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID uint32            `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Status   TradingStatusEnum `protobuf:"varint,2,opt,name=Status,proto3,enum=DTC_PB.TradingStatusEnum" json:"Status,omitempty"`
}

func (x *TradingSymbolStatus) Reset() {
	*x = TradingSymbolStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingSymbolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingSymbolStatus) ProtoMessage() {}

func (x *TradingSymbolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingSymbolStatus.ProtoReflect.Descriptor instead.
func (*TradingSymbolStatus) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{8}
}

func (x *TradingSymbolStatus) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *TradingSymbolStatus) GetStatus() TradingStatusEnum {
	if x != nil {
		return x.Status
	}
	return TradingStatusEnum_TRADING_STATUS_UNKNOWN
}

// ============================================================================
type MarketDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAction                            RequestActionEnum `protobuf:"varint,1,opt,name=RequestAction,proto3,enum=DTC_PB.RequestActionEnum" json:"RequestAction,omitempty"`
	SymbolID                                 uint32            `protobuf:"varint,2,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Symbol                                   string            `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                                 string            `protobuf:"bytes,4,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	IntervalForSnapshotUpdatesInMilliseconds uint32            `protobuf:"varint,5,opt,name=IntervalForSnapshotUpdatesInMilliseconds,proto3" json:"IntervalForSnapshotUpdatesInMilliseconds,omitempty"`
}

func (x *MarketDataRequest) Reset() {
	*x = MarketDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataRequest) ProtoMessage() {}

func (x *MarketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataRequest.ProtoReflect.Descriptor instead.
func (*MarketDataRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{9}
}

func (x *MarketDataRequest) GetRequestAction() RequestActionEnum {
	if x != nil {
		return x.RequestAction
	}
	return RequestActionEnum_REQUEST_ACTION_UNSET
}

func (x *MarketDataRequest) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketDataRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *MarketDataRequest) GetIntervalForSnapshotUpdatesInMilliseconds() uint32 {
	if x != nil {
		return x.IntervalForSnapshotUpdatesInMilliseconds
	}
	return 0
}

// ============================================================================
type MarketDepthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAction RequestActionEnum `protobuf:"varint,1,opt,name=RequestAction,proto3,enum=DTC_PB.RequestActionEnum" json:"RequestAction,omitempty"`
	SymbolID      uint32            `protobuf:"varint,2,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Symbol        string            `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange      string            `protobuf:"bytes,4,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	NumLevels     int32             `protobuf:"varint,5,opt,name=NumLevels,proto3" json:"NumLevels,omitempty"`
}

func (x *MarketDepthRequest) Reset() {
	*x = MarketDepthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthRequest) ProtoMessage() {}

func (x *MarketDepthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthRequest.ProtoReflect.Descriptor instead.
func (*MarketDepthRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{10}
}

func (x *MarketDepthRequest) GetRequestAction() RequestActionEnum {
	if x != nil {
		return x.RequestAction
	}
	return RequestActionEnum_REQUEST_ACTION_UNSET
}

func (x *MarketDepthRequest) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDepthRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketDepthRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *MarketDepthRequest) GetNumLevels() int32 {
	if x != nil {
		return x.NumLevels
	}
	return 0
}

// ============================================================================
type MarketDataReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID   uint32 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *MarketDataReject) Reset() {
	*x = MarketDataReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataReject) ProtoMessage() {}

func (x *MarketDataReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataReject.ProtoReflect.Descriptor instead.
func (*MarketDataReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{11}
}

func (x *MarketDataReject) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type MarketDataSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID                  uint32            `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	SessionSettlementPrice    float64           `protobuf:"fixed64,2,opt,name=SessionSettlementPrice,proto3" json:"SessionSettlementPrice,omitempty"`
	SessionOpenPrice          float64           `protobuf:"fixed64,3,opt,name=SessionOpenPrice,proto3" json:"SessionOpenPrice,omitempty"`
	SessionHighPrice          float64           `protobuf:"fixed64,4,opt,name=SessionHighPrice,proto3" json:"SessionHighPrice,omitempty"`
	SessionLowPrice           float64           `protobuf:"fixed64,5,opt,name=SessionLowPrice,proto3" json:"SessionLowPrice,omitempty"`
	SessionVolume             float64           `protobuf:"fixed64,6,opt,name=SessionVolume,proto3" json:"SessionVolume,omitempty"`
	SessionNumTrades          uint32            `protobuf:"varint,7,opt,name=SessionNumTrades,proto3" json:"SessionNumTrades,omitempty"`
	OpenInterest              uint32            `protobuf:"varint,8,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	BidPrice                  float64           `protobuf:"fixed64,9,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	AskPrice                  float64           `protobuf:"fixed64,10,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	AskQuantity               float64           `protobuf:"fixed64,11,opt,name=AskQuantity,proto3" json:"AskQuantity,omitempty"`
	BidQuantity               float64           `protobuf:"fixed64,12,opt,name=BidQuantity,proto3" json:"BidQuantity,omitempty"`
	LastTradePrice            float64           `protobuf:"fixed64,13,opt,name=LastTradePrice,proto3" json:"LastTradePrice,omitempty"`
	LastTradeVolume           float64           `protobuf:"fixed64,14,opt,name=LastTradeVolume,proto3" json:"LastTradeVolume,omitempty"`
	LastTradeDateTime         float64           `protobuf:"fixed64,15,opt,name=LastTradeDateTime,proto3" json:"LastTradeDateTime,omitempty"`
	BidAskDateTime            float64           `protobuf:"fixed64,16,opt,name=BidAskDateTime,proto3" json:"BidAskDateTime,omitempty"`
	SessionSettlementDateTime uint32            `protobuf:"varint,17,opt,name=SessionSettlementDateTime,proto3" json:"SessionSettlementDateTime,omitempty"`
	TradingSessionDate        uint32            `protobuf:"varint,18,opt,name=TradingSessionDate,proto3" json:"TradingSessionDate,omitempty"`
	TradingStatus             TradingStatusEnum `protobuf:"varint,19,opt,name=TradingStatus,proto3,enum=DTC_PB.TradingStatusEnum" json:"TradingStatus,omitempty"`
	MarketDepthUpdateDateTime float64           `protobuf:"fixed64,20,opt,name=MarketDepthUpdateDateTime,proto3" json:"MarketDepthUpdateDateTime,omitempty"`
}

func (x *MarketDataSnapshot) Reset() {
	*x = MarketDataSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataSnapshot) ProtoMessage() {}

func (x *MarketDataSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataSnapshot.ProtoReflect.Descriptor instead.
func (*MarketDataSnapshot) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{12}
}

func (x *MarketDataSnapshot) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataSnapshot) GetSessionSettlementPrice() float64 {
	if x != nil {
		return x.SessionSettlementPrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetSessionOpenPrice() float64 {
	if x != nil {
		return x.SessionOpenPrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetSessionHighPrice() float64 {
	if x != nil {
		return x.SessionHighPrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetSessionLowPrice() float64 {
	if x != nil {
		return x.SessionLowPrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetSessionVolume() float64 {
	if x != nil {
		return x.SessionVolume
	}
	return 0
}

func (x *MarketDataSnapshot) GetSessionNumTrades() uint32 {
	if x != nil {
		return x.SessionNumTrades
	}
	return 0
}

func (x *MarketDataSnapshot) GetOpenInterest() uint32 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *MarketDataSnapshot) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetAskQuantity() float64 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *MarketDataSnapshot) GetBidQuantity() float64 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketDataSnapshot) GetLastTradePrice() float64 {
	if x != nil {
		return x.LastTradePrice
	}
	return 0
}

func (x *MarketDataSnapshot) GetLastTradeVolume() float64 {
	if x != nil {
		return x.LastTradeVolume
	}
	return 0
}

func (x *MarketDataSnapshot) GetLastTradeDateTime() float64 {
	if x != nil {
		return x.LastTradeDateTime
	}
	return 0
}

func (x *MarketDataSnapshot) GetBidAskDateTime() float64 {
	if x != nil {
		return x.BidAskDateTime
	}
	return 0
}

func (x *MarketDataSnapshot) GetSessionSettlementDateTime() uint32 {
	if x != nil {
		return x.SessionSettlementDateTime
	}
	return 0
}

func (x *MarketDataSnapshot) GetTradingSessionDate() uint32 {
	if x != nil {
		return x.TradingSessionDate
	}
	return 0
}

func (x *MarketDataSnapshot) GetTradingStatus() TradingStatusEnum {
	if x != nil {
		return x.TradingStatus
	}
	return TradingStatusEnum_TRADING_STATUS_UNKNOWN
}

func (x *MarketDataSnapshot) GetMarketDepthUpdateDateTime() float64 {
	if x != nil {
		return x.MarketDepthUpdateDateTime
	}
	return 0
}

// ============================================================================
type MarketDepthSnapshotLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID              uint32         `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Side                  AtBidOrAskEnum `protobuf:"varint,2,opt,name=Side,proto3,enum=DTC_PB.AtBidOrAskEnum" json:"Side,omitempty"`
	Price                 float64        `protobuf:"fixed64,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity              float64        `protobuf:"fixed64,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Level                 uint32         `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	IsFirstMessageInBatch uint32         `protobuf:"varint,6,opt,name=IsFirstMessageInBatch,proto3" json:"IsFirstMessageInBatch,omitempty"`
	IsLastMessageInBatch  uint32         `protobuf:"varint,7,opt,name=IsLastMessageInBatch,proto3" json:"IsLastMessageInBatch,omitempty"`
	DateTime              float64        `protobuf:"fixed64,8,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	NumOrders             uint32         `protobuf:"varint,9,opt,name=NumOrders,proto3" json:"NumOrders,omitempty"`
}

func (x *MarketDepthSnapshotLevel) Reset() {
	*x = MarketDepthSnapshotLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthSnapshotLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthSnapshotLevel) ProtoMessage() {}

func (x *MarketDepthSnapshotLevel) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthSnapshotLevel.ProtoReflect.Descriptor instead.
func (*MarketDepthSnapshotLevel) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{13}
}

func (x *MarketDepthSnapshotLevel) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDepthSnapshotLevel) GetSide() AtBidOrAskEnum {
	if x != nil {
		return x.Side
	}
	return AtBidOrAskEnum_BID_ASK_UNSET
}

func (x *MarketDepthSnapshotLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDepthSnapshotLevel) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketDepthSnapshotLevel) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MarketDepthSnapshotLevel) GetIsFirstMessageInBatch() uint32 {
	if x != nil {
		return x.IsFirstMessageInBatch
	}
	return 0
}

func (x *MarketDepthSnapshotLevel) GetIsLastMessageInBatch() uint32 {
	if x != nil {
		return x.IsLastMessageInBatch
	}
	return 0
}

func (x *MarketDepthSnapshotLevel) GetDateTime() float64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketDepthSnapshotLevel) GetNumOrders() uint32 {
	if x != nil {
		return x.NumOrders
	}
	return 0
}

// ============================================================================
type MarketDepthSnapshotLevelFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32                 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price              float32                `protobuf:"fixed32,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity           float32                `protobuf:"fixed32,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	NumOrders          uint32                 `protobuf:"varint,4,opt,name=NumOrders,proto3" json:"NumOrders,omitempty"`
	Level              uint32                 `protobuf:"varint,5,opt,name=Level,proto3" json:"Level,omitempty"`
	Side               AtBidOrAskEnum8        `protobuf:"varint,6,opt,name=Side,proto3,enum=DTC_PB.AtBidOrAskEnum8" json:"Side,omitempty"`
	FinalUpdateInBatch FinalUpdateInBatchEnum `protobuf:"varint,7,opt,name=FinalUpdateInBatch,proto3,enum=DTC_PB.FinalUpdateInBatchEnum" json:"FinalUpdateInBatch,omitempty"`
}

func (x *MarketDepthSnapshotLevelFloat) Reset() {
	*x = MarketDepthSnapshotLevelFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthSnapshotLevelFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthSnapshotLevelFloat) ProtoMessage() {}

func (x *MarketDepthSnapshotLevelFloat) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthSnapshotLevelFloat.ProtoReflect.Descriptor instead.
func (*MarketDepthSnapshotLevelFloat) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{14}
}

func (x *MarketDepthSnapshotLevelFloat) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDepthSnapshotLevelFloat) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDepthSnapshotLevelFloat) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketDepthSnapshotLevelFloat) GetNumOrders() uint32 {
	if x != nil {
		return x.NumOrders
	}
	return 0
}

func (x *MarketDepthSnapshotLevelFloat) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MarketDepthSnapshotLevelFloat) GetSide() AtBidOrAskEnum8 {
	if x != nil {
		return x.Side
	}
	return AtBidOrAskEnum8_BID_ASK_UNSET_8
}

func (x *MarketDepthSnapshotLevelFloat) GetFinalUpdateInBatch() FinalUpdateInBatchEnum {
	if x != nil {
		return x.FinalUpdateInBatch
	}
	return FinalUpdateInBatchEnum_FINAL_UPDATE_UNSET
}

// ============================================================================
type MarketDepthUpdateLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32                    `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Side               AtBidOrAskEnum            `protobuf:"varint,2,opt,name=Side,proto3,enum=DTC_PB.AtBidOrAskEnum" json:"Side,omitempty"`
	Price              float64                   `protobuf:"fixed64,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity           float64                   `protobuf:"fixed64,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	UpdateType         MarketDepthUpdateTypeEnum `protobuf:"varint,5,opt,name=UpdateType,proto3,enum=DTC_PB.MarketDepthUpdateTypeEnum" json:"UpdateType,omitempty"`
	DateTime           float64                   `protobuf:"fixed64,6,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	NumOrders          uint32                    `protobuf:"varint,7,opt,name=NumOrders,proto3" json:"NumOrders,omitempty"`
	FinalUpdateInBatch FinalUpdateInBatchEnum    `protobuf:"varint,8,opt,name=FinalUpdateInBatch,proto3,enum=DTC_PB.FinalUpdateInBatchEnum" json:"FinalUpdateInBatch,omitempty"`
	Level              uint32                    `protobuf:"varint,9,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *MarketDepthUpdateLevel) Reset() {
	*x = MarketDepthUpdateLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdateLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdateLevel) ProtoMessage() {}

func (x *MarketDepthUpdateLevel) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdateLevel.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdateLevel) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{15}
}

func (x *MarketDepthUpdateLevel) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDepthUpdateLevel) GetSide() AtBidOrAskEnum {
	if x != nil {
		return x.Side
	}
	return AtBidOrAskEnum_BID_ASK_UNSET
}

func (x *MarketDepthUpdateLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDepthUpdateLevel) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketDepthUpdateLevel) GetUpdateType() MarketDepthUpdateTypeEnum {
	if x != nil {
		return x.UpdateType
	}
	return MarketDepthUpdateTypeEnum_DEPTH_UNSET
}

func (x *MarketDepthUpdateLevel) GetDateTime() float64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketDepthUpdateLevel) GetNumOrders() uint32 {
	if x != nil {
		return x.NumOrders
	}
	return 0
}

func (x *MarketDepthUpdateLevel) GetFinalUpdateInBatch() FinalUpdateInBatchEnum {
	if x != nil {
		return x.FinalUpdateInBatch
	}
	return FinalUpdateInBatchEnum_FINAL_UPDATE_UNSET
}

func (x *MarketDepthUpdateLevel) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// ============================================================================
type MarketDepthUpdateLevelFloatWithMilliseconds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32                 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	DateTime           int64                  `protobuf:"varint,2,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	Price              float32                `protobuf:"fixed32,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity           float32                `protobuf:"fixed32,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Side               int32                  `protobuf:"varint,5,opt,name=Side,proto3" json:"Side,omitempty"`
	UpdateType         int32                  `protobuf:"varint,6,opt,name=UpdateType,proto3" json:"UpdateType,omitempty"`
	NumOrders          uint32                 `protobuf:"varint,7,opt,name=NumOrders,proto3" json:"NumOrders,omitempty"`
	FinalUpdateInBatch FinalUpdateInBatchEnum `protobuf:"varint,8,opt,name=FinalUpdateInBatch,proto3,enum=DTC_PB.FinalUpdateInBatchEnum" json:"FinalUpdateInBatch,omitempty"`
	Level              uint32                 `protobuf:"varint,9,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) Reset() {
	*x = MarketDepthUpdateLevelFloatWithMilliseconds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdateLevelFloatWithMilliseconds) ProtoMessage() {}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdateLevelFloatWithMilliseconds.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdateLevelFloatWithMilliseconds) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{16}
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetUpdateType() int32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetNumOrders() uint32 {
	if x != nil {
		return x.NumOrders
	}
	return 0
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetFinalUpdateInBatch() FinalUpdateInBatchEnum {
	if x != nil {
		return x.FinalUpdateInBatch
	}
	return FinalUpdateInBatchEnum_FINAL_UPDATE_UNSET
}

func (x *MarketDepthUpdateLevelFloatWithMilliseconds) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// ============================================================================
type MarketDepthUpdateLevelNoTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32                 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price              float32                `protobuf:"fixed32,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity           float32                `protobuf:"fixed32,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	NumOrders          uint32                 `protobuf:"varint,4,opt,name=NumOrders,proto3" json:"NumOrders,omitempty"`
	Side               int32                  `protobuf:"varint,5,opt,name=Side,proto3" json:"Side,omitempty"`
	UpdateType         int32                  `protobuf:"varint,6,opt,name=UpdateType,proto3" json:"UpdateType,omitempty"`
	FinalUpdateInBatch FinalUpdateInBatchEnum `protobuf:"varint,7,opt,name=FinalUpdateInBatch,proto3,enum=DTC_PB.FinalUpdateInBatchEnum" json:"FinalUpdateInBatch,omitempty"`
	Level              uint32                 `protobuf:"varint,8,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *MarketDepthUpdateLevelNoTimestamp) Reset() {
	*x = MarketDepthUpdateLevelNoTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthUpdateLevelNoTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthUpdateLevelNoTimestamp) ProtoMessage() {}

func (x *MarketDepthUpdateLevelNoTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthUpdateLevelNoTimestamp.ProtoReflect.Descriptor instead.
func (*MarketDepthUpdateLevelNoTimestamp) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{17}
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetQuantity() float32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetNumOrders() uint32 {
	if x != nil {
		return x.NumOrders
	}
	return 0
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetSide() int32 {
	if x != nil {
		return x.Side
	}
	return 0
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetUpdateType() int32 {
	if x != nil {
		return x.UpdateType
	}
	return 0
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetFinalUpdateInBatch() FinalUpdateInBatchEnum {
	if x != nil {
		return x.FinalUpdateInBatch
	}
	return FinalUpdateInBatchEnum_FINAL_UPDATE_UNSET
}

func (x *MarketDepthUpdateLevelNoTimestamp) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

// ============================================================================
type MarketDataUpdateSessionSettlement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price    float64 `protobuf:"fixed64,2,opt,name=Price,proto3" json:"Price,omitempty"`
	DateTime uint32  `protobuf:"varint,3,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *MarketDataUpdateSessionSettlement) Reset() {
	*x = MarketDataUpdateSessionSettlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateSessionSettlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateSessionSettlement) ProtoMessage() {}

func (x *MarketDataUpdateSessionSettlement) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateSessionSettlement.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateSessionSettlement) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{18}
}

func (x *MarketDataUpdateSessionSettlement) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateSessionSettlement) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateSessionSettlement) GetDateTime() uint32 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ============================================================================
type MarketDataUpdateSessionOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price              float64 `protobuf:"fixed64,2,opt,name=Price,proto3" json:"Price,omitempty"`
	TradingSessionDate uint32  `protobuf:"varint,3,opt,name=TradingSessionDate,proto3" json:"TradingSessionDate,omitempty"`
}

func (x *MarketDataUpdateSessionOpen) Reset() {
	*x = MarketDataUpdateSessionOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateSessionOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateSessionOpen) ProtoMessage() {}

func (x *MarketDataUpdateSessionOpen) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateSessionOpen.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateSessionOpen) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{19}
}

func (x *MarketDataUpdateSessionOpen) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateSessionOpen) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateSessionOpen) GetTradingSessionDate() uint32 {
	if x != nil {
		return x.TradingSessionDate
	}
	return 0
}

// ============================================================================
type MarketDataUpdateSessionNumTrades struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	NumTrades          int32  `protobuf:"varint,2,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	TradingSessionDate uint32 `protobuf:"varint,3,opt,name=TradingSessionDate,proto3" json:"TradingSessionDate,omitempty"`
}

func (x *MarketDataUpdateSessionNumTrades) Reset() {
	*x = MarketDataUpdateSessionNumTrades{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateSessionNumTrades) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateSessionNumTrades) ProtoMessage() {}

func (x *MarketDataUpdateSessionNumTrades) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateSessionNumTrades.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateSessionNumTrades) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{20}
}

func (x *MarketDataUpdateSessionNumTrades) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateSessionNumTrades) GetNumTrades() int32 {
	if x != nil {
		return x.NumTrades
	}
	return 0
}

func (x *MarketDataUpdateSessionNumTrades) GetTradingSessionDate() uint32 {
	if x != nil {
		return x.TradingSessionDate
	}
	return 0
}

// ============================================================================
type MarketDataUpdateTradingSessionDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID uint32 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Date     uint32 `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *MarketDataUpdateTradingSessionDate) Reset() {
	*x = MarketDataUpdateTradingSessionDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateTradingSessionDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateTradingSessionDate) ProtoMessage() {}

func (x *MarketDataUpdateTradingSessionDate) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateTradingSessionDate.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateTradingSessionDate) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{21}
}

func (x *MarketDataUpdateTradingSessionDate) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateTradingSessionDate) GetDate() uint32 {
	if x != nil {
		return x.Date
	}
	return 0
}

// ============================================================================
type MarketDepthReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID   uint32 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *MarketDepthReject) Reset() {
	*x = MarketDepthReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDepthReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDepthReject) ProtoMessage() {}

func (x *MarketDepthReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDepthReject.ProtoReflect.Descriptor instead.
func (*MarketDepthReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{22}
}

func (x *MarketDepthReject) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDepthReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type MarketDataUpdateTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID   uint32         `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	AtBidOrAsk AtBidOrAskEnum `protobuf:"varint,2,opt,name=AtBidOrAsk,proto3,enum=DTC_PB.AtBidOrAskEnum" json:"AtBidOrAsk,omitempty"`
	Price      float64        `protobuf:"fixed64,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume     float64        `protobuf:"fixed64,4,opt,name=Volume,proto3" json:"Volume,omitempty"`
	DateTime   float64        `protobuf:"fixed64,5,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *MarketDataUpdateTrade) Reset() {
	*x = MarketDataUpdateTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateTrade) ProtoMessage() {}

func (x *MarketDataUpdateTrade) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateTrade.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateTrade) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{23}
}

func (x *MarketDataUpdateTrade) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateTrade) GetAtBidOrAsk() AtBidOrAskEnum {
	if x != nil {
		return x.AtBidOrAsk
	}
	return AtBidOrAskEnum_BID_ASK_UNSET
}

func (x *MarketDataUpdateTrade) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateTrade) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataUpdateTrade) GetDateTime() float64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ============================================================================
type MarketDataUpdateTradeCompact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price      float32        `protobuf:"fixed32,1,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume     float32        `protobuf:"fixed32,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	DateTime   int32          `protobuf:"fixed32,3,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	SymbolID   uint32         `protobuf:"varint,4,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	AtBidOrAsk AtBidOrAskEnum `protobuf:"varint,5,opt,name=AtBidOrAsk,proto3,enum=DTC_PB.AtBidOrAskEnum" json:"AtBidOrAsk,omitempty"`
}

func (x *MarketDataUpdateTradeCompact) Reset() {
	*x = MarketDataUpdateTradeCompact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateTradeCompact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateTradeCompact) ProtoMessage() {}

func (x *MarketDataUpdateTradeCompact) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateTradeCompact.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateTradeCompact) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{24}
}

func (x *MarketDataUpdateTradeCompact) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateTradeCompact) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataUpdateTradeCompact) GetDateTime() int32 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketDataUpdateTradeCompact) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateTradeCompact) GetAtBidOrAsk() AtBidOrAskEnum {
	if x != nil {
		return x.AtBidOrAsk
	}
	return AtBidOrAskEnum_BID_ASK_UNSET
}

// ============================================================================
type MarketDataUpdateLastTradeSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID          uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	LastTradePrice    float64 `protobuf:"fixed64,2,opt,name=LastTradePrice,proto3" json:"LastTradePrice,omitempty"`
	LastTradeVolume   float64 `protobuf:"fixed64,3,opt,name=LastTradeVolume,proto3" json:"LastTradeVolume,omitempty"`
	LastTradeDateTime float64 `protobuf:"fixed64,4,opt,name=LastTradeDateTime,proto3" json:"LastTradeDateTime,omitempty"`
}

func (x *MarketDataUpdateLastTradeSnapshot) Reset() {
	*x = MarketDataUpdateLastTradeSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateLastTradeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateLastTradeSnapshot) ProtoMessage() {}

func (x *MarketDataUpdateLastTradeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateLastTradeSnapshot.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateLastTradeSnapshot) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{25}
}

func (x *MarketDataUpdateLastTradeSnapshot) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateLastTradeSnapshot) GetLastTradePrice() float64 {
	if x != nil {
		return x.LastTradePrice
	}
	return 0
}

func (x *MarketDataUpdateLastTradeSnapshot) GetLastTradeVolume() float64 {
	if x != nil {
		return x.LastTradeVolume
	}
	return 0
}

func (x *MarketDataUpdateLastTradeSnapshot) GetLastTradeDateTime() float64 {
	if x != nil {
		return x.LastTradeDateTime
	}
	return 0
}

// ============================================================================
type MarketDataUpdateTradeWithUnbundledIndicator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID                uint32                      `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	AtBidOrAsk              AtBidOrAskEnum8             `protobuf:"varint,2,opt,name=AtBidOrAsk,proto3,enum=DTC_PB.AtBidOrAskEnum8" json:"AtBidOrAsk,omitempty"`
	UnbundledTradeIndicator UnbundledTradeIndicatorEnum `protobuf:"varint,3,opt,name=UnbundledTradeIndicator,proto3,enum=DTC_PB.UnbundledTradeIndicatorEnum" json:"UnbundledTradeIndicator,omitempty"`
	Price                   float64                     `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume                  uint32                      `protobuf:"varint,5,opt,name=Volume,proto3" json:"Volume,omitempty"`
	DateTime                float64                     `protobuf:"fixed64,6,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	TradeCondition          TradeConditionEnum          `protobuf:"varint,7,opt,name=TradeCondition,proto3,enum=DTC_PB.TradeConditionEnum" json:"TradeCondition,omitempty"`
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) Reset() {
	*x = MarketDataUpdateTradeWithUnbundledIndicator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateTradeWithUnbundledIndicator) ProtoMessage() {}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateTradeWithUnbundledIndicator.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateTradeWithUnbundledIndicator) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{26}
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) GetAtBidOrAsk() AtBidOrAskEnum8 {
	if x != nil {
		return x.AtBidOrAsk
	}
	return AtBidOrAskEnum8_BID_ASK_UNSET_8
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) GetUnbundledTradeIndicator() UnbundledTradeIndicatorEnum {
	if x != nil {
		return x.UnbundledTradeIndicator
	}
	return UnbundledTradeIndicatorEnum_UNBUNDLED_TRADE_NONE
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) GetDateTime() float64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator) GetTradeCondition() TradeConditionEnum {
	if x != nil {
		return x.TradeCondition
	}
	return TradeConditionEnum_TRADE_CONDITION_NONE
}

// ============================================================================
type MarketDataUpdateTradeWithUnbundledIndicator2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID                uint32                      `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price                   float32                     `protobuf:"fixed32,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume                  uint32                      `protobuf:"varint,3,opt,name=Volume,proto3" json:"Volume,omitempty"`
	DateTime                int64                       `protobuf:"fixed64,4,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	AtBidOrAsk              AtBidOrAskEnum8             `protobuf:"varint,5,opt,name=AtBidOrAsk,proto3,enum=DTC_PB.AtBidOrAskEnum8" json:"AtBidOrAsk,omitempty"`
	UnbundledTradeIndicator UnbundledTradeIndicatorEnum `protobuf:"varint,6,opt,name=UnbundledTradeIndicator,proto3,enum=DTC_PB.UnbundledTradeIndicatorEnum" json:"UnbundledTradeIndicator,omitempty"`
	TradeCondition          TradeConditionEnum          `protobuf:"varint,7,opt,name=TradeCondition,proto3,enum=DTC_PB.TradeConditionEnum" json:"TradeCondition,omitempty"`
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) Reset() {
	*x = MarketDataUpdateTradeWithUnbundledIndicator2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateTradeWithUnbundledIndicator2) ProtoMessage() {}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateTradeWithUnbundledIndicator2.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateTradeWithUnbundledIndicator2) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{27}
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) GetAtBidOrAsk() AtBidOrAskEnum8 {
	if x != nil {
		return x.AtBidOrAsk
	}
	return AtBidOrAskEnum8_BID_ASK_UNSET_8
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) GetUnbundledTradeIndicator() UnbundledTradeIndicatorEnum {
	if x != nil {
		return x.UnbundledTradeIndicator
	}
	return UnbundledTradeIndicatorEnum_UNBUNDLED_TRADE_NONE
}

func (x *MarketDataUpdateTradeWithUnbundledIndicator2) GetTradeCondition() TradeConditionEnum {
	if x != nil {
		return x.TradeCondition
	}
	return TradeConditionEnum_TRADE_CONDITION_NONE
}

// ============================================================================
type MarketDataUpdateTradeNoTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID                uint32                      `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price                   float32                     `protobuf:"fixed32,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume                  uint32                      `protobuf:"varint,3,opt,name=Volume,proto3" json:"Volume,omitempty"`
	AtBidOrAsk              AtBidOrAskEnum8             `protobuf:"varint,4,opt,name=AtBidOrAsk,proto3,enum=DTC_PB.AtBidOrAskEnum8" json:"AtBidOrAsk,omitempty"`
	UnbundledTradeIndicator UnbundledTradeIndicatorEnum `protobuf:"varint,5,opt,name=UnbundledTradeIndicator,proto3,enum=DTC_PB.UnbundledTradeIndicatorEnum" json:"UnbundledTradeIndicator,omitempty"`
	TradeCondition          TradeConditionEnum          `protobuf:"varint,6,opt,name=TradeCondition,proto3,enum=DTC_PB.TradeConditionEnum" json:"TradeCondition,omitempty"`
}

func (x *MarketDataUpdateTradeNoTimestamp) Reset() {
	*x = MarketDataUpdateTradeNoTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateTradeNoTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateTradeNoTimestamp) ProtoMessage() {}

func (x *MarketDataUpdateTradeNoTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateTradeNoTimestamp.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateTradeNoTimestamp) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{28}
}

func (x *MarketDataUpdateTradeNoTimestamp) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateTradeNoTimestamp) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateTradeNoTimestamp) GetVolume() uint32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataUpdateTradeNoTimestamp) GetAtBidOrAsk() AtBidOrAskEnum8 {
	if x != nil {
		return x.AtBidOrAsk
	}
	return AtBidOrAskEnum8_BID_ASK_UNSET_8
}

func (x *MarketDataUpdateTradeNoTimestamp) GetUnbundledTradeIndicator() UnbundledTradeIndicatorEnum {
	if x != nil {
		return x.UnbundledTradeIndicator
	}
	return UnbundledTradeIndicatorEnum_UNBUNDLED_TRADE_NONE
}

func (x *MarketDataUpdateTradeNoTimestamp) GetTradeCondition() TradeConditionEnum {
	if x != nil {
		return x.TradeCondition
	}
	return TradeConditionEnum_TRADE_CONDITION_NONE
}

// ============================================================================
type MarketDataUpdateBidAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID    uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	BidPrice    float64 `protobuf:"fixed64,2,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	BidQuantity float32 `protobuf:"fixed32,3,opt,name=BidQuantity,proto3" json:"BidQuantity,omitempty"`
	AskPrice    float64 `protobuf:"fixed64,4,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	AskQuantity float32 `protobuf:"fixed32,5,opt,name=AskQuantity,proto3" json:"AskQuantity,omitempty"`
	DateTime    int32   `protobuf:"fixed32,6,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *MarketDataUpdateBidAsk) Reset() {
	*x = MarketDataUpdateBidAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateBidAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateBidAsk) ProtoMessage() {}

func (x *MarketDataUpdateBidAsk) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateBidAsk.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateBidAsk) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{29}
}

func (x *MarketDataUpdateBidAsk) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateBidAsk) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAsk) GetBidQuantity() float32 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAsk) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAsk) GetAskQuantity() float32 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAsk) GetDateTime() int32 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ============================================================================
type MarketDataUpdateBidAsk2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID    uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	BidPrice    float32 `protobuf:"fixed32,2,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	BidQuantity float32 `protobuf:"fixed32,3,opt,name=BidQuantity,proto3" json:"BidQuantity,omitempty"`
	AskPrice    float32 `protobuf:"fixed32,4,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	AskQuantity float32 `protobuf:"fixed32,5,opt,name=AskQuantity,proto3" json:"AskQuantity,omitempty"`
	DateTime    int64   `protobuf:"varint,6,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *MarketDataUpdateBidAsk2) Reset() {
	*x = MarketDataUpdateBidAsk2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateBidAsk2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateBidAsk2) ProtoMessage() {}

func (x *MarketDataUpdateBidAsk2) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateBidAsk2.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateBidAsk2) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{30}
}

func (x *MarketDataUpdateBidAsk2) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateBidAsk2) GetBidPrice() float32 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAsk2) GetBidQuantity() float32 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAsk2) GetAskPrice() float32 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAsk2) GetAskQuantity() float32 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAsk2) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ============================================================================
type MarketDataUpdateBidAskCompact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BidPrice    float32 `protobuf:"fixed32,1,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	BidQuantity float32 `protobuf:"fixed32,2,opt,name=BidQuantity,proto3" json:"BidQuantity,omitempty"`
	AskPrice    float32 `protobuf:"fixed32,3,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	AskQuantity float32 `protobuf:"fixed32,4,opt,name=AskQuantity,proto3" json:"AskQuantity,omitempty"`
	DateTime    int32   `protobuf:"fixed32,5,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	SymbolID    uint32  `protobuf:"varint,6,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
}

func (x *MarketDataUpdateBidAskCompact) Reset() {
	*x = MarketDataUpdateBidAskCompact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateBidAskCompact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateBidAskCompact) ProtoMessage() {}

func (x *MarketDataUpdateBidAskCompact) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateBidAskCompact.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateBidAskCompact) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{31}
}

func (x *MarketDataUpdateBidAskCompact) GetBidPrice() float32 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAskCompact) GetBidQuantity() float32 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAskCompact) GetAskPrice() float32 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAskCompact) GetAskQuantity() float32 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAskCompact) GetDateTime() int32 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketDataUpdateBidAskCompact) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

// ============================================================================
type MarketDataUpdateBidAskNoTimeStamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID    uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	BidPrice    float32 `protobuf:"fixed32,2,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	BidQuantity uint32  `protobuf:"varint,3,opt,name=BidQuantity,proto3" json:"BidQuantity,omitempty"`
	AskPrice    float32 `protobuf:"fixed32,4,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	AskQuantity uint32  `protobuf:"varint,5,opt,name=AskQuantity,proto3" json:"AskQuantity,omitempty"`
}

func (x *MarketDataUpdateBidAskNoTimeStamp) Reset() {
	*x = MarketDataUpdateBidAskNoTimeStamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateBidAskNoTimeStamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateBidAskNoTimeStamp) ProtoMessage() {}

func (x *MarketDataUpdateBidAskNoTimeStamp) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateBidAskNoTimeStamp.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateBidAskNoTimeStamp) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{32}
}

func (x *MarketDataUpdateBidAskNoTimeStamp) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateBidAskNoTimeStamp) GetBidPrice() float32 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAskNoTimeStamp) GetBidQuantity() uint32 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAskNoTimeStamp) GetAskPrice() float32 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAskNoTimeStamp) GetAskQuantity() uint32 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

// ============================================================================
type MarketDataUpdateBidAskFloatWithMicroseconds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID    uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	BidPrice    float32 `protobuf:"fixed32,2,opt,name=BidPrice,proto3" json:"BidPrice,omitempty"`
	BidQuantity float32 `protobuf:"fixed32,3,opt,name=BidQuantity,proto3" json:"BidQuantity,omitempty"`
	AskPrice    float32 `protobuf:"fixed32,4,opt,name=AskPrice,proto3" json:"AskPrice,omitempty"`
	AskQuantity float32 `protobuf:"fixed32,5,opt,name=AskQuantity,proto3" json:"AskQuantity,omitempty"`
	DateTime    uint64  `protobuf:"varint,6,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) Reset() {
	*x = MarketDataUpdateBidAskFloatWithMicroseconds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateBidAskFloatWithMicroseconds) ProtoMessage() {}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateBidAskFloatWithMicroseconds.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateBidAskFloatWithMicroseconds) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{33}
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) GetBidPrice() float32 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) GetBidQuantity() float32 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) GetAskPrice() float32 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) GetAskQuantity() float32 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *MarketDataUpdateBidAskFloatWithMicroseconds) GetDateTime() uint64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ============================================================================
type MarketDataUpdateSessionVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID             uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Volume               float64 `protobuf:"fixed64,2,opt,name=Volume,proto3" json:"Volume,omitempty"`
	TradingSessionDate   uint32  `protobuf:"varint,3,opt,name=TradingSessionDate,proto3" json:"TradingSessionDate,omitempty"`
	IsFinalSessionVolume uint32  `protobuf:"varint,4,opt,name=IsFinalSessionVolume,proto3" json:"IsFinalSessionVolume,omitempty"`
}

func (x *MarketDataUpdateSessionVolume) Reset() {
	*x = MarketDataUpdateSessionVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateSessionVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateSessionVolume) ProtoMessage() {}

func (x *MarketDataUpdateSessionVolume) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateSessionVolume.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateSessionVolume) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{34}
}

func (x *MarketDataUpdateSessionVolume) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateSessionVolume) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketDataUpdateSessionVolume) GetTradingSessionDate() uint32 {
	if x != nil {
		return x.TradingSessionDate
	}
	return 0
}

func (x *MarketDataUpdateSessionVolume) GetIsFinalSessionVolume() uint32 {
	if x != nil {
		return x.IsFinalSessionVolume
	}
	return 0
}

// ============================================================================
type MarketDataUpdateOpenInterest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	OpenInterest       uint32 `protobuf:"varint,2,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	TradingSessionDate uint32 `protobuf:"varint,3,opt,name=TradingSessionDate,proto3" json:"TradingSessionDate,omitempty"`
}

func (x *MarketDataUpdateOpenInterest) Reset() {
	*x = MarketDataUpdateOpenInterest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateOpenInterest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateOpenInterest) ProtoMessage() {}

func (x *MarketDataUpdateOpenInterest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateOpenInterest.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateOpenInterest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{35}
}

func (x *MarketDataUpdateOpenInterest) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateOpenInterest) GetOpenInterest() uint32 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *MarketDataUpdateOpenInterest) GetTradingSessionDate() uint32 {
	if x != nil {
		return x.TradingSessionDate
	}
	return 0
}

// ============================================================================
type MarketDataUpdateSessionHigh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price              float64 `protobuf:"fixed64,2,opt,name=Price,proto3" json:"Price,omitempty"`
	TradingSessionDate uint32  `protobuf:"varint,3,opt,name=TradingSessionDate,proto3" json:"TradingSessionDate,omitempty"`
}

func (x *MarketDataUpdateSessionHigh) Reset() {
	*x = MarketDataUpdateSessionHigh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateSessionHigh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateSessionHigh) ProtoMessage() {}

func (x *MarketDataUpdateSessionHigh) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateSessionHigh.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateSessionHigh) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{36}
}

func (x *MarketDataUpdateSessionHigh) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateSessionHigh) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateSessionHigh) GetTradingSessionDate() uint32 {
	if x != nil {
		return x.TradingSessionDate
	}
	return 0
}

// ============================================================================
type MarketDataUpdateSessionLow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID           uint32  `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price              float64 `protobuf:"fixed64,2,opt,name=Price,proto3" json:"Price,omitempty"`
	TradingSessionDate uint32  `protobuf:"varint,3,opt,name=TradingSessionDate,proto3" json:"TradingSessionDate,omitempty"`
}

func (x *MarketDataUpdateSessionLow) Reset() {
	*x = MarketDataUpdateSessionLow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketDataUpdateSessionLow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataUpdateSessionLow) ProtoMessage() {}

func (x *MarketDataUpdateSessionLow) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataUpdateSessionLow.ProtoReflect.Descriptor instead.
func (*MarketDataUpdateSessionLow) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{37}
}

func (x *MarketDataUpdateSessionLow) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketDataUpdateSessionLow) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketDataUpdateSessionLow) GetTradingSessionDate() uint32 {
	if x != nil {
		return x.TradingSessionDate
	}
	return 0
}

// ============================================================================
type MarketOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestAction                  RequestActionEnum `protobuf:"varint,1,opt,name=RequestAction,proto3,enum=DTC_PB.RequestActionEnum" json:"RequestAction,omitempty"`
	SymbolID                       uint32            `protobuf:"varint,2,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Symbol                         string            `protobuf:"bytes,3,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                       string            `protobuf:"bytes,4,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	SendQuantitiesGreaterOrEqualTo int32             `protobuf:"varint,5,opt,name=SendQuantitiesGreaterOrEqualTo,proto3" json:"SendQuantitiesGreaterOrEqualTo,omitempty"`
}

func (x *MarketOrdersRequest) Reset() {
	*x = MarketOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketOrdersRequest) ProtoMessage() {}

func (x *MarketOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketOrdersRequest.ProtoReflect.Descriptor instead.
func (*MarketOrdersRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{38}
}

func (x *MarketOrdersRequest) GetRequestAction() RequestActionEnum {
	if x != nil {
		return x.RequestAction
	}
	return RequestActionEnum_REQUEST_ACTION_UNSET
}

func (x *MarketOrdersRequest) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketOrdersRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketOrdersRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *MarketOrdersRequest) GetSendQuantitiesGreaterOrEqualTo() int32 {
	if x != nil {
		return x.SendQuantitiesGreaterOrEqualTo
	}
	return 0
}

// ============================================================================
type MarketOrdersReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID   uint32 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *MarketOrdersReject) Reset() {
	*x = MarketOrdersReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketOrdersReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketOrdersReject) ProtoMessage() {}

func (x *MarketOrdersReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketOrdersReject.ProtoReflect.Descriptor instead.
func (*MarketOrdersReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{39}
}

func (x *MarketOrdersReject) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketOrdersReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type MarketOrdersAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID uint32      `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Side     BuySellEnum `protobuf:"varint,2,opt,name=Side,proto3,enum=DTC_PB.BuySellEnum" json:"Side,omitempty"`
	Price    float64     `protobuf:"fixed64,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity uint32      `protobuf:"varint,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	OrderID  uint64      `protobuf:"varint,5,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	DateTime uint64      `protobuf:"varint,6,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *MarketOrdersAdd) Reset() {
	*x = MarketOrdersAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketOrdersAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketOrdersAdd) ProtoMessage() {}

func (x *MarketOrdersAdd) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketOrdersAdd.ProtoReflect.Descriptor instead.
func (*MarketOrdersAdd) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{40}
}

func (x *MarketOrdersAdd) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketOrdersAdd) GetSide() BuySellEnum {
	if x != nil {
		return x.Side
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *MarketOrdersAdd) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketOrdersAdd) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketOrdersAdd) GetOrderID() uint64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *MarketOrdersAdd) GetDateTime() uint64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ============================================================================
type MarketOrdersModify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID      uint32      `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Side          BuySellEnum `protobuf:"varint,2,opt,name=Side,proto3,enum=DTC_PB.BuySellEnum" json:"Side,omitempty"`
	Price         float64     `protobuf:"fixed64,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity      uint32      `protobuf:"varint,4,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	OrderID       uint64      `protobuf:"varint,5,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	PriorPrice    float64     `protobuf:"fixed64,6,opt,name=PriorPrice,proto3" json:"PriorPrice,omitempty"`
	PriorQuantity uint32      `protobuf:"varint,7,opt,name=PriorQuantity,proto3" json:"PriorQuantity,omitempty"`
	PriorOrderID  uint64      `protobuf:"varint,8,opt,name=PriorOrderID,proto3" json:"PriorOrderID,omitempty"`
	DateTime      uint64      `protobuf:"varint,9,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *MarketOrdersModify) Reset() {
	*x = MarketOrdersModify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketOrdersModify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketOrdersModify) ProtoMessage() {}

func (x *MarketOrdersModify) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketOrdersModify.ProtoReflect.Descriptor instead.
func (*MarketOrdersModify) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{41}
}

func (x *MarketOrdersModify) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketOrdersModify) GetSide() BuySellEnum {
	if x != nil {
		return x.Side
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *MarketOrdersModify) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketOrdersModify) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketOrdersModify) GetOrderID() uint64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *MarketOrdersModify) GetPriorPrice() float64 {
	if x != nil {
		return x.PriorPrice
	}
	return 0
}

func (x *MarketOrdersModify) GetPriorQuantity() uint32 {
	if x != nil {
		return x.PriorQuantity
	}
	return 0
}

func (x *MarketOrdersModify) GetPriorOrderID() uint64 {
	if x != nil {
		return x.PriorOrderID
	}
	return 0
}

func (x *MarketOrdersModify) GetDateTime() uint64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ============================================================================
type MarketOrdersRemove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID uint32      `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	Price    float64     `protobuf:"fixed64,2,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity uint32      `protobuf:"varint,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	OrderID  uint64      `protobuf:"varint,4,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	DateTime uint64      `protobuf:"varint,5,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	Side     BuySellEnum `protobuf:"varint,6,opt,name=Side,proto3,enum=DTC_PB.BuySellEnum" json:"Side,omitempty"`
}

func (x *MarketOrdersRemove) Reset() {
	*x = MarketOrdersRemove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketOrdersRemove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketOrdersRemove) ProtoMessage() {}

func (x *MarketOrdersRemove) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketOrdersRemove.ProtoReflect.Descriptor instead.
func (*MarketOrdersRemove) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{42}
}

func (x *MarketOrdersRemove) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketOrdersRemove) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketOrdersRemove) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *MarketOrdersRemove) GetOrderID() uint64 {
	if x != nil {
		return x.OrderID
	}
	return 0
}

func (x *MarketOrdersRemove) GetDateTime() uint64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *MarketOrdersRemove) GetSide() BuySellEnum {
	if x != nil {
		return x.Side
	}
	return BuySellEnum_BUY_SELL_UNSET
}

// ============================================================================
type MarketOrdersSnapshotMessageBoundary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolID        uint32                 `protobuf:"varint,1,opt,name=SymbolID,proto3" json:"SymbolID,omitempty"`
	MessageBoundary MessageSetBoundaryEnum `protobuf:"varint,2,opt,name=MessageBoundary,proto3,enum=DTC_PB.MessageSetBoundaryEnum" json:"MessageBoundary,omitempty"`
}

func (x *MarketOrdersSnapshotMessageBoundary) Reset() {
	*x = MarketOrdersSnapshotMessageBoundary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketOrdersSnapshotMessageBoundary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketOrdersSnapshotMessageBoundary) ProtoMessage() {}

func (x *MarketOrdersSnapshotMessageBoundary) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketOrdersSnapshotMessageBoundary.ProtoReflect.Descriptor instead.
func (*MarketOrdersSnapshotMessageBoundary) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{43}
}

func (x *MarketOrdersSnapshotMessageBoundary) GetSymbolID() uint32 {
	if x != nil {
		return x.SymbolID
	}
	return 0
}

func (x *MarketOrdersSnapshotMessageBoundary) GetMessageBoundary() MessageSetBoundaryEnum {
	if x != nil {
		return x.MessageBoundary
	}
	return MessageSetBoundaryEnum_MESSAGE_SET_BOUNDARY_UNSET
}

// ============================================================================
type SubmitNewSingleOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol                   string             `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                 string             `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	TradeAccount             string             `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	ClientOrderID            string             `protobuf:"bytes,4,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	OrderType                OrderTypeEnum      `protobuf:"varint,5,opt,name=OrderType,proto3,enum=DTC_PB.OrderTypeEnum" json:"OrderType,omitempty"`
	BuySell                  BuySellEnum        `protobuf:"varint,6,opt,name=BuySell,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell,omitempty"`
	Price1                   float64            `protobuf:"fixed64,7,opt,name=Price1,proto3" json:"Price1,omitempty"`
	Price2                   float64            `protobuf:"fixed64,8,opt,name=Price2,proto3" json:"Price2,omitempty"`
	Quantity                 float64            `protobuf:"fixed64,9,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	TimeInForce              TimeInForceEnum    `protobuf:"varint,10,opt,name=TimeInForce,proto3,enum=DTC_PB.TimeInForceEnum" json:"TimeInForce,omitempty"`
	GoodTillDateTime         int64              `protobuf:"fixed64,11,opt,name=GoodTillDateTime,proto3" json:"GoodTillDateTime,omitempty"`
	IsAutomatedOrder         uint32             `protobuf:"varint,12,opt,name=IsAutomatedOrder,proto3" json:"IsAutomatedOrder,omitempty"`
	IsParentOrder            uint32             `protobuf:"varint,13,opt,name=IsParentOrder,proto3" json:"IsParentOrder,omitempty"`
	FreeFormText             string             `protobuf:"bytes,14,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
	OpenOrClose              OpenCloseTradeEnum `protobuf:"varint,15,opt,name=OpenOrClose,proto3,enum=DTC_PB.OpenCloseTradeEnum" json:"OpenOrClose,omitempty"`
	MaxShowQuantity          float64            `protobuf:"fixed64,16,opt,name=MaxShowQuantity,proto3" json:"MaxShowQuantity,omitempty"`
	Price1AsString           string             `protobuf:"bytes,17,opt,name=Price1AsString,proto3" json:"Price1AsString,omitempty"`
	Price2AsString           string             `protobuf:"bytes,18,opt,name=Price2AsString,proto3" json:"Price2AsString,omitempty"`
	IntendedPositionQuantity float64            `protobuf:"fixed64,19,opt,name=IntendedPositionQuantity,proto3" json:"IntendedPositionQuantity,omitempty"`
}

func (x *SubmitNewSingleOrder) Reset() {
	*x = SubmitNewSingleOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitNewSingleOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitNewSingleOrder) ProtoMessage() {}

func (x *SubmitNewSingleOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitNewSingleOrder.ProtoReflect.Descriptor instead.
func (*SubmitNewSingleOrder) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{44}
}

func (x *SubmitNewSingleOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubmitNewSingleOrder) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SubmitNewSingleOrder) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *SubmitNewSingleOrder) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *SubmitNewSingleOrder) GetOrderType() OrderTypeEnum {
	if x != nil {
		return x.OrderType
	}
	return OrderTypeEnum_ORDER_TYPE_UNSET
}

func (x *SubmitNewSingleOrder) GetBuySell() BuySellEnum {
	if x != nil {
		return x.BuySell
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *SubmitNewSingleOrder) GetPrice1() float64 {
	if x != nil {
		return x.Price1
	}
	return 0
}

func (x *SubmitNewSingleOrder) GetPrice2() float64 {
	if x != nil {
		return x.Price2
	}
	return 0
}

func (x *SubmitNewSingleOrder) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SubmitNewSingleOrder) GetTimeInForce() TimeInForceEnum {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceEnum_TIF_UNSET
}

func (x *SubmitNewSingleOrder) GetGoodTillDateTime() int64 {
	if x != nil {
		return x.GoodTillDateTime
	}
	return 0
}

func (x *SubmitNewSingleOrder) GetIsAutomatedOrder() uint32 {
	if x != nil {
		return x.IsAutomatedOrder
	}
	return 0
}

func (x *SubmitNewSingleOrder) GetIsParentOrder() uint32 {
	if x != nil {
		return x.IsParentOrder
	}
	return 0
}

func (x *SubmitNewSingleOrder) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

func (x *SubmitNewSingleOrder) GetOpenOrClose() OpenCloseTradeEnum {
	if x != nil {
		return x.OpenOrClose
	}
	return OpenCloseTradeEnum_TRADE_UNSET
}

func (x *SubmitNewSingleOrder) GetMaxShowQuantity() float64 {
	if x != nil {
		return x.MaxShowQuantity
	}
	return 0
}

func (x *SubmitNewSingleOrder) GetPrice1AsString() string {
	if x != nil {
		return x.Price1AsString
	}
	return ""
}

func (x *SubmitNewSingleOrder) GetPrice2AsString() string {
	if x != nil {
		return x.Price2AsString
	}
	return ""
}

func (x *SubmitNewSingleOrder) GetIntendedPositionQuantity() float64 {
	if x != nil {
		return x.IntendedPositionQuantity
	}
	return 0
}

// ============================================================================
type SubmitNewSingleOrderInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string             `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange         string             `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	TradeAccount     string             `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	ClientOrderID    string             `protobuf:"bytes,4,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	OrderType        OrderTypeEnum      `protobuf:"varint,5,opt,name=OrderType,proto3,enum=DTC_PB.OrderTypeEnum" json:"OrderType,omitempty"`
	BuySell          BuySellEnum        `protobuf:"varint,6,opt,name=BuySell,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell,omitempty"`
	Price1           int64              `protobuf:"varint,7,opt,name=Price1,proto3" json:"Price1,omitempty"`
	Price2           int64              `protobuf:"varint,8,opt,name=Price2,proto3" json:"Price2,omitempty"`
	Divisor          float32            `protobuf:"fixed32,9,opt,name=Divisor,proto3" json:"Divisor,omitempty"`
	Quantity         int64              `protobuf:"varint,10,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	TimeInForce      TimeInForceEnum    `protobuf:"varint,11,opt,name=TimeInForce,proto3,enum=DTC_PB.TimeInForceEnum" json:"TimeInForce,omitempty"`
	GoodTillDateTime int64              `protobuf:"fixed64,12,opt,name=GoodTillDateTime,proto3" json:"GoodTillDateTime,omitempty"`
	IsAutomatedOrder uint32             `protobuf:"varint,13,opt,name=IsAutomatedOrder,proto3" json:"IsAutomatedOrder,omitempty"`
	IsParentOrder    uint32             `protobuf:"varint,14,opt,name=IsParentOrder,proto3" json:"IsParentOrder,omitempty"`
	FreeFormText     string             `protobuf:"bytes,15,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
	OpenOrClose      OpenCloseTradeEnum `protobuf:"varint,16,opt,name=OpenOrClose,proto3,enum=DTC_PB.OpenCloseTradeEnum" json:"OpenOrClose,omitempty"`
}

func (x *SubmitNewSingleOrderInt) Reset() {
	*x = SubmitNewSingleOrderInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitNewSingleOrderInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitNewSingleOrderInt) ProtoMessage() {}

func (x *SubmitNewSingleOrderInt) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitNewSingleOrderInt.ProtoReflect.Descriptor instead.
func (*SubmitNewSingleOrderInt) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{45}
}

func (x *SubmitNewSingleOrderInt) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubmitNewSingleOrderInt) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SubmitNewSingleOrderInt) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *SubmitNewSingleOrderInt) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *SubmitNewSingleOrderInt) GetOrderType() OrderTypeEnum {
	if x != nil {
		return x.OrderType
	}
	return OrderTypeEnum_ORDER_TYPE_UNSET
}

func (x *SubmitNewSingleOrderInt) GetBuySell() BuySellEnum {
	if x != nil {
		return x.BuySell
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *SubmitNewSingleOrderInt) GetPrice1() int64 {
	if x != nil {
		return x.Price1
	}
	return 0
}

func (x *SubmitNewSingleOrderInt) GetPrice2() int64 {
	if x != nil {
		return x.Price2
	}
	return 0
}

func (x *SubmitNewSingleOrderInt) GetDivisor() float32 {
	if x != nil {
		return x.Divisor
	}
	return 0
}

func (x *SubmitNewSingleOrderInt) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SubmitNewSingleOrderInt) GetTimeInForce() TimeInForceEnum {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceEnum_TIF_UNSET
}

func (x *SubmitNewSingleOrderInt) GetGoodTillDateTime() int64 {
	if x != nil {
		return x.GoodTillDateTime
	}
	return 0
}

func (x *SubmitNewSingleOrderInt) GetIsAutomatedOrder() uint32 {
	if x != nil {
		return x.IsAutomatedOrder
	}
	return 0
}

func (x *SubmitNewSingleOrderInt) GetIsParentOrder() uint32 {
	if x != nil {
		return x.IsParentOrder
	}
	return 0
}

func (x *SubmitNewSingleOrderInt) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

func (x *SubmitNewSingleOrderInt) GetOpenOrClose() OpenCloseTradeEnum {
	if x != nil {
		return x.OpenOrClose
	}
	return OpenCloseTradeEnum_TRADE_UNSET
}

// ============================================================================
type SubmitFlattenPositionOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange         string `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	TradeAccount     string `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	ClientOrderID    string `protobuf:"bytes,4,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	FreeFormText     string `protobuf:"bytes,5,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
	IsAutomatedOrder uint32 `protobuf:"varint,6,opt,name=IsAutomatedOrder,proto3" json:"IsAutomatedOrder,omitempty"`
}

func (x *SubmitFlattenPositionOrder) Reset() {
	*x = SubmitFlattenPositionOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitFlattenPositionOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitFlattenPositionOrder) ProtoMessage() {}

func (x *SubmitFlattenPositionOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitFlattenPositionOrder.ProtoReflect.Descriptor instead.
func (*SubmitFlattenPositionOrder) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{46}
}

func (x *SubmitFlattenPositionOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubmitFlattenPositionOrder) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SubmitFlattenPositionOrder) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *SubmitFlattenPositionOrder) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *SubmitFlattenPositionOrder) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

func (x *SubmitFlattenPositionOrder) GetIsAutomatedOrder() uint32 {
	if x != nil {
		return x.IsAutomatedOrder
	}
	return 0
}

// ============================================================================
type FlattenPositionsForTradeAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeAccount     string `protobuf:"bytes,1,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	ClientOrderID    string `protobuf:"bytes,2,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	FreeFormText     string `protobuf:"bytes,3,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
	IsAutomatedOrder uint32 `protobuf:"varint,4,opt,name=IsAutomatedOrder,proto3" json:"IsAutomatedOrder,omitempty"`
}

func (x *FlattenPositionsForTradeAccount) Reset() {
	*x = FlattenPositionsForTradeAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlattenPositionsForTradeAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlattenPositionsForTradeAccount) ProtoMessage() {}

func (x *FlattenPositionsForTradeAccount) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlattenPositionsForTradeAccount.ProtoReflect.Descriptor instead.
func (*FlattenPositionsForTradeAccount) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{47}
}

func (x *FlattenPositionsForTradeAccount) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *FlattenPositionsForTradeAccount) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *FlattenPositionsForTradeAccount) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

func (x *FlattenPositionsForTradeAccount) GetIsAutomatedOrder() uint32 {
	if x != nil {
		return x.IsAutomatedOrder
	}
	return 0
}

// ============================================================================
type CancelReplaceOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerOrderID              string          `protobuf:"bytes,1,opt,name=ServerOrderID,proto3" json:"ServerOrderID,omitempty"`
	ClientOrderID              string          `protobuf:"bytes,2,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	Price1                     float64         `protobuf:"fixed64,3,opt,name=Price1,proto3" json:"Price1,omitempty"`
	Price2                     float64         `protobuf:"fixed64,4,opt,name=Price2,proto3" json:"Price2,omitempty"`
	Quantity                   float64         `protobuf:"fixed64,5,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Price1IsSet                uint32          `protobuf:"varint,6,opt,name=Price1IsSet,proto3" json:"Price1IsSet,omitempty"`
	Price2IsSet                uint32          `protobuf:"varint,7,opt,name=Price2IsSet,proto3" json:"Price2IsSet,omitempty"`
	TimeInForce                TimeInForceEnum `protobuf:"varint,9,opt,name=TimeInForce,proto3,enum=DTC_PB.TimeInForceEnum" json:"TimeInForce,omitempty"`
	GoodTillDateTime           uint64          `protobuf:"varint,10,opt,name=GoodTillDateTime,proto3" json:"GoodTillDateTime,omitempty"`
	UpdatePrice1OffsetToParent uint32          `protobuf:"varint,11,opt,name=UpdatePrice1OffsetToParent,proto3" json:"UpdatePrice1OffsetToParent,omitempty"`
	TradeAccount               string          `protobuf:"bytes,12,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	Price1AsString             string          `protobuf:"bytes,13,opt,name=Price1AsString,proto3" json:"Price1AsString,omitempty"`
	Price2AsString             string          `protobuf:"bytes,14,opt,name=Price2AsString,proto3" json:"Price2AsString,omitempty"`
}

func (x *CancelReplaceOrder) Reset() {
	*x = CancelReplaceOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReplaceOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReplaceOrder) ProtoMessage() {}

func (x *CancelReplaceOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReplaceOrder.ProtoReflect.Descriptor instead.
func (*CancelReplaceOrder) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{48}
}

func (x *CancelReplaceOrder) GetServerOrderID() string {
	if x != nil {
		return x.ServerOrderID
	}
	return ""
}

func (x *CancelReplaceOrder) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *CancelReplaceOrder) GetPrice1() float64 {
	if x != nil {
		return x.Price1
	}
	return 0
}

func (x *CancelReplaceOrder) GetPrice2() float64 {
	if x != nil {
		return x.Price2
	}
	return 0
}

func (x *CancelReplaceOrder) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CancelReplaceOrder) GetPrice1IsSet() uint32 {
	if x != nil {
		return x.Price1IsSet
	}
	return 0
}

func (x *CancelReplaceOrder) GetPrice2IsSet() uint32 {
	if x != nil {
		return x.Price2IsSet
	}
	return 0
}

func (x *CancelReplaceOrder) GetTimeInForce() TimeInForceEnum {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceEnum_TIF_UNSET
}

func (x *CancelReplaceOrder) GetGoodTillDateTime() uint64 {
	if x != nil {
		return x.GoodTillDateTime
	}
	return 0
}

func (x *CancelReplaceOrder) GetUpdatePrice1OffsetToParent() uint32 {
	if x != nil {
		return x.UpdatePrice1OffsetToParent
	}
	return 0
}

func (x *CancelReplaceOrder) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *CancelReplaceOrder) GetPrice1AsString() string {
	if x != nil {
		return x.Price1AsString
	}
	return ""
}

func (x *CancelReplaceOrder) GetPrice2AsString() string {
	if x != nil {
		return x.Price2AsString
	}
	return ""
}

// ============================================================================
type CancelReplaceOrderInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerOrderID              string          `protobuf:"bytes,1,opt,name=ServerOrderID,proto3" json:"ServerOrderID,omitempty"`
	ClientOrderID              string          `protobuf:"bytes,2,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	Price1                     int64           `protobuf:"varint,3,opt,name=Price1,proto3" json:"Price1,omitempty"`
	Price2                     int64           `protobuf:"varint,4,opt,name=Price2,proto3" json:"Price2,omitempty"`
	Divisor                    float32         `protobuf:"fixed32,5,opt,name=Divisor,proto3" json:"Divisor,omitempty"`
	Quantity                   int64           `protobuf:"varint,6,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	Price1IsSet                uint32          `protobuf:"varint,7,opt,name=Price1IsSet,proto3" json:"Price1IsSet,omitempty"`
	Price2IsSet                uint32          `protobuf:"varint,8,opt,name=Price2IsSet,proto3" json:"Price2IsSet,omitempty"`
	TimeInForce                TimeInForceEnum `protobuf:"varint,10,opt,name=TimeInForce,proto3,enum=DTC_PB.TimeInForceEnum" json:"TimeInForce,omitempty"`
	GoodTillDateTime           uint64          `protobuf:"varint,11,opt,name=GoodTillDateTime,proto3" json:"GoodTillDateTime,omitempty"`
	UpdatePrice1OffsetToParent uint32          `protobuf:"varint,12,opt,name=UpdatePrice1OffsetToParent,proto3" json:"UpdatePrice1OffsetToParent,omitempty"`
}

func (x *CancelReplaceOrderInt) Reset() {
	*x = CancelReplaceOrderInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelReplaceOrderInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelReplaceOrderInt) ProtoMessage() {}

func (x *CancelReplaceOrderInt) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelReplaceOrderInt.ProtoReflect.Descriptor instead.
func (*CancelReplaceOrderInt) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{49}
}

func (x *CancelReplaceOrderInt) GetServerOrderID() string {
	if x != nil {
		return x.ServerOrderID
	}
	return ""
}

func (x *CancelReplaceOrderInt) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *CancelReplaceOrderInt) GetPrice1() int64 {
	if x != nil {
		return x.Price1
	}
	return 0
}

func (x *CancelReplaceOrderInt) GetPrice2() int64 {
	if x != nil {
		return x.Price2
	}
	return 0
}

func (x *CancelReplaceOrderInt) GetDivisor() float32 {
	if x != nil {
		return x.Divisor
	}
	return 0
}

func (x *CancelReplaceOrderInt) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CancelReplaceOrderInt) GetPrice1IsSet() uint32 {
	if x != nil {
		return x.Price1IsSet
	}
	return 0
}

func (x *CancelReplaceOrderInt) GetPrice2IsSet() uint32 {
	if x != nil {
		return x.Price2IsSet
	}
	return 0
}

func (x *CancelReplaceOrderInt) GetTimeInForce() TimeInForceEnum {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceEnum_TIF_UNSET
}

func (x *CancelReplaceOrderInt) GetGoodTillDateTime() uint64 {
	if x != nil {
		return x.GoodTillDateTime
	}
	return 0
}

func (x *CancelReplaceOrderInt) GetUpdatePrice1OffsetToParent() uint32 {
	if x != nil {
		return x.UpdatePrice1OffsetToParent
	}
	return 0
}

// ============================================================================
type CancelOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerOrderID string `protobuf:"bytes,1,opt,name=ServerOrderID,proto3" json:"ServerOrderID,omitempty"`
	ClientOrderID string `protobuf:"bytes,2,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	TradeAccount  string `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
}

func (x *CancelOrder) Reset() {
	*x = CancelOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrder) ProtoMessage() {}

func (x *CancelOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrder.ProtoReflect.Descriptor instead.
func (*CancelOrder) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{50}
}

func (x *CancelOrder) GetServerOrderID() string {
	if x != nil {
		return x.ServerOrderID
	}
	return ""
}

func (x *CancelOrder) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *CancelOrder) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

// ============================================================================
type SubmitNewOCOOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol                         string                  `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                       string                  `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	ClientOrderID_1                string                  `protobuf:"bytes,3,opt,name=ClientOrderID_1,json=ClientOrderID1,proto3" json:"ClientOrderID_1,omitempty"`
	OrderType_1                    OrderTypeEnum           `protobuf:"varint,4,opt,name=OrderType_1,json=OrderType1,proto3,enum=DTC_PB.OrderTypeEnum" json:"OrderType_1,omitempty"`
	BuySell_1                      BuySellEnum             `protobuf:"varint,5,opt,name=BuySell_1,json=BuySell1,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell_1,omitempty"`
	Price1_1                       float64                 `protobuf:"fixed64,6,opt,name=Price1_1,json=Price11,proto3" json:"Price1_1,omitempty"`
	Price2_1                       float64                 `protobuf:"fixed64,7,opt,name=Price2_1,json=Price21,proto3" json:"Price2_1,omitempty"`
	Quantity_1                     float64                 `protobuf:"fixed64,8,opt,name=Quantity_1,json=Quantity1,proto3" json:"Quantity_1,omitempty"`
	ClientOrderID_2                string                  `protobuf:"bytes,9,opt,name=ClientOrderID_2,json=ClientOrderID2,proto3" json:"ClientOrderID_2,omitempty"`
	OrderType_2                    OrderTypeEnum           `protobuf:"varint,10,opt,name=OrderType_2,json=OrderType2,proto3,enum=DTC_PB.OrderTypeEnum" json:"OrderType_2,omitempty"`
	BuySell_2                      BuySellEnum             `protobuf:"varint,11,opt,name=BuySell_2,json=BuySell2,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell_2,omitempty"`
	Price1_2                       float64                 `protobuf:"fixed64,12,opt,name=Price1_2,json=Price12,proto3" json:"Price1_2,omitempty"`
	Price2_2                       float64                 `protobuf:"fixed64,13,opt,name=Price2_2,json=Price22,proto3" json:"Price2_2,omitempty"`
	Quantity_2                     float64                 `protobuf:"fixed64,14,opt,name=Quantity_2,json=Quantity2,proto3" json:"Quantity_2,omitempty"`
	TimeInForce                    TimeInForceEnum         `protobuf:"varint,15,opt,name=TimeInForce,proto3,enum=DTC_PB.TimeInForceEnum" json:"TimeInForce,omitempty"`
	GoodTillDateTime               int64                   `protobuf:"fixed64,16,opt,name=GoodTillDateTime,proto3" json:"GoodTillDateTime,omitempty"`
	TradeAccount                   string                  `protobuf:"bytes,17,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	IsAutomatedOrder               uint32                  `protobuf:"varint,18,opt,name=IsAutomatedOrder,proto3" json:"IsAutomatedOrder,omitempty"`
	ParentTriggerClientOrderID     string                  `protobuf:"bytes,19,opt,name=ParentTriggerClientOrderID,proto3" json:"ParentTriggerClientOrderID,omitempty"`
	FreeFormText                   string                  `protobuf:"bytes,20,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
	OpenOrClose                    OpenCloseTradeEnum      `protobuf:"varint,21,opt,name=OpenOrClose,proto3,enum=DTC_PB.OpenCloseTradeEnum" json:"OpenOrClose,omitempty"`
	PartialFillHandling            PartialFillHandlingEnum `protobuf:"varint,22,opt,name=PartialFillHandling,proto3,enum=DTC_PB.PartialFillHandlingEnum" json:"PartialFillHandling,omitempty"`
	UseOffsets                     uint32                  `protobuf:"varint,23,opt,name=UseOffsets,proto3" json:"UseOffsets,omitempty"`
	OffsetFromParent1              float64                 `protobuf:"fixed64,24,opt,name=OffsetFromParent1,proto3" json:"OffsetFromParent1,omitempty"`
	OffsetFromParent2              float64                 `protobuf:"fixed64,25,opt,name=OffsetFromParent2,proto3" json:"OffsetFromParent2,omitempty"`
	MaintainSamePricesOnParentFill uint32                  `protobuf:"varint,26,opt,name=MaintainSamePricesOnParentFill,proto3" json:"MaintainSamePricesOnParentFill,omitempty"`
	Price1_1AsString               string                  `protobuf:"bytes,27,opt,name=Price1_1AsString,json=Price11AsString,proto3" json:"Price1_1AsString,omitempty"`
	Price2_1AsString               string                  `protobuf:"bytes,28,opt,name=Price2_1AsString,json=Price21AsString,proto3" json:"Price2_1AsString,omitempty"`
	Price1_2AsString               string                  `protobuf:"bytes,29,opt,name=Price1_2AsString,json=Price12AsString,proto3" json:"Price1_2AsString,omitempty"`
	Price2_2AsString               string                  `protobuf:"bytes,30,opt,name=Price2_2AsString,json=Price22AsString,proto3" json:"Price2_2AsString,omitempty"`
}

func (x *SubmitNewOCOOrder) Reset() {
	*x = SubmitNewOCOOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitNewOCOOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitNewOCOOrder) ProtoMessage() {}

func (x *SubmitNewOCOOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitNewOCOOrder.ProtoReflect.Descriptor instead.
func (*SubmitNewOCOOrder) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{51}
}

func (x *SubmitNewOCOOrder) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetClientOrderID_1() string {
	if x != nil {
		return x.ClientOrderID_1
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetOrderType_1() OrderTypeEnum {
	if x != nil {
		return x.OrderType_1
	}
	return OrderTypeEnum_ORDER_TYPE_UNSET
}

func (x *SubmitNewOCOOrder) GetBuySell_1() BuySellEnum {
	if x != nil {
		return x.BuySell_1
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *SubmitNewOCOOrder) GetPrice1_1() float64 {
	if x != nil {
		return x.Price1_1
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetPrice2_1() float64 {
	if x != nil {
		return x.Price2_1
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetQuantity_1() float64 {
	if x != nil {
		return x.Quantity_1
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetClientOrderID_2() string {
	if x != nil {
		return x.ClientOrderID_2
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetOrderType_2() OrderTypeEnum {
	if x != nil {
		return x.OrderType_2
	}
	return OrderTypeEnum_ORDER_TYPE_UNSET
}

func (x *SubmitNewOCOOrder) GetBuySell_2() BuySellEnum {
	if x != nil {
		return x.BuySell_2
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *SubmitNewOCOOrder) GetPrice1_2() float64 {
	if x != nil {
		return x.Price1_2
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetPrice2_2() float64 {
	if x != nil {
		return x.Price2_2
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetQuantity_2() float64 {
	if x != nil {
		return x.Quantity_2
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetTimeInForce() TimeInForceEnum {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceEnum_TIF_UNSET
}

func (x *SubmitNewOCOOrder) GetGoodTillDateTime() int64 {
	if x != nil {
		return x.GoodTillDateTime
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetIsAutomatedOrder() uint32 {
	if x != nil {
		return x.IsAutomatedOrder
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetParentTriggerClientOrderID() string {
	if x != nil {
		return x.ParentTriggerClientOrderID
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetOpenOrClose() OpenCloseTradeEnum {
	if x != nil {
		return x.OpenOrClose
	}
	return OpenCloseTradeEnum_TRADE_UNSET
}

func (x *SubmitNewOCOOrder) GetPartialFillHandling() PartialFillHandlingEnum {
	if x != nil {
		return x.PartialFillHandling
	}
	return PartialFillHandlingEnum_PARTIAL_FILL_UNSET
}

func (x *SubmitNewOCOOrder) GetUseOffsets() uint32 {
	if x != nil {
		return x.UseOffsets
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetOffsetFromParent1() float64 {
	if x != nil {
		return x.OffsetFromParent1
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetOffsetFromParent2() float64 {
	if x != nil {
		return x.OffsetFromParent2
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetMaintainSamePricesOnParentFill() uint32 {
	if x != nil {
		return x.MaintainSamePricesOnParentFill
	}
	return 0
}

func (x *SubmitNewOCOOrder) GetPrice1_1AsString() string {
	if x != nil {
		return x.Price1_1AsString
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetPrice2_1AsString() string {
	if x != nil {
		return x.Price2_1AsString
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetPrice1_2AsString() string {
	if x != nil {
		return x.Price1_2AsString
	}
	return ""
}

func (x *SubmitNewOCOOrder) GetPrice2_2AsString() string {
	if x != nil {
		return x.Price2_2AsString
	}
	return ""
}

// ============================================================================
type SubmitNewOCOOrderInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol                     string                  `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                   string                  `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	ClientOrderID_1            string                  `protobuf:"bytes,3,opt,name=ClientOrderID_1,json=ClientOrderID1,proto3" json:"ClientOrderID_1,omitempty"`
	OrderType_1                OrderTypeEnum           `protobuf:"varint,4,opt,name=OrderType_1,json=OrderType1,proto3,enum=DTC_PB.OrderTypeEnum" json:"OrderType_1,omitempty"`
	BuySell_1                  BuySellEnum             `protobuf:"varint,5,opt,name=BuySell_1,json=BuySell1,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell_1,omitempty"`
	Price1_1                   int64                   `protobuf:"varint,6,opt,name=Price1_1,json=Price11,proto3" json:"Price1_1,omitempty"`
	Price2_1                   int64                   `protobuf:"varint,7,opt,name=Price2_1,json=Price21,proto3" json:"Price2_1,omitempty"`
	Quantity_1                 int64                   `protobuf:"varint,8,opt,name=Quantity_1,json=Quantity1,proto3" json:"Quantity_1,omitempty"`
	ClientOrderID_2            string                  `protobuf:"bytes,9,opt,name=ClientOrderID_2,json=ClientOrderID2,proto3" json:"ClientOrderID_2,omitempty"`
	OrderType_2                OrderTypeEnum           `protobuf:"varint,10,opt,name=OrderType_2,json=OrderType2,proto3,enum=DTC_PB.OrderTypeEnum" json:"OrderType_2,omitempty"`
	BuySell_2                  BuySellEnum             `protobuf:"varint,11,opt,name=BuySell_2,json=BuySell2,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell_2,omitempty"`
	Price1_2                   int64                   `protobuf:"varint,12,opt,name=Price1_2,json=Price12,proto3" json:"Price1_2,omitempty"`
	Price2_2                   int64                   `protobuf:"varint,13,opt,name=Price2_2,json=Price22,proto3" json:"Price2_2,omitempty"`
	Quantity_2                 int64                   `protobuf:"varint,14,opt,name=Quantity_2,json=Quantity2,proto3" json:"Quantity_2,omitempty"`
	TimeInForce                TimeInForceEnum         `protobuf:"varint,15,opt,name=TimeInForce,proto3,enum=DTC_PB.TimeInForceEnum" json:"TimeInForce,omitempty"`
	GoodTillDateTime           int64                   `protobuf:"fixed64,16,opt,name=GoodTillDateTime,proto3" json:"GoodTillDateTime,omitempty"`
	TradeAccount               string                  `protobuf:"bytes,17,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	IsAutomatedOrder           uint32                  `protobuf:"varint,18,opt,name=IsAutomatedOrder,proto3" json:"IsAutomatedOrder,omitempty"`
	ParentTriggerClientOrderID string                  `protobuf:"bytes,19,opt,name=ParentTriggerClientOrderID,proto3" json:"ParentTriggerClientOrderID,omitempty"`
	FreeFormText               string                  `protobuf:"bytes,20,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
	Divisor                    float32                 `protobuf:"fixed32,21,opt,name=Divisor,proto3" json:"Divisor,omitempty"`
	OpenOrClose                OpenCloseTradeEnum      `protobuf:"varint,22,opt,name=OpenOrClose,proto3,enum=DTC_PB.OpenCloseTradeEnum" json:"OpenOrClose,omitempty"`
	PartialFillHandling        PartialFillHandlingEnum `protobuf:"varint,23,opt,name=PartialFillHandling,proto3,enum=DTC_PB.PartialFillHandlingEnum" json:"PartialFillHandling,omitempty"`
}

func (x *SubmitNewOCOOrderInt) Reset() {
	*x = SubmitNewOCOOrderInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitNewOCOOrderInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitNewOCOOrderInt) ProtoMessage() {}

func (x *SubmitNewOCOOrderInt) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitNewOCOOrderInt.ProtoReflect.Descriptor instead.
func (*SubmitNewOCOOrderInt) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{52}
}

func (x *SubmitNewOCOOrderInt) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SubmitNewOCOOrderInt) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SubmitNewOCOOrderInt) GetClientOrderID_1() string {
	if x != nil {
		return x.ClientOrderID_1
	}
	return ""
}

func (x *SubmitNewOCOOrderInt) GetOrderType_1() OrderTypeEnum {
	if x != nil {
		return x.OrderType_1
	}
	return OrderTypeEnum_ORDER_TYPE_UNSET
}

func (x *SubmitNewOCOOrderInt) GetBuySell_1() BuySellEnum {
	if x != nil {
		return x.BuySell_1
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *SubmitNewOCOOrderInt) GetPrice1_1() int64 {
	if x != nil {
		return x.Price1_1
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetPrice2_1() int64 {
	if x != nil {
		return x.Price2_1
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetQuantity_1() int64 {
	if x != nil {
		return x.Quantity_1
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetClientOrderID_2() string {
	if x != nil {
		return x.ClientOrderID_2
	}
	return ""
}

func (x *SubmitNewOCOOrderInt) GetOrderType_2() OrderTypeEnum {
	if x != nil {
		return x.OrderType_2
	}
	return OrderTypeEnum_ORDER_TYPE_UNSET
}

func (x *SubmitNewOCOOrderInt) GetBuySell_2() BuySellEnum {
	if x != nil {
		return x.BuySell_2
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *SubmitNewOCOOrderInt) GetPrice1_2() int64 {
	if x != nil {
		return x.Price1_2
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetPrice2_2() int64 {
	if x != nil {
		return x.Price2_2
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetQuantity_2() int64 {
	if x != nil {
		return x.Quantity_2
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetTimeInForce() TimeInForceEnum {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceEnum_TIF_UNSET
}

func (x *SubmitNewOCOOrderInt) GetGoodTillDateTime() int64 {
	if x != nil {
		return x.GoodTillDateTime
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *SubmitNewOCOOrderInt) GetIsAutomatedOrder() uint32 {
	if x != nil {
		return x.IsAutomatedOrder
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetParentTriggerClientOrderID() string {
	if x != nil {
		return x.ParentTriggerClientOrderID
	}
	return ""
}

func (x *SubmitNewOCOOrderInt) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

func (x *SubmitNewOCOOrderInt) GetDivisor() float32 {
	if x != nil {
		return x.Divisor
	}
	return 0
}

func (x *SubmitNewOCOOrderInt) GetOpenOrClose() OpenCloseTradeEnum {
	if x != nil {
		return x.OpenOrClose
	}
	return OpenCloseTradeEnum_TRADE_UNSET
}

func (x *SubmitNewOCOOrderInt) GetPartialFillHandling() PartialFillHandlingEnum {
	if x != nil {
		return x.PartialFillHandling
	}
	return PartialFillHandlingEnum_PARTIAL_FILL_UNSET
}

// ============================================================================
type OpenOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID        int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RequestAllOrders int32  `protobuf:"varint,2,opt,name=RequestAllOrders,proto3" json:"RequestAllOrders,omitempty"`
	ServerOrderID    string `protobuf:"bytes,3,opt,name=ServerOrderID,proto3" json:"ServerOrderID,omitempty"`
	TradeAccount     string `protobuf:"bytes,4,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
}

func (x *OpenOrdersRequest) Reset() {
	*x = OpenOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenOrdersRequest) ProtoMessage() {}

func (x *OpenOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenOrdersRequest.ProtoReflect.Descriptor instead.
func (*OpenOrdersRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{53}
}

func (x *OpenOrdersRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *OpenOrdersRequest) GetRequestAllOrders() int32 {
	if x != nil {
		return x.RequestAllOrders
	}
	return 0
}

func (x *OpenOrdersRequest) GetServerOrderID() string {
	if x != nil {
		return x.ServerOrderID
	}
	return ""
}

func (x *OpenOrdersRequest) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

// ============================================================================
type HistoricalOrderFillsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	ServerOrderID string `protobuf:"bytes,2,opt,name=ServerOrderID,proto3" json:"ServerOrderID,omitempty"`
	NumberOfDays  int32  `protobuf:"varint,3,opt,name=NumberOfDays,proto3" json:"NumberOfDays,omitempty"`
	TradeAccount  string `protobuf:"bytes,4,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	StartDateTime int64  `protobuf:"fixed64,5,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
}

func (x *HistoricalOrderFillsRequest) Reset() {
	*x = HistoricalOrderFillsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalOrderFillsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalOrderFillsRequest) ProtoMessage() {}

func (x *HistoricalOrderFillsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalOrderFillsRequest.ProtoReflect.Descriptor instead.
func (*HistoricalOrderFillsRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{54}
}

func (x *HistoricalOrderFillsRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalOrderFillsRequest) GetServerOrderID() string {
	if x != nil {
		return x.ServerOrderID
	}
	return ""
}

func (x *HistoricalOrderFillsRequest) GetNumberOfDays() int32 {
	if x != nil {
		return x.NumberOfDays
	}
	return 0
}

func (x *HistoricalOrderFillsRequest) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *HistoricalOrderFillsRequest) GetStartDateTime() int64 {
	if x != nil {
		return x.StartDateTime
	}
	return 0
}

// ============================================================================
type HistoricalOrderFillsReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *HistoricalOrderFillsReject) Reset() {
	*x = HistoricalOrderFillsReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalOrderFillsReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalOrderFillsReject) ProtoMessage() {}

func (x *HistoricalOrderFillsReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalOrderFillsReject.ProtoReflect.Descriptor instead.
func (*HistoricalOrderFillsReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{55}
}

func (x *HistoricalOrderFillsReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalOrderFillsReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type CurrentPositionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TradeAccount string `protobuf:"bytes,2,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
}

func (x *CurrentPositionsRequest) Reset() {
	*x = CurrentPositionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentPositionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentPositionsRequest) ProtoMessage() {}

func (x *CurrentPositionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentPositionsRequest.ProtoReflect.Descriptor instead.
func (*CurrentPositionsRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{56}
}

func (x *CurrentPositionsRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CurrentPositionsRequest) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

// ============================================================================
type CurrentPositionsReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *CurrentPositionsReject) Reset() {
	*x = CurrentPositionsReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentPositionsReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentPositionsReject) ProtoMessage() {}

func (x *CurrentPositionsReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentPositionsReject.ProtoReflect.Descriptor instead.
func (*CurrentPositionsReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{57}
}

func (x *CurrentPositionsReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *CurrentPositionsReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type OrderUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                   int32                 `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TotalNumMessages            int32                 `protobuf:"varint,2,opt,name=TotalNumMessages,proto3" json:"TotalNumMessages,omitempty"`
	MessageNumber               int32                 `protobuf:"varint,3,opt,name=MessageNumber,proto3" json:"MessageNumber,omitempty"`
	Symbol                      string                `protobuf:"bytes,4,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                    string                `protobuf:"bytes,5,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	PreviousServerOrderID       string                `protobuf:"bytes,6,opt,name=PreviousServerOrderID,proto3" json:"PreviousServerOrderID,omitempty"`
	ServerOrderID               string                `protobuf:"bytes,7,opt,name=ServerOrderID,proto3" json:"ServerOrderID,omitempty"`
	ClientOrderID               string                `protobuf:"bytes,8,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	ExchangeOrderID             string                `protobuf:"bytes,9,opt,name=ExchangeOrderID,proto3" json:"ExchangeOrderID,omitempty"`
	OrderStatus                 OrderStatusEnum       `protobuf:"varint,10,opt,name=OrderStatus,proto3,enum=DTC_PB.OrderStatusEnum" json:"OrderStatus,omitempty"`
	OrderUpdateReason           OrderUpdateReasonEnum `protobuf:"varint,11,opt,name=OrderUpdateReason,proto3,enum=DTC_PB.OrderUpdateReasonEnum" json:"OrderUpdateReason,omitempty"`
	OrderType                   OrderTypeEnum         `protobuf:"varint,12,opt,name=OrderType,proto3,enum=DTC_PB.OrderTypeEnum" json:"OrderType,omitempty"`
	BuySell                     BuySellEnum           `protobuf:"varint,13,opt,name=BuySell,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell,omitempty"`
	Price1                      float64               `protobuf:"fixed64,14,opt,name=Price1,proto3" json:"Price1,omitempty"`
	Price2                      float64               `protobuf:"fixed64,15,opt,name=Price2,proto3" json:"Price2,omitempty"`
	TimeInForce                 TimeInForceEnum       `protobuf:"varint,16,opt,name=TimeInForce,proto3,enum=DTC_PB.TimeInForceEnum" json:"TimeInForce,omitempty"`
	GoodTillDateTime            int64                 `protobuf:"fixed64,17,opt,name=GoodTillDateTime,proto3" json:"GoodTillDateTime,omitempty"`
	OrderQuantity               float64               `protobuf:"fixed64,18,opt,name=OrderQuantity,proto3" json:"OrderQuantity,omitempty"`
	FilledQuantity              float64               `protobuf:"fixed64,19,opt,name=FilledQuantity,proto3" json:"FilledQuantity,omitempty"`
	RemainingQuantity           float64               `protobuf:"fixed64,20,opt,name=RemainingQuantity,proto3" json:"RemainingQuantity,omitempty"`
	AverageFillPrice            float64               `protobuf:"fixed64,21,opt,name=AverageFillPrice,proto3" json:"AverageFillPrice,omitempty"`
	LastFillPrice               float64               `protobuf:"fixed64,22,opt,name=LastFillPrice,proto3" json:"LastFillPrice,omitempty"`
	LastFillDateTime            int64                 `protobuf:"fixed64,23,opt,name=LastFillDateTime,proto3" json:"LastFillDateTime,omitempty"`
	LastFillQuantity            float64               `protobuf:"fixed64,24,opt,name=LastFillQuantity,proto3" json:"LastFillQuantity,omitempty"`
	LastFillExecutionID         string                `protobuf:"bytes,25,opt,name=LastFillExecutionID,proto3" json:"LastFillExecutionID,omitempty"`
	TradeAccount                string                `protobuf:"bytes,26,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	InfoText                    string                `protobuf:"bytes,27,opt,name=InfoText,proto3" json:"InfoText,omitempty"`
	NoOrders                    uint32                `protobuf:"varint,28,opt,name=NoOrders,proto3" json:"NoOrders,omitempty"`
	ParentServerOrderID         string                `protobuf:"bytes,29,opt,name=ParentServerOrderID,proto3" json:"ParentServerOrderID,omitempty"`
	OCOLinkedOrderServerOrderID string                `protobuf:"bytes,30,opt,name=OCOLinkedOrderServerOrderID,proto3" json:"OCOLinkedOrderServerOrderID,omitempty"`
	OpenOrClose                 OpenCloseTradeEnum    `protobuf:"varint,31,opt,name=OpenOrClose,proto3,enum=DTC_PB.OpenCloseTradeEnum" json:"OpenOrClose,omitempty"`
	PreviousClientOrderID       string                `protobuf:"bytes,32,opt,name=PreviousClientOrderID,proto3" json:"PreviousClientOrderID,omitempty"`
	FreeFormText                string                `protobuf:"bytes,33,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
	OrderReceivedDateTime       int64                 `protobuf:"fixed64,34,opt,name=OrderReceivedDateTime,proto3" json:"OrderReceivedDateTime,omitempty"`
	LatestTransactionDateTime   float64               `protobuf:"fixed64,35,opt,name=LatestTransactionDateTime,proto3" json:"LatestTransactionDateTime,omitempty"`
	Username                    string                `protobuf:"bytes,36,opt,name=Username,proto3" json:"Username,omitempty"`
}

func (x *OrderUpdate) Reset() {
	*x = OrderUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUpdate) ProtoMessage() {}

func (x *OrderUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUpdate.ProtoReflect.Descriptor instead.
func (*OrderUpdate) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{58}
}

func (x *OrderUpdate) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *OrderUpdate) GetTotalNumMessages() int32 {
	if x != nil {
		return x.TotalNumMessages
	}
	return 0
}

func (x *OrderUpdate) GetMessageNumber() int32 {
	if x != nil {
		return x.MessageNumber
	}
	return 0
}

func (x *OrderUpdate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderUpdate) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderUpdate) GetPreviousServerOrderID() string {
	if x != nil {
		return x.PreviousServerOrderID
	}
	return ""
}

func (x *OrderUpdate) GetServerOrderID() string {
	if x != nil {
		return x.ServerOrderID
	}
	return ""
}

func (x *OrderUpdate) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *OrderUpdate) GetExchangeOrderID() string {
	if x != nil {
		return x.ExchangeOrderID
	}
	return ""
}

func (x *OrderUpdate) GetOrderStatus() OrderStatusEnum {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatusEnum_ORDER_STATUS_UNSPECIFIED
}

func (x *OrderUpdate) GetOrderUpdateReason() OrderUpdateReasonEnum {
	if x != nil {
		return x.OrderUpdateReason
	}
	return OrderUpdateReasonEnum_ORDER_UPDATE_REASON_UNSET
}

func (x *OrderUpdate) GetOrderType() OrderTypeEnum {
	if x != nil {
		return x.OrderType
	}
	return OrderTypeEnum_ORDER_TYPE_UNSET
}

func (x *OrderUpdate) GetBuySell() BuySellEnum {
	if x != nil {
		return x.BuySell
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *OrderUpdate) GetPrice1() float64 {
	if x != nil {
		return x.Price1
	}
	return 0
}

func (x *OrderUpdate) GetPrice2() float64 {
	if x != nil {
		return x.Price2
	}
	return 0
}

func (x *OrderUpdate) GetTimeInForce() TimeInForceEnum {
	if x != nil {
		return x.TimeInForce
	}
	return TimeInForceEnum_TIF_UNSET
}

func (x *OrderUpdate) GetGoodTillDateTime() int64 {
	if x != nil {
		return x.GoodTillDateTime
	}
	return 0
}

func (x *OrderUpdate) GetOrderQuantity() float64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *OrderUpdate) GetFilledQuantity() float64 {
	if x != nil {
		return x.FilledQuantity
	}
	return 0
}

func (x *OrderUpdate) GetRemainingQuantity() float64 {
	if x != nil {
		return x.RemainingQuantity
	}
	return 0
}

func (x *OrderUpdate) GetAverageFillPrice() float64 {
	if x != nil {
		return x.AverageFillPrice
	}
	return 0
}

func (x *OrderUpdate) GetLastFillPrice() float64 {
	if x != nil {
		return x.LastFillPrice
	}
	return 0
}

func (x *OrderUpdate) GetLastFillDateTime() int64 {
	if x != nil {
		return x.LastFillDateTime
	}
	return 0
}

func (x *OrderUpdate) GetLastFillQuantity() float64 {
	if x != nil {
		return x.LastFillQuantity
	}
	return 0
}

func (x *OrderUpdate) GetLastFillExecutionID() string {
	if x != nil {
		return x.LastFillExecutionID
	}
	return ""
}

func (x *OrderUpdate) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *OrderUpdate) GetInfoText() string {
	if x != nil {
		return x.InfoText
	}
	return ""
}

func (x *OrderUpdate) GetNoOrders() uint32 {
	if x != nil {
		return x.NoOrders
	}
	return 0
}

func (x *OrderUpdate) GetParentServerOrderID() string {
	if x != nil {
		return x.ParentServerOrderID
	}
	return ""
}

func (x *OrderUpdate) GetOCOLinkedOrderServerOrderID() string {
	if x != nil {
		return x.OCOLinkedOrderServerOrderID
	}
	return ""
}

func (x *OrderUpdate) GetOpenOrClose() OpenCloseTradeEnum {
	if x != nil {
		return x.OpenOrClose
	}
	return OpenCloseTradeEnum_TRADE_UNSET
}

func (x *OrderUpdate) GetPreviousClientOrderID() string {
	if x != nil {
		return x.PreviousClientOrderID
	}
	return ""
}

func (x *OrderUpdate) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

func (x *OrderUpdate) GetOrderReceivedDateTime() int64 {
	if x != nil {
		return x.OrderReceivedDateTime
	}
	return 0
}

func (x *OrderUpdate) GetLatestTransactionDateTime() float64 {
	if x != nil {
		return x.LatestTransactionDateTime
	}
	return 0
}

func (x *OrderUpdate) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// ============================================================================
type OpenOrdersReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *OpenOrdersReject) Reset() {
	*x = OpenOrdersReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenOrdersReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenOrdersReject) ProtoMessage() {}

func (x *OpenOrdersReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenOrdersReject.ProtoReflect.Descriptor instead.
func (*OpenOrdersReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{59}
}

func (x *OpenOrdersReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *OpenOrdersReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type HistoricalOrderFillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID               int32              `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TotalNumberMessages     int32              `protobuf:"varint,2,opt,name=TotalNumberMessages,proto3" json:"TotalNumberMessages,omitempty"`
	MessageNumber           int32              `protobuf:"varint,3,opt,name=MessageNumber,proto3" json:"MessageNumber,omitempty"`
	Symbol                  string             `protobuf:"bytes,4,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                string             `protobuf:"bytes,5,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	ServerOrderID           string             `protobuf:"bytes,6,opt,name=ServerOrderID,proto3" json:"ServerOrderID,omitempty"`
	BuySell                 BuySellEnum        `protobuf:"varint,7,opt,name=BuySell,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell,omitempty"`
	Price                   float64            `protobuf:"fixed64,8,opt,name=Price,proto3" json:"Price,omitempty"`
	DateTime                int64              `protobuf:"fixed64,9,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	Quantity                float64            `protobuf:"fixed64,10,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	UniqueExecutionID       string             `protobuf:"bytes,11,opt,name=UniqueExecutionID,proto3" json:"UniqueExecutionID,omitempty"`
	TradeAccount            string             `protobuf:"bytes,12,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	OpenClose               OpenCloseTradeEnum `protobuf:"varint,13,opt,name=OpenClose,proto3,enum=DTC_PB.OpenCloseTradeEnum" json:"OpenClose,omitempty"`
	NoOrderFills            uint32             `protobuf:"varint,14,opt,name=NoOrderFills,proto3" json:"NoOrderFills,omitempty"`
	InfoText                string             `protobuf:"bytes,15,opt,name=InfoText,proto3" json:"InfoText,omitempty"`
	HighPriceDuringPosition float64            `protobuf:"fixed64,16,opt,name=HighPriceDuringPosition,proto3" json:"HighPriceDuringPosition,omitempty"`
	LowPriceDuringPosition  float64            `protobuf:"fixed64,17,opt,name=LowPriceDuringPosition,proto3" json:"LowPriceDuringPosition,omitempty"`
	PositionQuantity        float64            `protobuf:"fixed64,18,opt,name=PositionQuantity,proto3" json:"PositionQuantity,omitempty"`
	Username                string             `protobuf:"bytes,19,opt,name=Username,proto3" json:"Username,omitempty"`
	ExchangeOrderID         string             `protobuf:"bytes,20,opt,name=ExchangeOrderID,proto3" json:"ExchangeOrderID,omitempty"`
	SenderSubID             string             `protobuf:"bytes,21,opt,name=SenderSubID,proto3" json:"SenderSubID,omitempty"`
}

func (x *HistoricalOrderFillResponse) Reset() {
	*x = HistoricalOrderFillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalOrderFillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalOrderFillResponse) ProtoMessage() {}

func (x *HistoricalOrderFillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalOrderFillResponse.ProtoReflect.Descriptor instead.
func (*HistoricalOrderFillResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{60}
}

func (x *HistoricalOrderFillResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetTotalNumberMessages() int32 {
	if x != nil {
		return x.TotalNumberMessages
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetMessageNumber() int32 {
	if x != nil {
		return x.MessageNumber
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetServerOrderID() string {
	if x != nil {
		return x.ServerOrderID
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetBuySell() BuySellEnum {
	if x != nil {
		return x.BuySell
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *HistoricalOrderFillResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetDateTime() int64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetUniqueExecutionID() string {
	if x != nil {
		return x.UniqueExecutionID
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetOpenClose() OpenCloseTradeEnum {
	if x != nil {
		return x.OpenClose
	}
	return OpenCloseTradeEnum_TRADE_UNSET
}

func (x *HistoricalOrderFillResponse) GetNoOrderFills() uint32 {
	if x != nil {
		return x.NoOrderFills
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetInfoText() string {
	if x != nil {
		return x.InfoText
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetHighPriceDuringPosition() float64 {
	if x != nil {
		return x.HighPriceDuringPosition
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetLowPriceDuringPosition() float64 {
	if x != nil {
		return x.LowPriceDuringPosition
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetPositionQuantity() float64 {
	if x != nil {
		return x.PositionQuantity
	}
	return 0
}

func (x *HistoricalOrderFillResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetExchangeOrderID() string {
	if x != nil {
		return x.ExchangeOrderID
	}
	return ""
}

func (x *HistoricalOrderFillResponse) GetSenderSubID() string {
	if x != nil {
		return x.SenderSubID
	}
	return ""
}

// ============================================================================
type PositionUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                   int32   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TotalNumberMessages         int32   `protobuf:"varint,2,opt,name=TotalNumberMessages,proto3" json:"TotalNumberMessages,omitempty"`
	MessageNumber               int32   `protobuf:"varint,3,opt,name=MessageNumber,proto3" json:"MessageNumber,omitempty"`
	Symbol                      string  `protobuf:"bytes,4,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                    string  `protobuf:"bytes,5,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	Quantity                    float64 `protobuf:"fixed64,6,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	AveragePrice                float64 `protobuf:"fixed64,7,opt,name=AveragePrice,proto3" json:"AveragePrice,omitempty"`
	PositionIdentifier          string  `protobuf:"bytes,8,opt,name=PositionIdentifier,proto3" json:"PositionIdentifier,omitempty"`
	TradeAccount                string  `protobuf:"bytes,9,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	NoPositions                 uint32  `protobuf:"varint,10,opt,name=NoPositions,proto3" json:"NoPositions,omitempty"`
	Unsolicited                 uint32  `protobuf:"varint,11,opt,name=Unsolicited,proto3" json:"Unsolicited,omitempty"`
	MarginRequirement           float64 `protobuf:"fixed64,12,opt,name=MarginRequirement,proto3" json:"MarginRequirement,omitempty"`
	EntryDateTime               uint32  `protobuf:"varint,13,opt,name=EntryDateTime,proto3" json:"EntryDateTime,omitempty"`
	OpenProfitLoss              float64 `protobuf:"fixed64,14,opt,name=OpenProfitLoss,proto3" json:"OpenProfitLoss,omitempty"`
	HighPriceDuringPosition     float64 `protobuf:"fixed64,15,opt,name=HighPriceDuringPosition,proto3" json:"HighPriceDuringPosition,omitempty"`
	LowPriceDuringPosition      float64 `protobuf:"fixed64,16,opt,name=LowPriceDuringPosition,proto3" json:"LowPriceDuringPosition,omitempty"`
	QuantityLimit               float64 `protobuf:"fixed64,17,opt,name=QuantityLimit,proto3" json:"QuantityLimit,omitempty"`
	MaxPotentialPostionQuantity float64 `protobuf:"fixed64,18,opt,name=MaxPotentialPostionQuantity,proto3" json:"MaxPotentialPostionQuantity,omitempty"`
}

func (x *PositionUpdate) Reset() {
	*x = PositionUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionUpdate) ProtoMessage() {}

func (x *PositionUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionUpdate.ProtoReflect.Descriptor instead.
func (*PositionUpdate) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{61}
}

func (x *PositionUpdate) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *PositionUpdate) GetTotalNumberMessages() int32 {
	if x != nil {
		return x.TotalNumberMessages
	}
	return 0
}

func (x *PositionUpdate) GetMessageNumber() int32 {
	if x != nil {
		return x.MessageNumber
	}
	return 0
}

func (x *PositionUpdate) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *PositionUpdate) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *PositionUpdate) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PositionUpdate) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *PositionUpdate) GetPositionIdentifier() string {
	if x != nil {
		return x.PositionIdentifier
	}
	return ""
}

func (x *PositionUpdate) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *PositionUpdate) GetNoPositions() uint32 {
	if x != nil {
		return x.NoPositions
	}
	return 0
}

func (x *PositionUpdate) GetUnsolicited() uint32 {
	if x != nil {
		return x.Unsolicited
	}
	return 0
}

func (x *PositionUpdate) GetMarginRequirement() float64 {
	if x != nil {
		return x.MarginRequirement
	}
	return 0
}

func (x *PositionUpdate) GetEntryDateTime() uint32 {
	if x != nil {
		return x.EntryDateTime
	}
	return 0
}

func (x *PositionUpdate) GetOpenProfitLoss() float64 {
	if x != nil {
		return x.OpenProfitLoss
	}
	return 0
}

func (x *PositionUpdate) GetHighPriceDuringPosition() float64 {
	if x != nil {
		return x.HighPriceDuringPosition
	}
	return 0
}

func (x *PositionUpdate) GetLowPriceDuringPosition() float64 {
	if x != nil {
		return x.LowPriceDuringPosition
	}
	return 0
}

func (x *PositionUpdate) GetQuantityLimit() float64 {
	if x != nil {
		return x.QuantityLimit
	}
	return 0
}

func (x *PositionUpdate) GetMaxPotentialPostionQuantity() float64 {
	if x != nil {
		return x.MaxPotentialPostionQuantity
	}
	return 0
}

// ============================================================================
type AddCorrectingOrderFill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol        string      `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange      string      `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	TradeAccount  string      `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	ClientOrderID string      `protobuf:"bytes,4,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	BuySell       BuySellEnum `protobuf:"varint,5,opt,name=BuySell,proto3,enum=DTC_PB.BuySellEnum" json:"BuySell,omitempty"`
	FillPrice     float64     `protobuf:"fixed64,6,opt,name=FillPrice,proto3" json:"FillPrice,omitempty"`
	FillQuantity  float64     `protobuf:"fixed64,7,opt,name=FillQuantity,proto3" json:"FillQuantity,omitempty"`
	FreeFormText  string      `protobuf:"bytes,8,opt,name=FreeFormText,proto3" json:"FreeFormText,omitempty"`
}

func (x *AddCorrectingOrderFill) Reset() {
	*x = AddCorrectingOrderFill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddCorrectingOrderFill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCorrectingOrderFill) ProtoMessage() {}

func (x *AddCorrectingOrderFill) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCorrectingOrderFill.ProtoReflect.Descriptor instead.
func (*AddCorrectingOrderFill) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{62}
}

func (x *AddCorrectingOrderFill) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AddCorrectingOrderFill) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *AddCorrectingOrderFill) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *AddCorrectingOrderFill) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *AddCorrectingOrderFill) GetBuySell() BuySellEnum {
	if x != nil {
		return x.BuySell
	}
	return BuySellEnum_BUY_SELL_UNSET
}

func (x *AddCorrectingOrderFill) GetFillPrice() float64 {
	if x != nil {
		return x.FillPrice
	}
	return 0
}

func (x *AddCorrectingOrderFill) GetFillQuantity() float64 {
	if x != nil {
		return x.FillQuantity
	}
	return 0
}

func (x *AddCorrectingOrderFill) GetFreeFormText() string {
	if x != nil {
		return x.FreeFormText
	}
	return ""
}

// ============================================================================
type CorrectingOrderFillResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOrderID string `protobuf:"bytes,1,opt,name=ClientOrderID,proto3" json:"ClientOrderID,omitempty"`
	ResultText    string `protobuf:"bytes,2,opt,name=ResultText,proto3" json:"ResultText,omitempty"`
	IsError       int32  `protobuf:"varint,3,opt,name=IsError,proto3" json:"IsError,omitempty"`
}

func (x *CorrectingOrderFillResponse) Reset() {
	*x = CorrectingOrderFillResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CorrectingOrderFillResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CorrectingOrderFillResponse) ProtoMessage() {}

func (x *CorrectingOrderFillResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CorrectingOrderFillResponse.ProtoReflect.Descriptor instead.
func (*CorrectingOrderFillResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{63}
}

func (x *CorrectingOrderFillResponse) GetClientOrderID() string {
	if x != nil {
		return x.ClientOrderID
	}
	return ""
}

func (x *CorrectingOrderFillResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *CorrectingOrderFillResponse) GetIsError() int32 {
	if x != nil {
		return x.IsError
	}
	return 0
}

// ============================================================================
type TradeAccountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID int32 `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
}

func (x *TradeAccountsRequest) Reset() {
	*x = TradeAccountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAccountsRequest) ProtoMessage() {}

func (x *TradeAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAccountsRequest.ProtoReflect.Descriptor instead.
func (*TradeAccountsRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{64}
}

func (x *TradeAccountsRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

// ============================================================================
type TradeAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNumberMessages int32  `protobuf:"varint,1,opt,name=TotalNumberMessages,proto3" json:"TotalNumberMessages,omitempty"`
	MessageNumber       int32  `protobuf:"varint,2,opt,name=MessageNumber,proto3" json:"MessageNumber,omitempty"`
	TradeAccount        string `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	RequestID           int32  `protobuf:"varint,4,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
}

func (x *TradeAccountResponse) Reset() {
	*x = TradeAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAccountResponse) ProtoMessage() {}

func (x *TradeAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAccountResponse.ProtoReflect.Descriptor instead.
func (*TradeAccountResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{65}
}

func (x *TradeAccountResponse) GetTotalNumberMessages() int32 {
	if x != nil {
		return x.TotalNumberMessages
	}
	return 0
}

func (x *TradeAccountResponse) GetMessageNumber() int32 {
	if x != nil {
		return x.MessageNumber
	}
	return 0
}

func (x *TradeAccountResponse) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *TradeAccountResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

// ============================================================================
type ExchangeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID int32 `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
}

func (x *ExchangeListRequest) Reset() {
	*x = ExchangeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListRequest) ProtoMessage() {}

func (x *ExchangeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListRequest.ProtoReflect.Descriptor instead.
func (*ExchangeListRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{66}
}

func (x *ExchangeListRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

// ============================================================================
type ExchangeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID      int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Exchange       string `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	IsFinalMessage uint32 `protobuf:"varint,3,opt,name=IsFinalMessage,proto3" json:"IsFinalMessage,omitempty"`
	Description    string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *ExchangeListResponse) Reset() {
	*x = ExchangeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListResponse) ProtoMessage() {}

func (x *ExchangeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListResponse.ProtoReflect.Descriptor instead.
func (*ExchangeListResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{67}
}

func (x *ExchangeListResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *ExchangeListResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ExchangeListResponse) GetIsFinalMessage() uint32 {
	if x != nil {
		return x.IsFinalMessage
	}
	return 0
}

func (x *ExchangeListResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ============================================================================
type SymbolsForExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32             `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Exchange      string            `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	SecurityType  SecurityTypeEnum  `protobuf:"varint,3,opt,name=SecurityType,proto3,enum=DTC_PB.SecurityTypeEnum" json:"SecurityType,omitempty"`
	RequestAction RequestActionEnum `protobuf:"varint,4,opt,name=RequestAction,proto3,enum=DTC_PB.RequestActionEnum" json:"RequestAction,omitempty"`
	Symbol        string            `protobuf:"bytes,5,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
}

func (x *SymbolsForExchangeRequest) Reset() {
	*x = SymbolsForExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolsForExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolsForExchangeRequest) ProtoMessage() {}

func (x *SymbolsForExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolsForExchangeRequest.ProtoReflect.Descriptor instead.
func (*SymbolsForExchangeRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{68}
}

func (x *SymbolsForExchangeRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *SymbolsForExchangeRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SymbolsForExchangeRequest) GetSecurityType() SecurityTypeEnum {
	if x != nil {
		return x.SecurityType
	}
	return SecurityTypeEnum_SECURITY_TYPE_UNSET
}

func (x *SymbolsForExchangeRequest) GetRequestAction() RequestActionEnum {
	if x != nil {
		return x.RequestAction
	}
	return RequestActionEnum_REQUEST_ACTION_UNSET
}

func (x *SymbolsForExchangeRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

// ============================================================================
type UnderlyingSymbolsForExchangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    int32            `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Exchange     string           `protobuf:"bytes,2,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	SecurityType SecurityTypeEnum `protobuf:"varint,3,opt,name=SecurityType,proto3,enum=DTC_PB.SecurityTypeEnum" json:"SecurityType,omitempty"`
}

func (x *UnderlyingSymbolsForExchangeRequest) Reset() {
	*x = UnderlyingSymbolsForExchangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnderlyingSymbolsForExchangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderlyingSymbolsForExchangeRequest) ProtoMessage() {}

func (x *UnderlyingSymbolsForExchangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderlyingSymbolsForExchangeRequest.ProtoReflect.Descriptor instead.
func (*UnderlyingSymbolsForExchangeRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{69}
}

func (x *UnderlyingSymbolsForExchangeRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *UnderlyingSymbolsForExchangeRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *UnderlyingSymbolsForExchangeRequest) GetSecurityType() SecurityTypeEnum {
	if x != nil {
		return x.SecurityType
	}
	return SecurityTypeEnum_SECURITY_TYPE_UNSET
}

// ============================================================================
type SymbolsForUnderlyingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID        int32            `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	UnderlyingSymbol string           `protobuf:"bytes,2,opt,name=UnderlyingSymbol,proto3" json:"UnderlyingSymbol,omitempty"`
	Exchange         string           `protobuf:"bytes,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	SecurityType     SecurityTypeEnum `protobuf:"varint,4,opt,name=SecurityType,proto3,enum=DTC_PB.SecurityTypeEnum" json:"SecurityType,omitempty"`
}

func (x *SymbolsForUnderlyingRequest) Reset() {
	*x = SymbolsForUnderlyingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolsForUnderlyingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolsForUnderlyingRequest) ProtoMessage() {}

func (x *SymbolsForUnderlyingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolsForUnderlyingRequest.ProtoReflect.Descriptor instead.
func (*SymbolsForUnderlyingRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{70}
}

func (x *SymbolsForUnderlyingRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *SymbolsForUnderlyingRequest) GetUnderlyingSymbol() string {
	if x != nil {
		return x.UnderlyingSymbol
	}
	return ""
}

func (x *SymbolsForUnderlyingRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SymbolsForUnderlyingRequest) GetSecurityType() SecurityTypeEnum {
	if x != nil {
		return x.SecurityType
	}
	return SecurityTypeEnum_SECURITY_TYPE_UNSET
}

// ============================================================================
type SymbolSearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    int32            `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	SearchText   string           `protobuf:"bytes,2,opt,name=SearchText,proto3" json:"SearchText,omitempty"`
	Exchange     string           `protobuf:"bytes,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	SecurityType SecurityTypeEnum `protobuf:"varint,4,opt,name=SecurityType,proto3,enum=DTC_PB.SecurityTypeEnum" json:"SecurityType,omitempty"`
	SearchType   SearchTypeEnum   `protobuf:"varint,5,opt,name=SearchType,proto3,enum=DTC_PB.SearchTypeEnum" json:"SearchType,omitempty"`
}

func (x *SymbolSearchRequest) Reset() {
	*x = SymbolSearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolSearchRequest) ProtoMessage() {}

func (x *SymbolSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolSearchRequest.ProtoReflect.Descriptor instead.
func (*SymbolSearchRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{71}
}

func (x *SymbolSearchRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *SymbolSearchRequest) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *SymbolSearchRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SymbolSearchRequest) GetSecurityType() SecurityTypeEnum {
	if x != nil {
		return x.SecurityType
	}
	return SecurityTypeEnum_SECURITY_TYPE_UNSET
}

func (x *SymbolSearchRequest) GetSearchType() SearchTypeEnum {
	if x != nil {
		return x.SearchType
	}
	return SearchTypeEnum_SEARCH_TYPE_UNSET
}

// ============================================================================
type SecurityDefinitionForSymbolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Symbol    string `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange  string `protobuf:"bytes,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
}

func (x *SecurityDefinitionForSymbolRequest) Reset() {
	*x = SecurityDefinitionForSymbolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityDefinitionForSymbolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDefinitionForSymbolRequest) ProtoMessage() {}

func (x *SecurityDefinitionForSymbolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDefinitionForSymbolRequest.ProtoReflect.Descriptor instead.
func (*SecurityDefinitionForSymbolRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{72}
}

func (x *SecurityDefinitionForSymbolRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *SecurityDefinitionForSymbolRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SecurityDefinitionForSymbolRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

// ============================================================================
type SecurityDefinitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                    int32                  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Symbol                       string                 `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                     string                 `protobuf:"bytes,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	SecurityType                 SecurityTypeEnum       `protobuf:"varint,4,opt,name=SecurityType,proto3,enum=DTC_PB.SecurityTypeEnum" json:"SecurityType,omitempty"`
	Description                  string                 `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	MinPriceIncrement            float32                `protobuf:"fixed32,6,opt,name=MinPriceIncrement,proto3" json:"MinPriceIncrement,omitempty"`
	PriceDisplayFormat           PriceDisplayFormatEnum `protobuf:"varint,7,opt,name=PriceDisplayFormat,proto3,enum=DTC_PB.PriceDisplayFormatEnum" json:"PriceDisplayFormat,omitempty"`
	CurrencyValuePerIncrement    float32                `protobuf:"fixed32,8,opt,name=CurrencyValuePerIncrement,proto3" json:"CurrencyValuePerIncrement,omitempty"`
	IsFinalMessage               uint32                 `protobuf:"varint,9,opt,name=IsFinalMessage,proto3" json:"IsFinalMessage,omitempty"`
	FloatToIntPriceMultiplier    float32                `protobuf:"fixed32,10,opt,name=FloatToIntPriceMultiplier,proto3" json:"FloatToIntPriceMultiplier,omitempty"`
	IntToFloatPriceDivisor       float32                `protobuf:"fixed32,11,opt,name=IntToFloatPriceDivisor,proto3" json:"IntToFloatPriceDivisor,omitempty"`
	UnderlyingSymbol             string                 `protobuf:"bytes,12,opt,name=UnderlyingSymbol,proto3" json:"UnderlyingSymbol,omitempty"`
	UpdatesBidAskOnly            uint32                 `protobuf:"varint,13,opt,name=UpdatesBidAskOnly,proto3" json:"UpdatesBidAskOnly,omitempty"`
	StrikePrice                  float32                `protobuf:"fixed32,14,opt,name=StrikePrice,proto3" json:"StrikePrice,omitempty"`
	PutOrCall                    PutCallEnum            `protobuf:"varint,15,opt,name=PutOrCall,proto3,enum=DTC_PB.PutCallEnum" json:"PutOrCall,omitempty"`
	ShortInterest                uint32                 `protobuf:"varint,16,opt,name=ShortInterest,proto3" json:"ShortInterest,omitempty"`
	SecurityExpirationDate       int32                  `protobuf:"fixed32,17,opt,name=SecurityExpirationDate,proto3" json:"SecurityExpirationDate,omitempty"`
	BuyRolloverInterest          float32                `protobuf:"fixed32,18,opt,name=BuyRolloverInterest,proto3" json:"BuyRolloverInterest,omitempty"`
	SellRolloverInterest         float32                `protobuf:"fixed32,19,opt,name=SellRolloverInterest,proto3" json:"SellRolloverInterest,omitempty"`
	EarningsPerShare             float32                `protobuf:"fixed32,20,opt,name=EarningsPerShare,proto3" json:"EarningsPerShare,omitempty"`
	SharesOutstanding            uint32                 `protobuf:"varint,21,opt,name=SharesOutstanding,proto3" json:"SharesOutstanding,omitempty"`
	IntToFloatQuantityDivisor    float32                `protobuf:"fixed32,22,opt,name=IntToFloatQuantityDivisor,proto3" json:"IntToFloatQuantityDivisor,omitempty"`
	HasMarketDepthData           uint32                 `protobuf:"varint,23,opt,name=HasMarketDepthData,proto3" json:"HasMarketDepthData,omitempty"`
	DisplayPriceMultiplier       float32                `protobuf:"fixed32,24,opt,name=DisplayPriceMultiplier,proto3" json:"DisplayPriceMultiplier,omitempty"`
	ExchangeSymbol               string                 `protobuf:"bytes,25,opt,name=ExchangeSymbol,proto3" json:"ExchangeSymbol,omitempty"`
	InitialMarginRequirement     float32                `protobuf:"fixed32,26,opt,name=InitialMarginRequirement,proto3" json:"InitialMarginRequirement,omitempty"`
	MaintenanceMarginRequirement float32                `protobuf:"fixed32,27,opt,name=MaintenanceMarginRequirement,proto3" json:"MaintenanceMarginRequirement,omitempty"`
	Currency                     string                 `protobuf:"bytes,28,opt,name=Currency,proto3" json:"Currency,omitempty"`
	ContractSize                 float32                `protobuf:"fixed32,29,opt,name=ContractSize,proto3" json:"ContractSize,omitempty"`
	OpenInterest                 uint32                 `protobuf:"varint,30,opt,name=OpenInterest,proto3" json:"OpenInterest,omitempty"`
	RolloverDate                 int32                  `protobuf:"fixed32,31,opt,name=RolloverDate,proto3" json:"RolloverDate,omitempty"`
	IsDelayed                    uint32                 `protobuf:"varint,32,opt,name=IsDelayed,proto3" json:"IsDelayed,omitempty"`
	SecurityIdentifier           int64                  `protobuf:"varint,33,opt,name=SecurityIdentifier,proto3" json:"SecurityIdentifier,omitempty"`
	ProductIdentifier            string                 `protobuf:"bytes,34,opt,name=ProductIdentifier,proto3" json:"ProductIdentifier,omitempty"`
}

func (x *SecurityDefinitionResponse) Reset() {
	*x = SecurityDefinitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityDefinitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDefinitionResponse) ProtoMessage() {}

func (x *SecurityDefinitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDefinitionResponse.ProtoReflect.Descriptor instead.
func (*SecurityDefinitionResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{73}
}

func (x *SecurityDefinitionResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SecurityDefinitionResponse) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *SecurityDefinitionResponse) GetSecurityType() SecurityTypeEnum {
	if x != nil {
		return x.SecurityType
	}
	return SecurityTypeEnum_SECURITY_TYPE_UNSET
}

func (x *SecurityDefinitionResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SecurityDefinitionResponse) GetMinPriceIncrement() float32 {
	if x != nil {
		return x.MinPriceIncrement
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetPriceDisplayFormat() PriceDisplayFormatEnum {
	if x != nil {
		return x.PriceDisplayFormat
	}
	return PriceDisplayFormatEnum_PRICE_DISPLAY_FORMAT_DECIMAL_0
}

func (x *SecurityDefinitionResponse) GetCurrencyValuePerIncrement() float32 {
	if x != nil {
		return x.CurrencyValuePerIncrement
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetIsFinalMessage() uint32 {
	if x != nil {
		return x.IsFinalMessage
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetFloatToIntPriceMultiplier() float32 {
	if x != nil {
		return x.FloatToIntPriceMultiplier
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetIntToFloatPriceDivisor() float32 {
	if x != nil {
		return x.IntToFloatPriceDivisor
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetUnderlyingSymbol() string {
	if x != nil {
		return x.UnderlyingSymbol
	}
	return ""
}

func (x *SecurityDefinitionResponse) GetUpdatesBidAskOnly() uint32 {
	if x != nil {
		return x.UpdatesBidAskOnly
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetStrikePrice() float32 {
	if x != nil {
		return x.StrikePrice
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetPutOrCall() PutCallEnum {
	if x != nil {
		return x.PutOrCall
	}
	return PutCallEnum_PC_UNSET
}

func (x *SecurityDefinitionResponse) GetShortInterest() uint32 {
	if x != nil {
		return x.ShortInterest
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetSecurityExpirationDate() int32 {
	if x != nil {
		return x.SecurityExpirationDate
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetBuyRolloverInterest() float32 {
	if x != nil {
		return x.BuyRolloverInterest
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetSellRolloverInterest() float32 {
	if x != nil {
		return x.SellRolloverInterest
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetEarningsPerShare() float32 {
	if x != nil {
		return x.EarningsPerShare
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetSharesOutstanding() uint32 {
	if x != nil {
		return x.SharesOutstanding
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetIntToFloatQuantityDivisor() float32 {
	if x != nil {
		return x.IntToFloatQuantityDivisor
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetHasMarketDepthData() uint32 {
	if x != nil {
		return x.HasMarketDepthData
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetDisplayPriceMultiplier() float32 {
	if x != nil {
		return x.DisplayPriceMultiplier
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetExchangeSymbol() string {
	if x != nil {
		return x.ExchangeSymbol
	}
	return ""
}

func (x *SecurityDefinitionResponse) GetInitialMarginRequirement() float32 {
	if x != nil {
		return x.InitialMarginRequirement
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetMaintenanceMarginRequirement() float32 {
	if x != nil {
		return x.MaintenanceMarginRequirement
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *SecurityDefinitionResponse) GetContractSize() float32 {
	if x != nil {
		return x.ContractSize
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetOpenInterest() uint32 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetRolloverDate() int32 {
	if x != nil {
		return x.RolloverDate
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetIsDelayed() uint32 {
	if x != nil {
		return x.IsDelayed
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetSecurityIdentifier() int64 {
	if x != nil {
		return x.SecurityIdentifier
	}
	return 0
}

func (x *SecurityDefinitionResponse) GetProductIdentifier() string {
	if x != nil {
		return x.ProductIdentifier
	}
	return ""
}

// ============================================================================
type SecurityDefinitionReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *SecurityDefinitionReject) Reset() {
	*x = SecurityDefinitionReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityDefinitionReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityDefinitionReject) ProtoMessage() {}

func (x *SecurityDefinitionReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityDefinitionReject.ProtoReflect.Descriptor instead.
func (*SecurityDefinitionReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{74}
}

func (x *SecurityDefinitionReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *SecurityDefinitionReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type AccountBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TradeAccount string `protobuf:"bytes,2,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
}

func (x *AccountBalanceRequest) Reset() {
	*x = AccountBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceRequest) ProtoMessage() {}

func (x *AccountBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceRequest.ProtoReflect.Descriptor instead.
func (*AccountBalanceRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{75}
}

func (x *AccountBalanceRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *AccountBalanceRequest) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

// ============================================================================
type AccountBalanceReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *AccountBalanceReject) Reset() {
	*x = AccountBalanceReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalanceReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceReject) ProtoMessage() {}

func (x *AccountBalanceReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceReject.ProtoReflect.Descriptor instead.
func (*AccountBalanceReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{76}
}

func (x *AccountBalanceReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *AccountBalanceReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type AccountBalanceUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                            int32   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	CashBalance                          float64 `protobuf:"fixed64,2,opt,name=CashBalance,proto3" json:"CashBalance,omitempty"`
	BalanceAvailableForNewPositions      float64 `protobuf:"fixed64,3,opt,name=BalanceAvailableForNewPositions,proto3" json:"BalanceAvailableForNewPositions,omitempty"`
	AccountCurrency                      string  `protobuf:"bytes,4,opt,name=AccountCurrency,proto3" json:"AccountCurrency,omitempty"`
	TradeAccount                         string  `protobuf:"bytes,5,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	SecuritiesValue                      float64 `protobuf:"fixed64,6,opt,name=SecuritiesValue,proto3" json:"SecuritiesValue,omitempty"` // Not including cash
	MarginRequirement                    float64 `protobuf:"fixed64,7,opt,name=MarginRequirement,proto3" json:"MarginRequirement,omitempty"`
	TotalNumberMessages                  int32   `protobuf:"varint,8,opt,name=TotalNumberMessages,proto3" json:"TotalNumberMessages,omitempty"`
	MessageNumber                        int32   `protobuf:"varint,9,opt,name=MessageNumber,proto3" json:"MessageNumber,omitempty"`
	NoAccountBalances                    uint32  `protobuf:"varint,10,opt,name=NoAccountBalances,proto3" json:"NoAccountBalances,omitempty"`
	Unsolicited                          uint32  `protobuf:"varint,11,opt,name=Unsolicited,proto3" json:"Unsolicited,omitempty"`
	OpenPositionsProfitLoss              float64 `protobuf:"fixed64,12,opt,name=OpenPositionsProfitLoss,proto3" json:"OpenPositionsProfitLoss,omitempty"`
	DailyProfitLoss                      float64 `protobuf:"fixed64,13,opt,name=DailyProfitLoss,proto3" json:"DailyProfitLoss,omitempty"`
	InfoText                             string  `protobuf:"bytes,14,opt,name=InfoText,proto3" json:"InfoText,omitempty"`
	TransactionIdentifier                uint64  `protobuf:"varint,15,opt,name=TransactionIdentifier,proto3" json:"TransactionIdentifier,omitempty"`
	DailyNetLossLimit                    float64 `protobuf:"fixed64,16,opt,name=DailyNetLossLimit,proto3" json:"DailyNetLossLimit,omitempty"`
	TrailingAccountValueToLimitPositions float64 `protobuf:"fixed64,17,opt,name=TrailingAccountValueToLimitPositions,proto3" json:"TrailingAccountValueToLimitPositions,omitempty"`
	DailyNetLossLimitReached             uint32  `protobuf:"varint,18,opt,name=DailyNetLossLimitReached,proto3" json:"DailyNetLossLimitReached,omitempty"`
	IsUnderRequiredMargin                uint32  `protobuf:"varint,19,opt,name=IsUnderRequiredMargin,proto3" json:"IsUnderRequiredMargin,omitempty"`
	ClosePositionsAtEndOfDay             uint32  `protobuf:"varint,20,opt,name=ClosePositionsAtEndOfDay,proto3" json:"ClosePositionsAtEndOfDay,omitempty"`
	TradingIsDisabled                    uint32  `protobuf:"varint,21,opt,name=TradingIsDisabled,proto3" json:"TradingIsDisabled,omitempty"`
	Description                          string  `protobuf:"bytes,22,opt,name=Description,proto3" json:"Description,omitempty"`
	IsUnderRequiredAccountValue          uint32  `protobuf:"varint,23,opt,name=IsUnderRequiredAccountValue,proto3" json:"IsUnderRequiredAccountValue,omitempty"`
	TransactionDateTime                  int64   `protobuf:"fixed64,24,opt,name=TransactionDateTime,proto3" json:"TransactionDateTime,omitempty"`
	MarginRequirementFull                float64 `protobuf:"fixed64,25,opt,name=MarginRequirementFull,proto3" json:"MarginRequirementFull,omitempty"`
	MarginRequirementFullPositionsOnly   float64 `protobuf:"fixed64,26,opt,name=MarginRequirementFullPositionsOnly,proto3" json:"MarginRequirementFullPositionsOnly,omitempty"`
	PeakMarginRequirement                float64 `protobuf:"fixed64,27,opt,name=PeakMarginRequirement,proto3" json:"PeakMarginRequirement,omitempty"`
	IntroducingBroker                    string  `protobuf:"bytes,28,opt,name=IntroducingBroker,proto3" json:"IntroducingBroker,omitempty"`
}

func (x *AccountBalanceUpdate) Reset() {
	*x = AccountBalanceUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalanceUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceUpdate) ProtoMessage() {}

func (x *AccountBalanceUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceUpdate.ProtoReflect.Descriptor instead.
func (*AccountBalanceUpdate) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{77}
}

func (x *AccountBalanceUpdate) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *AccountBalanceUpdate) GetCashBalance() float64 {
	if x != nil {
		return x.CashBalance
	}
	return 0
}

func (x *AccountBalanceUpdate) GetBalanceAvailableForNewPositions() float64 {
	if x != nil {
		return x.BalanceAvailableForNewPositions
	}
	return 0
}

func (x *AccountBalanceUpdate) GetAccountCurrency() string {
	if x != nil {
		return x.AccountCurrency
	}
	return ""
}

func (x *AccountBalanceUpdate) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *AccountBalanceUpdate) GetSecuritiesValue() float64 {
	if x != nil {
		return x.SecuritiesValue
	}
	return 0
}

func (x *AccountBalanceUpdate) GetMarginRequirement() float64 {
	if x != nil {
		return x.MarginRequirement
	}
	return 0
}

func (x *AccountBalanceUpdate) GetTotalNumberMessages() int32 {
	if x != nil {
		return x.TotalNumberMessages
	}
	return 0
}

func (x *AccountBalanceUpdate) GetMessageNumber() int32 {
	if x != nil {
		return x.MessageNumber
	}
	return 0
}

func (x *AccountBalanceUpdate) GetNoAccountBalances() uint32 {
	if x != nil {
		return x.NoAccountBalances
	}
	return 0
}

func (x *AccountBalanceUpdate) GetUnsolicited() uint32 {
	if x != nil {
		return x.Unsolicited
	}
	return 0
}

func (x *AccountBalanceUpdate) GetOpenPositionsProfitLoss() float64 {
	if x != nil {
		return x.OpenPositionsProfitLoss
	}
	return 0
}

func (x *AccountBalanceUpdate) GetDailyProfitLoss() float64 {
	if x != nil {
		return x.DailyProfitLoss
	}
	return 0
}

func (x *AccountBalanceUpdate) GetInfoText() string {
	if x != nil {
		return x.InfoText
	}
	return ""
}

func (x *AccountBalanceUpdate) GetTransactionIdentifier() uint64 {
	if x != nil {
		return x.TransactionIdentifier
	}
	return 0
}

func (x *AccountBalanceUpdate) GetDailyNetLossLimit() float64 {
	if x != nil {
		return x.DailyNetLossLimit
	}
	return 0
}

func (x *AccountBalanceUpdate) GetTrailingAccountValueToLimitPositions() float64 {
	if x != nil {
		return x.TrailingAccountValueToLimitPositions
	}
	return 0
}

func (x *AccountBalanceUpdate) GetDailyNetLossLimitReached() uint32 {
	if x != nil {
		return x.DailyNetLossLimitReached
	}
	return 0
}

func (x *AccountBalanceUpdate) GetIsUnderRequiredMargin() uint32 {
	if x != nil {
		return x.IsUnderRequiredMargin
	}
	return 0
}

func (x *AccountBalanceUpdate) GetClosePositionsAtEndOfDay() uint32 {
	if x != nil {
		return x.ClosePositionsAtEndOfDay
	}
	return 0
}

func (x *AccountBalanceUpdate) GetTradingIsDisabled() uint32 {
	if x != nil {
		return x.TradingIsDisabled
	}
	return 0
}

func (x *AccountBalanceUpdate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountBalanceUpdate) GetIsUnderRequiredAccountValue() uint32 {
	if x != nil {
		return x.IsUnderRequiredAccountValue
	}
	return 0
}

func (x *AccountBalanceUpdate) GetTransactionDateTime() int64 {
	if x != nil {
		return x.TransactionDateTime
	}
	return 0
}

func (x *AccountBalanceUpdate) GetMarginRequirementFull() float64 {
	if x != nil {
		return x.MarginRequirementFull
	}
	return 0
}

func (x *AccountBalanceUpdate) GetMarginRequirementFullPositionsOnly() float64 {
	if x != nil {
		return x.MarginRequirementFullPositionsOnly
	}
	return 0
}

func (x *AccountBalanceUpdate) GetPeakMarginRequirement() float64 {
	if x != nil {
		return x.PeakMarginRequirement
	}
	return 0
}

func (x *AccountBalanceUpdate) GetIntroducingBroker() string {
	if x != nil {
		return x.IntroducingBroker
	}
	return ""
}

// ============================================================================
type AccountBalanceAdjustment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    int32   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	CreditAmount float64 `protobuf:"fixed64,2,opt,name=CreditAmount,proto3" json:"CreditAmount,omitempty"`
	DebitAmount  float64 `protobuf:"fixed64,3,opt,name=DebitAmount,proto3" json:"DebitAmount,omitempty"`
	Currency     string  `protobuf:"bytes,4,opt,name=Currency,proto3" json:"Currency,omitempty"`
	Reason       string  `protobuf:"bytes,5,opt,name=Reason,proto3" json:"Reason,omitempty"`
	TradeAccount string  `protobuf:"bytes,6,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
}

func (x *AccountBalanceAdjustment) Reset() {
	*x = AccountBalanceAdjustment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalanceAdjustment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceAdjustment) ProtoMessage() {}

func (x *AccountBalanceAdjustment) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceAdjustment.ProtoReflect.Descriptor instead.
func (*AccountBalanceAdjustment) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{78}
}

func (x *AccountBalanceAdjustment) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *AccountBalanceAdjustment) GetCreditAmount() float64 {
	if x != nil {
		return x.CreditAmount
	}
	return 0
}

func (x *AccountBalanceAdjustment) GetDebitAmount() float64 {
	if x != nil {
		return x.DebitAmount
	}
	return 0
}

func (x *AccountBalanceAdjustment) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *AccountBalanceAdjustment) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AccountBalanceAdjustment) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

// ============================================================================
type AccountBalanceAdjustmentReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID    int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText   string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
	TradeAccount string `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
}

func (x *AccountBalanceAdjustmentReject) Reset() {
	*x = AccountBalanceAdjustmentReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalanceAdjustmentReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceAdjustmentReject) ProtoMessage() {}

func (x *AccountBalanceAdjustmentReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceAdjustmentReject.ProtoReflect.Descriptor instead.
func (*AccountBalanceAdjustmentReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{79}
}

func (x *AccountBalanceAdjustmentReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *AccountBalanceAdjustmentReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

func (x *AccountBalanceAdjustmentReject) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

// ============================================================================
type AccountBalanceAdjustmentComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TransactionID int64   `protobuf:"varint,2,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	TradeAccount  string  `protobuf:"bytes,3,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	NewBalance    float64 `protobuf:"fixed64,4,opt,name=NewBalance,proto3" json:"NewBalance,omitempty"`
}

func (x *AccountBalanceAdjustmentComplete) Reset() {
	*x = AccountBalanceAdjustmentComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBalanceAdjustmentComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceAdjustmentComplete) ProtoMessage() {}

func (x *AccountBalanceAdjustmentComplete) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceAdjustmentComplete.ProtoReflect.Descriptor instead.
func (*AccountBalanceAdjustmentComplete) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{80}
}

func (x *AccountBalanceAdjustmentComplete) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *AccountBalanceAdjustmentComplete) GetTransactionID() int64 {
	if x != nil {
		return x.TransactionID
	}
	return 0
}

func (x *AccountBalanceAdjustmentComplete) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *AccountBalanceAdjustmentComplete) GetNewBalance() float64 {
	if x != nil {
		return x.NewBalance
	}
	return 0
}

// ============================================================================
type HistoricalAccountBalancesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TradeAccount  string `protobuf:"bytes,2,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	StartDateTime int64  `protobuf:"fixed64,3,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
}

func (x *HistoricalAccountBalancesRequest) Reset() {
	*x = HistoricalAccountBalancesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalAccountBalancesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalAccountBalancesRequest) ProtoMessage() {}

func (x *HistoricalAccountBalancesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalAccountBalancesRequest.ProtoReflect.Descriptor instead.
func (*HistoricalAccountBalancesRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{81}
}

func (x *HistoricalAccountBalancesRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalAccountBalancesRequest) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *HistoricalAccountBalancesRequest) GetStartDateTime() int64 {
	if x != nil {
		return x.StartDateTime
	}
	return 0
}

// ============================================================================
type HistoricalAccountBalancesReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *HistoricalAccountBalancesReject) Reset() {
	*x = HistoricalAccountBalancesReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalAccountBalancesReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalAccountBalancesReject) ProtoMessage() {}

func (x *HistoricalAccountBalancesReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalAccountBalancesReject.ProtoReflect.Descriptor instead.
func (*HistoricalAccountBalancesReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{82}
}

func (x *HistoricalAccountBalancesReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalAccountBalancesReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ============================================================================
type HistoricalAccountBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID         int32   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	DateTime          float64 `protobuf:"fixed64,2,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	CashBalance       float64 `protobuf:"fixed64,3,opt,name=CashBalance,proto3" json:"CashBalance,omitempty"`
	AccountCurrency   string  `protobuf:"bytes,4,opt,name=AccountCurrency,proto3" json:"AccountCurrency,omitempty"`
	TradeAccount      string  `protobuf:"bytes,5,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	IsFinalResponse   uint32  `protobuf:"varint,6,opt,name=IsFinalResponse,proto3" json:"IsFinalResponse,omitempty"`
	NoAccountBalances uint32  `protobuf:"varint,7,opt,name=NoAccountBalances,proto3" json:"NoAccountBalances,omitempty"`
	InfoText          string  `protobuf:"bytes,8,opt,name=InfoText,proto3" json:"InfoText,omitempty"`
	TransactionId     string  `protobuf:"bytes,9,opt,name=TransactionId,proto3" json:"TransactionId,omitempty"`
}

func (x *HistoricalAccountBalanceResponse) Reset() {
	*x = HistoricalAccountBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalAccountBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalAccountBalanceResponse) ProtoMessage() {}

func (x *HistoricalAccountBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalAccountBalanceResponse.ProtoReflect.Descriptor instead.
func (*HistoricalAccountBalanceResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{83}
}

func (x *HistoricalAccountBalanceResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalAccountBalanceResponse) GetDateTime() float64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *HistoricalAccountBalanceResponse) GetCashBalance() float64 {
	if x != nil {
		return x.CashBalance
	}
	return 0
}

func (x *HistoricalAccountBalanceResponse) GetAccountCurrency() string {
	if x != nil {
		return x.AccountCurrency
	}
	return ""
}

func (x *HistoricalAccountBalanceResponse) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *HistoricalAccountBalanceResponse) GetIsFinalResponse() uint32 {
	if x != nil {
		return x.IsFinalResponse
	}
	return 0
}

func (x *HistoricalAccountBalanceResponse) GetNoAccountBalances() uint32 {
	if x != nil {
		return x.NoAccountBalances
	}
	return 0
}

func (x *HistoricalAccountBalanceResponse) GetInfoText() string {
	if x != nil {
		return x.InfoText
	}
	return ""
}

func (x *HistoricalAccountBalanceResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// ============================================================================
type UserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMessage    string `protobuf:"bytes,1,opt,name=UserMessage,proto3" json:"UserMessage,omitempty"`
	IsPopupMessage uint32 `protobuf:"varint,2,opt,name=IsPopupMessage,proto3" json:"IsPopupMessage,omitempty"`
}

func (x *UserMessage) Reset() {
	*x = UserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMessage) ProtoMessage() {}

func (x *UserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMessage.ProtoReflect.Descriptor instead.
func (*UserMessage) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{84}
}

func (x *UserMessage) GetUserMessage() string {
	if x != nil {
		return x.UserMessage
	}
	return ""
}

func (x *UserMessage) GetIsPopupMessage() uint32 {
	if x != nil {
		return x.IsPopupMessage
	}
	return 0
}

// ============================================================================
type GeneralLogMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageText string `protobuf:"bytes,3,opt,name=MessageText,proto3" json:"MessageText,omitempty"`
}

func (x *GeneralLogMessage) Reset() {
	*x = GeneralLogMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneralLogMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralLogMessage) ProtoMessage() {}

func (x *GeneralLogMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralLogMessage.ProtoReflect.Descriptor instead.
func (*GeneralLogMessage) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{85}
}

func (x *GeneralLogMessage) GetMessageText() string {
	if x != nil {
		return x.MessageText
	}
	return ""
}

// ==========================================================================
type JournalEntryAdd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JournalEntry string `protobuf:"bytes,1,opt,name=JournalEntry,proto3" json:"JournalEntry,omitempty"`
	DateTime     uint64 `protobuf:"varint,2,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
}

func (x *JournalEntryAdd) Reset() {
	*x = JournalEntryAdd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalEntryAdd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalEntryAdd) ProtoMessage() {}

func (x *JournalEntryAdd) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalEntryAdd.ProtoReflect.Descriptor instead.
func (*JournalEntryAdd) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{86}
}

func (x *JournalEntryAdd) GetJournalEntry() string {
	if x != nil {
		return x.JournalEntry
	}
	return ""
}

func (x *JournalEntryAdd) GetDateTime() uint64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

// ==========================================================================
type JournalEntriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	StartDateTime uint64 `protobuf:"varint,2,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
}

func (x *JournalEntriesRequest) Reset() {
	*x = JournalEntriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalEntriesRequest) ProtoMessage() {}

func (x *JournalEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalEntriesRequest.ProtoReflect.Descriptor instead.
func (*JournalEntriesRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{87}
}

func (x *JournalEntriesRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *JournalEntriesRequest) GetStartDateTime() uint64 {
	if x != nil {
		return x.StartDateTime
	}
	return 0
}

// ==========================================================================
type JournalEntriesReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID  int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText string `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
}

func (x *JournalEntriesReject) Reset() {
	*x = JournalEntriesReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalEntriesReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalEntriesReject) ProtoMessage() {}

func (x *JournalEntriesReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalEntriesReject.ProtoReflect.Descriptor instead.
func (*JournalEntriesReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{88}
}

func (x *JournalEntriesReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *JournalEntriesReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

// ==========================================================================
type JournalEntryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JournalEntry    string `protobuf:"bytes,1,opt,name=JournalEntry,proto3" json:"JournalEntry,omitempty"`
	DateTime        uint64 `protobuf:"varint,2,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	IsFinalResponse uint32 `protobuf:"varint,3,opt,name=IsFinalResponse,proto3" json:"IsFinalResponse,omitempty"`
}

func (x *JournalEntryResponse) Reset() {
	*x = JournalEntryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalEntryResponse) ProtoMessage() {}

func (x *JournalEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalEntryResponse.ProtoReflect.Descriptor instead.
func (*JournalEntryResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{89}
}

func (x *JournalEntryResponse) GetJournalEntry() string {
	if x != nil {
		return x.JournalEntry
	}
	return ""
}

func (x *JournalEntryResponse) GetDateTime() uint64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *JournalEntryResponse) GetIsFinalResponse() uint32 {
	if x != nil {
		return x.IsFinalResponse
	}
	return 0
}

// ============================================================================
type AlertMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageText  string `protobuf:"bytes,3,opt,name=MessageText,proto3" json:"MessageText,omitempty"`
	TradeAccount string `protobuf:"bytes,4,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
}

func (x *AlertMessage) Reset() {
	*x = AlertMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertMessage) ProtoMessage() {}

func (x *AlertMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertMessage.ProtoReflect.Descriptor instead.
func (*AlertMessage) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{90}
}

func (x *AlertMessage) GetMessageText() string {
	if x != nil {
		return x.MessageText
	}
	return ""
}

func (x *AlertMessage) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

// ============================================================================
type HistoricalPriceDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                        int32                      `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Symbol                           string                     `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange                         string                     `protobuf:"bytes,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	RecordInterval                   HistoricalDataIntervalEnum `protobuf:"varint,4,opt,name=RecordInterval,proto3,enum=DTC_PB.HistoricalDataIntervalEnum" json:"RecordInterval,omitempty"`
	StartDateTime                    int64                      `protobuf:"fixed64,5,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
	EndDateTime                      int64                      `protobuf:"fixed64,6,opt,name=EndDateTime,proto3" json:"EndDateTime,omitempty"`
	MaxDaysToReturn                  uint32                     `protobuf:"varint,7,opt,name=MaxDaysToReturn,proto3" json:"MaxDaysToReturn,omitempty"`
	UseZLibCompression               uint32                     `protobuf:"varint,8,opt,name=UseZLibCompression,proto3" json:"UseZLibCompression,omitempty"`
	RequestDividendAdjustedStockData uint32                     `protobuf:"varint,9,opt,name=RequestDividendAdjustedStockData,proto3" json:"RequestDividendAdjustedStockData,omitempty"`
	Integer_1                        uint32                     `protobuf:"varint,10,opt,name=Integer_1,json=Integer1,proto3" json:"Integer_1,omitempty"`
}

func (x *HistoricalPriceDataRequest) Reset() {
	*x = HistoricalPriceDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceDataRequest) ProtoMessage() {}

func (x *HistoricalPriceDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceDataRequest.ProtoReflect.Descriptor instead.
func (*HistoricalPriceDataRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{91}
}

func (x *HistoricalPriceDataRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalPriceDataRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *HistoricalPriceDataRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *HistoricalPriceDataRequest) GetRecordInterval() HistoricalDataIntervalEnum {
	if x != nil {
		return x.RecordInterval
	}
	return HistoricalDataIntervalEnum_INTERVAL_TICK
}

func (x *HistoricalPriceDataRequest) GetStartDateTime() int64 {
	if x != nil {
		return x.StartDateTime
	}
	return 0
}

func (x *HistoricalPriceDataRequest) GetEndDateTime() int64 {
	if x != nil {
		return x.EndDateTime
	}
	return 0
}

func (x *HistoricalPriceDataRequest) GetMaxDaysToReturn() uint32 {
	if x != nil {
		return x.MaxDaysToReturn
	}
	return 0
}

func (x *HistoricalPriceDataRequest) GetUseZLibCompression() uint32 {
	if x != nil {
		return x.UseZLibCompression
	}
	return 0
}

func (x *HistoricalPriceDataRequest) GetRequestDividendAdjustedStockData() uint32 {
	if x != nil {
		return x.RequestDividendAdjustedStockData
	}
	return 0
}

func (x *HistoricalPriceDataRequest) GetInteger_1() uint32 {
	if x != nil {
		return x.Integer_1
	}
	return 0
}

// ============================================================================
type HistoricalPriceDataResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID              int32                      `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RecordInterval         HistoricalDataIntervalEnum `protobuf:"varint,2,opt,name=RecordInterval,proto3,enum=DTC_PB.HistoricalDataIntervalEnum" json:"RecordInterval,omitempty"`
	UseZLibCompression     uint32                     `protobuf:"varint,3,opt,name=UseZLibCompression,proto3" json:"UseZLibCompression,omitempty"`
	NoRecordsToReturn      uint32                     `protobuf:"varint,4,opt,name=NoRecordsToReturn,proto3" json:"NoRecordsToReturn,omitempty"`
	IntToFloatPriceDivisor float32                    `protobuf:"fixed32,5,opt,name=IntToFloatPriceDivisor,proto3" json:"IntToFloatPriceDivisor,omitempty"`
}

func (x *HistoricalPriceDataResponseHeader) Reset() {
	*x = HistoricalPriceDataResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceDataResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceDataResponseHeader) ProtoMessage() {}

func (x *HistoricalPriceDataResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceDataResponseHeader.ProtoReflect.Descriptor instead.
func (*HistoricalPriceDataResponseHeader) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{92}
}

func (x *HistoricalPriceDataResponseHeader) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalPriceDataResponseHeader) GetRecordInterval() HistoricalDataIntervalEnum {
	if x != nil {
		return x.RecordInterval
	}
	return HistoricalDataIntervalEnum_INTERVAL_TICK
}

func (x *HistoricalPriceDataResponseHeader) GetUseZLibCompression() uint32 {
	if x != nil {
		return x.UseZLibCompression
	}
	return 0
}

func (x *HistoricalPriceDataResponseHeader) GetNoRecordsToReturn() uint32 {
	if x != nil {
		return x.NoRecordsToReturn
	}
	return 0
}

func (x *HistoricalPriceDataResponseHeader) GetIntToFloatPriceDivisor() float32 {
	if x != nil {
		return x.IntToFloatPriceDivisor
	}
	return 0
}

// ============================================================================
type HistoricalPriceDataReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID          int32                                   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText         string                                  `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
	RejectReasonCode   HistoricalPriceDataRejectReasonCodeEnum `protobuf:"varint,3,opt,name=RejectReasonCode,proto3,enum=DTC_PB.HistoricalPriceDataRejectReasonCodeEnum" json:"RejectReasonCode,omitempty"`
	RetryTimeInSeconds uint32                                  `protobuf:"varint,4,opt,name=RetryTimeInSeconds,proto3" json:"RetryTimeInSeconds,omitempty"`
}

func (x *HistoricalPriceDataReject) Reset() {
	*x = HistoricalPriceDataReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceDataReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceDataReject) ProtoMessage() {}

func (x *HistoricalPriceDataReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceDataReject.ProtoReflect.Descriptor instead.
func (*HistoricalPriceDataReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{93}
}

func (x *HistoricalPriceDataReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalPriceDataReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

func (x *HistoricalPriceDataReject) GetRejectReasonCode() HistoricalPriceDataRejectReasonCodeEnum {
	if x != nil {
		return x.RejectReasonCode
	}
	return HistoricalPriceDataRejectReasonCodeEnum_HPDR_UNSET
}

func (x *HistoricalPriceDataReject) GetRetryTimeInSeconds() uint32 {
	if x != nil {
		return x.RetryTimeInSeconds
	}
	return 0
}

// ============================================================================
type HistoricalPriceDataRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	StartDateTime int64   `protobuf:"fixed64,2,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
	OpenPrice     float64 `protobuf:"fixed64,3,opt,name=OpenPrice,proto3" json:"OpenPrice,omitempty"`
	HighPrice     float64 `protobuf:"fixed64,4,opt,name=HighPrice,proto3" json:"HighPrice,omitempty"`
	LowPrice      float64 `protobuf:"fixed64,5,opt,name=LowPrice,proto3" json:"LowPrice,omitempty"`
	LastPrice     float64 `protobuf:"fixed64,6,opt,name=LastPrice,proto3" json:"LastPrice,omitempty"`
	Volume        float64 `protobuf:"fixed64,7,opt,name=Volume,proto3" json:"Volume,omitempty"`
	NumTrades     uint32  `protobuf:"varint,8,opt,name=NumTrades,proto3" json:"NumTrades,omitempty"`
	BidVolume     float64 `protobuf:"fixed64,9,opt,name=BidVolume,proto3" json:"BidVolume,omitempty"`
	AskVolume     float64 `protobuf:"fixed64,10,opt,name=AskVolume,proto3" json:"AskVolume,omitempty"`
	IsFinalRecord uint32  `protobuf:"varint,11,opt,name=IsFinalRecord,proto3" json:"IsFinalRecord,omitempty"`
}

func (x *HistoricalPriceDataRecordResponse) Reset() {
	*x = HistoricalPriceDataRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceDataRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceDataRecordResponse) ProtoMessage() {}

func (x *HistoricalPriceDataRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceDataRecordResponse.ProtoReflect.Descriptor instead.
func (*HistoricalPriceDataRecordResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{94}
}

func (x *HistoricalPriceDataRecordResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetStartDateTime() int64 {
	if x != nil {
		return x.StartDateTime
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetNumTrades() uint32 {
	if x != nil {
		return x.NumTrades
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetBidVolume() float64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetAskVolume() float64 {
	if x != nil {
		return x.AskVolume
	}
	return 0
}

func (x *HistoricalPriceDataRecordResponse) GetIsFinalRecord() uint32 {
	if x != nil {
		return x.IsFinalRecord
	}
	return 0
}

// ============================================================================
type HistoricalPriceDataTickRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32          `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	DateTime      float64        `protobuf:"fixed64,2,opt,name=DateTime,proto3" json:"DateTime,omitempty"`
	AtBidOrAsk    AtBidOrAskEnum `protobuf:"varint,3,opt,name=AtBidOrAsk,proto3,enum=DTC_PB.AtBidOrAskEnum" json:"AtBidOrAsk,omitempty"`
	Price         float64        `protobuf:"fixed64,4,opt,name=Price,proto3" json:"Price,omitempty"`
	Volume        float64        `protobuf:"fixed64,5,opt,name=Volume,proto3" json:"Volume,omitempty"`
	IsFinalRecord uint32         `protobuf:"varint,6,opt,name=IsFinalRecord,proto3" json:"IsFinalRecord,omitempty"`
}

func (x *HistoricalPriceDataTickRecordResponse) Reset() {
	*x = HistoricalPriceDataTickRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceDataTickRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceDataTickRecordResponse) ProtoMessage() {}

func (x *HistoricalPriceDataTickRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceDataTickRecordResponse.ProtoReflect.Descriptor instead.
func (*HistoricalPriceDataTickRecordResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{95}
}

func (x *HistoricalPriceDataTickRecordResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalPriceDataTickRecordResponse) GetDateTime() float64 {
	if x != nil {
		return x.DateTime
	}
	return 0
}

func (x *HistoricalPriceDataTickRecordResponse) GetAtBidOrAsk() AtBidOrAskEnum {
	if x != nil {
		return x.AtBidOrAsk
	}
	return AtBidOrAskEnum_BID_ASK_UNSET
}

func (x *HistoricalPriceDataTickRecordResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *HistoricalPriceDataTickRecordResponse) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *HistoricalPriceDataTickRecordResponse) GetIsFinalRecord() uint32 {
	if x != nil {
		return x.IsFinalRecord
	}
	return 0
}

// ============================================================================
type HistoricalPriceDataResponseTrailer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID               int32 `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	FinalRecordLastDateTime int64 `protobuf:"varint,2,opt,name=FinalRecordLastDateTime,proto3" json:"FinalRecordLastDateTime,omitempty"`
}

func (x *HistoricalPriceDataResponseTrailer) Reset() {
	*x = HistoricalPriceDataResponseTrailer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalPriceDataResponseTrailer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalPriceDataResponseTrailer) ProtoMessage() {}

func (x *HistoricalPriceDataResponseTrailer) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalPriceDataResponseTrailer.ProtoReflect.Descriptor instead.
func (*HistoricalPriceDataResponseTrailer) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{96}
}

func (x *HistoricalPriceDataResponseTrailer) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalPriceDataResponseTrailer) GetFinalRecordLastDateTime() int64 {
	if x != nil {
		return x.FinalRecordLastDateTime
	}
	return 0
}

// ============================================================================
type HistoricalMarketDepthDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID          int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	Symbol             string `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Exchange           string `protobuf:"bytes,3,opt,name=Exchange,proto3" json:"Exchange,omitempty"`
	StartDateTime      int64  `protobuf:"varint,4,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
	EndDateTime        int64  `protobuf:"varint,5,opt,name=EndDateTime,proto3" json:"EndDateTime,omitempty"`
	UseZLibCompression uint32 `protobuf:"varint,6,opt,name=UseZLibCompression,proto3" json:"UseZLibCompression,omitempty"`
	Integer_1          uint32 `protobuf:"varint,7,opt,name=Integer_1,json=Integer1,proto3" json:"Integer_1,omitempty"`
}

func (x *HistoricalMarketDepthDataRequest) Reset() {
	*x = HistoricalMarketDepthDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalMarketDepthDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalMarketDepthDataRequest) ProtoMessage() {}

func (x *HistoricalMarketDepthDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalMarketDepthDataRequest.ProtoReflect.Descriptor instead.
func (*HistoricalMarketDepthDataRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{97}
}

func (x *HistoricalMarketDepthDataRequest) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalMarketDepthDataRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *HistoricalMarketDepthDataRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *HistoricalMarketDepthDataRequest) GetStartDateTime() int64 {
	if x != nil {
		return x.StartDateTime
	}
	return 0
}

func (x *HistoricalMarketDepthDataRequest) GetEndDateTime() int64 {
	if x != nil {
		return x.EndDateTime
	}
	return 0
}

func (x *HistoricalMarketDepthDataRequest) GetUseZLibCompression() uint32 {
	if x != nil {
		return x.UseZLibCompression
	}
	return 0
}

func (x *HistoricalMarketDepthDataRequest) GetInteger_1() uint32 {
	if x != nil {
		return x.Integer_1
	}
	return 0
}

// ============================================================================
type HistoricalMarketDepthDataResponseHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID          int32  `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	UseZLibCompression uint32 `protobuf:"varint,2,opt,name=UseZLibCompression,proto3" json:"UseZLibCompression,omitempty"`
	NoRecordsToReturn  uint32 `protobuf:"varint,3,opt,name=NoRecordsToReturn,proto3" json:"NoRecordsToReturn,omitempty"`
}

func (x *HistoricalMarketDepthDataResponseHeader) Reset() {
	*x = HistoricalMarketDepthDataResponseHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalMarketDepthDataResponseHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalMarketDepthDataResponseHeader) ProtoMessage() {}

func (x *HistoricalMarketDepthDataResponseHeader) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalMarketDepthDataResponseHeader.ProtoReflect.Descriptor instead.
func (*HistoricalMarketDepthDataResponseHeader) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{98}
}

func (x *HistoricalMarketDepthDataResponseHeader) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalMarketDepthDataResponseHeader) GetUseZLibCompression() uint32 {
	if x != nil {
		return x.UseZLibCompression
	}
	return 0
}

func (x *HistoricalMarketDepthDataResponseHeader) GetNoRecordsToReturn() uint32 {
	if x != nil {
		return x.NoRecordsToReturn
	}
	return 0
}

// ============================================================================
type HistoricalMarketDepthDataReject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID        int32                                   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	RejectText       string                                  `protobuf:"bytes,2,opt,name=RejectText,proto3" json:"RejectText,omitempty"`
	RejectReasonCode HistoricalPriceDataRejectReasonCodeEnum `protobuf:"varint,3,opt,name=RejectReasonCode,proto3,enum=DTC_PB.HistoricalPriceDataRejectReasonCodeEnum" json:"RejectReasonCode,omitempty"`
}

func (x *HistoricalMarketDepthDataReject) Reset() {
	*x = HistoricalMarketDepthDataReject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalMarketDepthDataReject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalMarketDepthDataReject) ProtoMessage() {}

func (x *HistoricalMarketDepthDataReject) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalMarketDepthDataReject.ProtoReflect.Descriptor instead.
func (*HistoricalMarketDepthDataReject) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{99}
}

func (x *HistoricalMarketDepthDataReject) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalMarketDepthDataReject) GetRejectText() string {
	if x != nil {
		return x.RejectText
	}
	return ""
}

func (x *HistoricalMarketDepthDataReject) GetRejectReasonCode() HistoricalPriceDataRejectReasonCodeEnum {
	if x != nil {
		return x.RejectReasonCode
	}
	return HistoricalPriceDataRejectReasonCodeEnum_HPDR_UNSET
}

// ============================================================================
type HistoricalMarketDepthDataRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID     int32   `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	StartDateTime int64   `protobuf:"varint,2,opt,name=StartDateTime,proto3" json:"StartDateTime,omitempty"`
	Command       uint32  `protobuf:"varint,3,opt,name=Command,proto3" json:"Command,omitempty"`
	Flags         uint32  `protobuf:"varint,4,opt,name=Flags,proto3" json:"Flags,omitempty"`
	NumOrders     uint32  `protobuf:"varint,5,opt,name=NumOrders,proto3" json:"NumOrders,omitempty"`
	Price         float32 `protobuf:"fixed32,6,opt,name=Price,proto3" json:"Price,omitempty"`
	Quantity      uint32  `protobuf:"varint,7,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	IsFinalRecord uint32  `protobuf:"varint,8,opt,name=IsFinalRecord,proto3" json:"IsFinalRecord,omitempty"`
}

func (x *HistoricalMarketDepthDataRecordResponse) Reset() {
	*x = HistoricalMarketDepthDataRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalMarketDepthDataRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalMarketDepthDataRecordResponse) ProtoMessage() {}

func (x *HistoricalMarketDepthDataRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalMarketDepthDataRecordResponse.ProtoReflect.Descriptor instead.
func (*HistoricalMarketDepthDataRecordResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{100}
}

func (x *HistoricalMarketDepthDataRecordResponse) GetRequestID() int32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *HistoricalMarketDepthDataRecordResponse) GetStartDateTime() int64 {
	if x != nil {
		return x.StartDateTime
	}
	return 0
}

func (x *HistoricalMarketDepthDataRecordResponse) GetCommand() uint32 {
	if x != nil {
		return x.Command
	}
	return 0
}

func (x *HistoricalMarketDepthDataRecordResponse) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *HistoricalMarketDepthDataRecordResponse) GetNumOrders() uint32 {
	if x != nil {
		return x.NumOrders
	}
	return 0
}

func (x *HistoricalMarketDepthDataRecordResponse) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *HistoricalMarketDepthDataRecordResponse) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *HistoricalMarketDepthDataRecordResponse) GetIsFinalRecord() uint32 {
	if x != nil {
		return x.IsFinalRecord
	}
	return 0
}

// ============================================================================
type TradeAccountTradingIsDisabledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                             uint32                `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TradeAccount                          string                `protobuf:"bytes,2,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	SetTradingIsDisabled                  TradingIsDisabledEnum `protobuf:"varint,3,opt,name=SetTradingIsDisabled,proto3,enum=DTC_PB.TradingIsDisabledEnum" json:"SetTradingIsDisabled,omitempty"`
	SetDisableTradingForParentAccountOnly TradingIsDisabledEnum `protobuf:"varint,4,opt,name=SetDisableTradingForParentAccountOnly,proto3,enum=DTC_PB.TradingIsDisabledEnum" json:"SetDisableTradingForParentAccountOnly,omitempty"`
}

func (x *TradeAccountTradingIsDisabledRequest) Reset() {
	*x = TradeAccountTradingIsDisabledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAccountTradingIsDisabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAccountTradingIsDisabledRequest) ProtoMessage() {}

func (x *TradeAccountTradingIsDisabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAccountTradingIsDisabledRequest.ProtoReflect.Descriptor instead.
func (*TradeAccountTradingIsDisabledRequest) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{101}
}

func (x *TradeAccountTradingIsDisabledRequest) GetRequestID() uint32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *TradeAccountTradingIsDisabledRequest) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *TradeAccountTradingIsDisabledRequest) GetSetTradingIsDisabled() TradingIsDisabledEnum {
	if x != nil {
		return x.SetTradingIsDisabled
	}
	return TradingIsDisabledEnum_TRADING_IS_DISABLED_RETURN_CURRENT_VALUE
}

func (x *TradeAccountTradingIsDisabledRequest) GetSetDisableTradingForParentAccountOnly() TradingIsDisabledEnum {
	if x != nil {
		return x.SetDisableTradingForParentAccountOnly
	}
	return TradingIsDisabledEnum_TRADING_IS_DISABLED_RETURN_CURRENT_VALUE
}

// ============================================================================
type TradeAccountTradingIsDisabledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                          uint32                `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TradeAccount                       string                `protobuf:"bytes,2,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	TradingIsDisabled                  TradingIsDisabledEnum `protobuf:"varint,3,opt,name=TradingIsDisabled,proto3,enum=DTC_PB.TradingIsDisabledEnum" json:"TradingIsDisabled,omitempty"`
	DisableTradingForParentAccountOnly TradingIsDisabledEnum `protobuf:"varint,4,opt,name=DisableTradingForParentAccountOnly,proto3,enum=DTC_PB.TradingIsDisabledEnum" json:"DisableTradingForParentAccountOnly,omitempty"`
	ErrorText                          string                `protobuf:"bytes,5,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
}

func (x *TradeAccountTradingIsDisabledResponse) Reset() {
	*x = TradeAccountTradingIsDisabledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAccountTradingIsDisabledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAccountTradingIsDisabledResponse) ProtoMessage() {}

func (x *TradeAccountTradingIsDisabledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAccountTradingIsDisabledResponse.ProtoReflect.Descriptor instead.
func (*TradeAccountTradingIsDisabledResponse) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{102}
}

func (x *TradeAccountTradingIsDisabledResponse) GetRequestID() uint32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *TradeAccountTradingIsDisabledResponse) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *TradeAccountTradingIsDisabledResponse) GetTradingIsDisabled() TradingIsDisabledEnum {
	if x != nil {
		return x.TradingIsDisabled
	}
	return TradingIsDisabledEnum_TRADING_IS_DISABLED_RETURN_CURRENT_VALUE
}

func (x *TradeAccountTradingIsDisabledResponse) GetDisableTradingForParentAccountOnly() TradingIsDisabledEnum {
	if x != nil {
		return x.DisableTradingForParentAccountOnly
	}
	return TradingIsDisabledEnum_TRADING_IS_DISABLED_RETURN_CURRENT_VALUE
}

func (x *TradeAccountTradingIsDisabledResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

// ============================================================================
type TradeAccountDataDuplicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID                    uint32 `protobuf:"varint,1,opt,name=RequestID,proto3" json:"RequestID,omitempty"`
	TradeAccount                 string `protobuf:"bytes,2,opt,name=TradeAccount,proto3" json:"TradeAccount,omitempty"`
	ReadWriteSharedUsernameToAdd string `protobuf:"bytes,3,opt,name=ReadWriteSharedUsernameToAdd,proto3" json:"ReadWriteSharedUsernameToAdd,omitempty"`
}

func (x *TradeAccountDataDuplicate) Reset() {
	*x = TradeAccountDataDuplicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dtc_DTCProtocol_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeAccountDataDuplicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeAccountDataDuplicate) ProtoMessage() {}

func (x *TradeAccountDataDuplicate) ProtoReflect() protoreflect.Message {
	mi := &file_dtc_DTCProtocol_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeAccountDataDuplicate.ProtoReflect.Descriptor instead.
func (*TradeAccountDataDuplicate) Descriptor() ([]byte, []int) {
	return file_dtc_DTCProtocol_proto_rawDescGZIP(), []int{103}
}

func (x *TradeAccountDataDuplicate) GetRequestID() uint32 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *TradeAccountDataDuplicate) GetTradeAccount() string {
	if x != nil {
		return x.TradeAccount
	}
	return ""
}

func (x *TradeAccountDataDuplicate) GetReadWriteSharedUsernameToAdd() string {
	if x != nil {
		return x.ReadWriteSharedUsernameToAdd
	}
	return ""
}

var File_dtc_DTCProtocol_proto protoreflect.FileDescriptor

var file_dtc_DTCProtocol_proto_rawDesc = []byte{
	0x0a, 0x15, 0x64, 0x74, 0x63, 0x2f, 0x44, 0x54, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x22,
	0x91, 0x01, 0x0a, 0x0f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xea, 0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x54, 0x65, 0x78,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x32, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x32, 0x12,
	0x3e, 0x0a, 0x1a, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1a, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a,
	0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xfc, 0x08, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x41, 0x6e, 0x64, 0x41, 0x73, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x65, 0x73, 0x74, 0x42, 0x69, 0x64, 0x41,
	0x6e, 0x64, 0x41, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x43, 0x4f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x4f, 0x43, 0x4f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x1c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x26, 0x52, 0x65, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x26, 0x52, 0x65, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x49, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x49, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5e, 0x0a, 0x2a, 0x4f, 0x6e, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x2a, 0x4f,
	0x6e, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x42, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x31, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x55, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x31, 0x12, 0x64, 0x0a, 0x2d,
	0x55, 0x73, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6e,
	0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x2d, 0x55, 0x73, 0x65, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x41, 0x6e, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x65,
	0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x4e,
	0x75, 0x6d, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x4e, 0x75, 0x6d, 0x44, 0x72, 0x6f, 0x70,
	0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x46, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x72, 0x0a, 0x1a, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x44, 0x12, 0x38, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x13, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x31,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x80, 0x02, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x28, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x28, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x4e, 0x75, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x4e, 0x75, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xf1, 0x06, 0x0a, 0x12, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x36, 0x0a,
	0x16, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67, 0x68,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x41, 0x73, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x41, 0x73, 0x6b, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x42, 0x69,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x69, 0x64,
	0x41, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xce,
	0x02, 0x0a, 0x18, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x41,
	0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x49,
	0x73, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x49, 0x73, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x49, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x9e, 0x02, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x41, 0x74, 0x42, 0x69, 0x64,
	0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x38, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x4e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x44,
	0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x12, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x22, 0xf5, 0x02, 0x0a, 0x16, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x41,
	0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x53,
	0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x44, 0x54, 0x43, 0x5f,
	0x50, 0x42, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x12,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xcf, 0x02, 0x0a, 0x2b, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa9, 0x02, 0x0a, 0x21, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x53, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x4e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x44,
	0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x12, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x71, 0x0a, 0x21, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x1b, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x20, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4e,
	0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x54, 0x0a, 0x22, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x4f, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74,
	0x22, 0xb5, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f,
	0x72, 0x41, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x44, 0x54, 0x43,
	0x5f, 0x50, 0x42, 0x2e, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x12, 0x14,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1c, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12,
	0x36, 0x0a, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x41, 0x74, 0x42,
	0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x41, 0x74, 0x42,
	0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x22, 0xbf, 0x01, 0x0a, 0x21, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x4c, 0x61, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x02, 0x0a, 0x2b, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72,
	0x41, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f,
	0x50, 0x42, 0x2e, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75,
	0x6d, 0x38, 0x52, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x12, 0x5d,
	0x0a, 0x17, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x17, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf0, 0x02, 0x0a, 0x2c,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x64, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x32, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e,
	0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x38, 0x52,
	0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x12, 0x5d, 0x0a, 0x17, 0x55,
	0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x44,
	0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x17, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8,
	0x02, 0x0a, 0x20, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x41, 0x74, 0x42, 0x69, 0x64,
	0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x38, 0x52, 0x0a, 0x41, 0x74, 0x42, 0x69,
	0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x12, 0x5d, 0x0a, 0x17, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42,
	0x2e, 0x55, 0x6e, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x17, 0x55, 0x6e,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x64, 0x41, 0x73, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x73,
	0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64,
	0x41, 0x73, 0x6b, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x73,
	0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x1d, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64,
	0x41, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x42, 0x69,
	0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x42, 0x69, 0x64,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x41, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x22, 0xbb,
	0x01, 0x0a, 0x21, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x4e, 0x6f, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44,
	0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x73,
	0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xe1, 0x01, 0x0a,
	0x2b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x42, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x42, 0x69, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x41, 0x73, 0x6b, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x41, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xb7, 0x01, 0x0a, 0x1d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1c, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7f, 0x0a, 0x1b, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7e, 0x0a, 0x1a,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xee, 0x01, 0x0a,
	0x13, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x44, 0x54,
	0x43, 0x5f, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x4f, 0x72,
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x53,
	0x65, 0x6e, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x47, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x54, 0x6f, 0x22, 0x50, 0x0a,
	0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22,
	0xbe, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x41, 0x64, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xab, 0x02, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65,
	0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0d, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1,
	0x01, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x53, 0x69, 0x64,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42,
	0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x53, 0x69,
	0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x23, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79,
	0x22, 0x95, 0x06, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x44, 0x54, 0x43,
	0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07,
	0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x07, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x44,
	0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x10, 0x52, 0x10, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x49, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x44, 0x54, 0x43, 0x5f,
	0x50, 0x42, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x4d, 0x61, 0x78,
	0x53, 0x68, 0x6f, 0x77, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x41, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x41, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x32, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x18,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xfc, 0x04, 0x0a, 0x17, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x33, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x53, 0x65,
	0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50,
	0x42, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x42,
	0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0b,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x49, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x65,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x4f, 0x70, 0x65,
	0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x6e,
	0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x1f, 0x46, 0x6c, 0x61, 0x74, 0x74, 0x65, 0x6e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x8b, 0x04, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x49, 0x73, 0x53, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x49, 0x73,
	0x53, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x49, 0x73, 0x53,
	0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x49, 0x73, 0x53, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43,
	0x5f, 0x50, 0x42, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x12, 0x2a, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x32, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0xb4, 0x03, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x49, 0x73, 0x53, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x49, 0x73, 0x53, 0x65, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x49, 0x73, 0x53, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x49, 0x73, 0x53, 0x65, 0x74,
	0x12, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x54,
	0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x7d, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb3, 0x0a, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x4e, 0x65, 0x77, 0x4f, 0x43, 0x4f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x31, 0x12, 0x36, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x31, 0x12, 0x30, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x5f, 0x31, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75,
	0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x42, 0x75, 0x79, 0x53, 0x65,
	0x6c, 0x6c, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x5f, 0x31, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x31, 0x12, 0x19,
	0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x31, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x12, 0x27, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x32, 0x12, 0x36, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x32,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x32, 0x12, 0x30, 0x0a, 0x09, 0x42, 0x75, 0x79,
	0x53, 0x65, 0x6c, 0x6c, 0x5f, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44,
	0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x08, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x31, 0x5f, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x31, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x5f, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x32, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32,
	0x12, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x10, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49,
	0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46,
	0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x4f,
	0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x4f, 0x70,
	0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x46, 0x69, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x55, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x31, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x46, 0x0a, 0x1e, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x1e, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x53, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x4f, 0x6e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x6c,
	0x12, 0x29, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x5f, 0x31, 0x41, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x31, 0x31, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x32, 0x5f, 0x31, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x31, 0x41, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x5f, 0x32, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x32, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x5f, 0x32, 0x41, 0x73, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x32, 0x32, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xe0, 0x07, 0x0a,
	0x14, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x4f, 0x43, 0x4f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x5f, 0x31, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x31, 0x12, 0x36, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x31, 0x12, 0x30, 0x0a, 0x09, 0x42, 0x75,
	0x79, 0x53, 0x65, 0x6c, 0x6c, 0x5f, 0x31, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x31, 0x12, 0x19, 0x0a, 0x08,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x5f, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x31, 0x12, 0x19, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x32, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x32, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x31,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x31, 0x12, 0x27, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x5f, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x32, 0x12, 0x36, 0x0a, 0x0b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x32, 0x12, 0x30, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x5f, 0x32, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42,
	0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x42, 0x75, 0x79, 0x53,
	0x65, 0x6c, 0x6c, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x5f, 0x32,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x32, 0x12,
	0x19, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x5f, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32, 0x12, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x10, 0x52, 0x10,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x49, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x3c,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x13,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x44, 0x54, 0x43, 0x5f,
	0x50, 0x42, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x22,
	0xa7, 0x01, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcf, 0x01, 0x0a, 0x1b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x1a, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x6c, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5b, 0x0a, 0x17, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x16, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xb0, 0x0c, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x42, 0x75, 0x79,
	0x53, 0x65, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43,
	0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x07, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x12, 0x16, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x39, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x10, 0x52, 0x10, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x46,
	0x69, 0x6c, 0x6c, 0x65, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a,
	0x11, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x46,
	0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x10, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x4c, 0x61, 0x73,
	0x74, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x6c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x6c, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49,
	0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4e, 0x6f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x1b, 0x4f, 0x43, 0x4f, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x4f, 0x43, 0x4f, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x4f,
	0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x44,
	0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46,
	0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x10, 0x52, 0x15,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x50, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78,
	0x74, 0x22, 0xbc, 0x06, 0x0a, 0x1b, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x2d, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42, 0x75, 0x79, 0x53,
	0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2c,
	0x0a, 0x11, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x09, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x4e, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x69,
	0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x48, 0x69, 0x67,
	0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x49, 0x44, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x75, 0x62, 0x49, 0x44,
	0x22, 0xe8, 0x05, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4e, 0x6f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x55, 0x6e, 0x73, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x70, 0x65,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73,
	0x73, 0x12, 0x38, 0x0a, 0x17, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x75,
	0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x17, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x4c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x4c, 0x6f, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x1b, 0x4d, 0x61, 0x78,
	0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b,
	0x4d, 0x61, 0x78, 0x50, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xab, 0x02, 0x0a, 0x16,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x42,
	0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x42, 0x75, 0x79, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x46, 0x69, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x46, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x65, 0x46, 0x6f, 0x72,
	0x6d, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x72, 0x65,
	0x65, 0x46, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x22, 0x7d, 0x0a, 0x1b, 0x43, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x49, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x34, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0xb0,
	0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x22, 0x33, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x19, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x46,
	0x6f, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x22, 0x9d, 0x01, 0x0a, 0x23, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x44, 0x54, 0x43,
	0x5f, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x46, 0x6f,
	0x72, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x13, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x44, 0x54, 0x43,
	0x5f, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x76,
	0x0a, 0x22, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xc7, 0x0c, 0x0a, 0x1a, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x69, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x4d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x12, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x49, 0x73, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x6f, 0x49, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e, 0x74,
	0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x49, 0x6e, 0x74, 0x54, 0x6f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x6e, 0x64,
	0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x73, 0x42, 0x69, 0x64, 0x41, 0x73, 0x6b, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53,
	0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x50, 0x75, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x50, 0x75, 0x74, 0x4f, 0x72, 0x43, 0x61, 0x6c, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x16, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x42, 0x75, 0x79, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x42, 0x75, 0x79,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x53, 0x65, 0x6c, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10,
	0x45, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x50, 0x65, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c,
	0x0a, 0x19, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x19, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x12,
	0x48, 0x61, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x48, 0x61, 0x73, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x16,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x3a, 0x0a, 0x18,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1c, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x76, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x65,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x73, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x22, 0x58, 0x0a, 0x18, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x59, 0x0a, 0x15, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x82, 0x0b, 0x0a, 0x14,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43, 0x61, 0x73, 0x68, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1f, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x6f, 0x72, 0x4e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x11, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x4e, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4e, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x6e,
	0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x55, 0x6e, 0x73, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x17,
	0x4f, 0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x4f,
	0x70, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x15,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4e, 0x65, 0x74, 0x4c, 0x6f,
	0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x4e, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x52, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x24,
	0x54, 0x72, 0x61, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4e, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x4e, 0x65, 0x74,
	0x4c, 0x6f, 0x73, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x15, 0x49, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x49, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x4f, 0x66, 0x44,
	0x61, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x49, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1b, 0x49, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x10, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x22,
	0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x22, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x15,
	0x50, 0x65, 0x61, 0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x50, 0x65, 0x61,
	0x6b, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e,
	0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x22, 0xd6, 0x01, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x44, 0x65, 0x62, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x1e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xaa,
	0x01, 0x0a, 0x20, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x4e, 0x65, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x20,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5f, 0x0a, 0x1f, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0xe6, 0x02, 0x0a, 0x20, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x61, 0x73, 0x68,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x43,
	0x61, 0x73, 0x68, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4e,
	0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x57, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x73, 0x50, 0x6f, 0x70, 0x75, 0x70, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x49, 0x73, 0x50,
	0x6f, 0x70, 0x75, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x35, 0x0a, 0x11, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x22, 0x51, 0x0a, 0x0f, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x41, 0x64, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x15, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x54, 0x0a, 0x14, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x49, 0x73, 0x46, 0x69,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xc5, 0x03, 0x0a, 0x1a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x44, 0x54, 0x43,
	0x5f, 0x50, 0x42, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x24,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x79,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x4d, 0x61, 0x78, 0x44, 0x61, 0x79, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x12, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x5a, 0x4c, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x55, 0x73,
	0x65, 0x5a, 0x4c, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x20, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x31, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x22, 0xa3, 0x02, 0x0a, 0x21, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x4a, 0x0a,
	0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65,
	0x5a, 0x4c, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x55, 0x73, 0x65, 0x5a, 0x4c, 0x69, 0x62, 0x43, 0x6f,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x6f, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x54,
	0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x54, 0x6f,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x49, 0x6e, 0x74, 0x54, 0x6f, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x22,
	0xe6, 0x01, 0x0a, 0x19, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xf5, 0x02, 0x0a, 0x21, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x10, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61,
	0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0xed, 0x01, 0x0a, 0x25, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41,
	0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50,
	0x42, 0x2e, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x0a, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x22, 0x7c, 0x0a, 0x22, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x89,
	0x02, 0x0a, 0x20, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x55, 0x73, 0x65, 0x5a, 0x4c, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x55, 0x73, 0x65, 0x5a, 0x4c,
	0x69, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x31, 0x22, 0xa5, 0x01, 0x0a, 0x27, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x5a, 0x4c, 0x69, 0x62, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x12, 0x55, 0x73, 0x65, 0x5a, 0x4c, 0x69, 0x62, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x73, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x4e, 0x6f, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x54, 0x6f, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x1f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x10, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x93, 0x02, 0x0a, 0x27, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x49, 0x73, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x24, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x14, 0x53, 0x65, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x73, 0x0a, 0x25, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x25, 0x53, 0x65, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xc3, 0x02, 0x0a, 0x25, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x11, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x6d, 0x0a, 0x22, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x44, 0x54, 0x43, 0x5f, 0x50, 0x42, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x22,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74,
	0x22, 0xa1, 0x01, 0x0a, 0x19, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x42, 0x0a, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x52, 0x65, 0x61, 0x64, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x2a, 0x38, 0x0a, 0x0a, 0x44, 0x54, 0x43, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x54, 0x43, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x55, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x2a, 0x9e,
	0x1b, 0x0a, 0x0e, 0x44, 0x54, 0x43, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e,
	0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x4f, 0x46, 0x46, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x65, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x68, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10,
	0x6b, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x70, 0x12, 0x2b, 0x0a, 0x26, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x86, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x89, 0x01, 0x12, 0x38, 0x0a, 0x33,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x55, 0x4e,
	0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x32, 0x10, 0x92, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10,
	0x8e, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x4b,
	0x10, 0x6c, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x4b,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x75, 0x12, 0x2c, 0x0a, 0x27, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x42, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x8f, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42,
	0x49, 0x44, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x57, 0x49, 0x54,
	0x48, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x90,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x10, 0x78, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x72, 0x12, 0x22, 0x0a, 0x1e, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x73, 0x12,
	0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x56, 0x4f,
	0x4c, 0x55, 0x4d, 0x45, 0x10, 0x71, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x10, 0x7c, 0x12, 0x29, 0x0a, 0x25,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x77, 0x12, 0x2a, 0x0a, 0x25, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53,
	0x10, 0x87, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x88,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x54,
	0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x66, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44,
	0x45, 0x50, 0x54, 0x48, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x10, 0x7a, 0x12, 0x26, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x91, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x6a, 0x12, 0x36, 0x0a, 0x31,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x53, 0x10, 0x8c, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44,
	0x45, 0x50, 0x54, 0x48, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x8d,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x64, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45,
	0x45, 0x44, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x10, 0x74, 0x12, 0x1a, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59,
	0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x8a, 0x01, 0x12, 0x1a,
	0x0a, 0x15, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x96, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x97, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x98, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x4d,
	0x4f, 0x44, 0x49, 0x46, 0x59, 0x10, 0x99, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45,
	0x10, 0x9a, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x53, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x9b,
	0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0xd0, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x43,
	0x4f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0xd1, 0x01, 0x12, 0x28,
	0x0a, 0x23, 0x46, 0x4c, 0x41, 0x54, 0x54, 0x45, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xd2, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0xcb, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x10, 0xcc, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xac, 0x02,
	0x12, 0x17, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x53, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xae, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xad, 0x02, 0x12, 0x23, 0x0a, 0x1e,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xaf,
	0x02, 0x12, 0x23, 0x0a, 0x1e, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0xb0, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x53,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xb4, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xb1, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xb3, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xb2, 0x02, 0x12,
	0x1e, 0x0a, 0x19, 0x41, 0x44, 0x44, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0xb5, 0x02, 0x12,
	0x23, 0x0a, 0x1e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0xb6, 0x02, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x90,
	0x03, 0x12, 0x1b, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x91, 0x03, 0x12, 0x1a,
	0x0a, 0x15, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xf4, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0xf5, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x59, 0x4d, 0x42, 0x4f,
	0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xf6, 0x03, 0x12, 0x2c, 0x0a, 0x27, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xf7, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x59, 0x4d, 0x42,
	0x4f, 0x4c, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x59, 0x49,
	0x4e, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xf8, 0x03, 0x12, 0x2b, 0x0a,
	0x26, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xfa, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xfb, 0x03, 0x12, 0x1a, 0x0a,
	0x15, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xfc, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xfd, 0x03, 0x12, 0x1c, 0x0a, 0x17, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xd9, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0xda, 0x04, 0x12, 0x1b, 0x0a, 0x16, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10,
	0xd8, 0x04, 0x12, 0x1f, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41,
	0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0xdf, 0x04, 0x12, 0x26, 0x0a, 0x21, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xe0, 0x04, 0x12, 0x28, 0x0a, 0x23, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41,
	0x44, 0x4a, 0x55, 0x53, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0xe1, 0x04, 0x12, 0x28, 0x0a, 0x23, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xdb, 0x04, 0x12,
	0x27, 0x0a, 0x22, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x53, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xdc, 0x04, 0x12, 0x28, 0x0a, 0x23, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42,
	0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0xde, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0xbc, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0xbd, 0x05, 0x12,
	0x12, 0x0a, 0x0d, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0xbe, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x4e, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x44, 0x44, 0x10, 0xbf, 0x05, 0x12, 0x1c, 0x0a, 0x17, 0x4a,
	0x4f, 0x55, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xc0, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x4a, 0x4f, 0x55,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x49, 0x45, 0x53, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0xc1, 0x05, 0x12, 0x1b, 0x0a, 0x16, 0x4a, 0x4f, 0x55, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0xc2, 0x05, 0x12, 0x22, 0x0a, 0x1d, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0xa0, 0x06, 0x12, 0x2a, 0x0a, 0x25, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x10, 0xa1, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x10, 0xa2, 0x06, 0x12, 0x2a, 0x0a, 0x25, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10,
	0xa3, 0x06, 0x12, 0x2f, 0x0a, 0x2a, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x49, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0xa4, 0x06, 0x12, 0x2b, 0x0a, 0x26, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x45, 0x52, 0x10, 0xa7, 0x06,
	0x12, 0x29, 0x0a, 0x24, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x84, 0x07, 0x12, 0x31, 0x0a, 0x2c, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x85, 0x07, 0x12, 0x28,
	0x0a, 0x23, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x86, 0x07, 0x12, 0x31, 0x0a, 0x2c, 0x48, 0x49, 0x53, 0x54,
	0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45,
	0x50, 0x54, 0x48, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x87, 0x07, 0x12, 0x2e, 0x0a, 0x29, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xde, 0x4f, 0x12, 0x2f, 0x0a, 0x2a, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xdf, 0x4f, 0x12, 0x21, 0x0a, 0x1c,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x10, 0xe0, 0x4f, 0x2a,
	0x90, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x53, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x19, 0x0a, 0x15, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x53,
	0x10, 0x04, 0x2a, 0x8c, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x03,
	0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x47, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x04, 0x2a, 0x46, 0x0a, 0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x5b, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50,
	0x53, 0x48, 0x4f, 0x54, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a, 0x1b, 0x55, 0x6e, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x42, 0x55, 0x4e, 0x44,
	0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x26, 0x0a, 0x22, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x4e, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x44,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x53, 0x55, 0x42, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x55, 0x4e,
	0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02, 0x2a,
	0x8a, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x30, 0x0a, 0x2c, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x44, 0x44, 0x5f, 0x4c, 0x4f, 0x54, 0x5f, 0x45, 0x51,
	0x55, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x45, 0x10, 0x02, 0x2a, 0xde, 0x02, 0x0a,
	0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10,
	0x04, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x4c, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0xc5, 0x02,
	0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x45, 0x57, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x07, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44,
	0x10, 0x09, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0x3b, 0x0a, 0x0e, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72,
	0x41, 0x73, 0x6b, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x44, 0x5f, 0x41,
	0x53, 0x4b, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x54,
	0x5f, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x54, 0x5f, 0x41, 0x53, 0x4b,
	0x10, 0x02, 0x2a, 0x42, 0x0a, 0x0f, 0x41, 0x74, 0x42, 0x69, 0x64, 0x4f, 0x72, 0x41, 0x73, 0x6b,
	0x45, 0x6e, 0x75, 0x6d, 0x38, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x49, 0x44, 0x5f, 0x41, 0x53, 0x4b,
	0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x5f, 0x38, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54,
	0x5f, 0x42, 0x49, 0x44, 0x5f, 0x38, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x5f, 0x41,
	0x53, 0x4b, 0x5f, 0x38, 0x10, 0x02, 0x2a, 0x71, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44,
	0x45, 0x50, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x16, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x45,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x03, 0x2a, 0xc5, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x5f, 0x49, 0x46, 0x5f, 0x54, 0x4f, 0x55, 0x43, 0x48, 0x45, 0x44, 0x10, 0x06,
	0x2a, 0xae, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x46, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c,
	0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x49, 0x46, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x5f, 0x54, 0x49, 0x4c, 0x4c, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x46,
	0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x46, 0x5f, 0x41, 0x4c,
	0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x49, 0x46, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4c, 0x4c, 0x10,
	0x06, 0x2a, 0x34, 0x0a, 0x0b, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55, 0x59, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x2a,
	0x88, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x6c, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x46,
	0x49, 0x4c, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x44,
	0x55, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x48,
	0x41, 0x4e, 0x44, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x2a, 0x7f, 0x0a, 0x18, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x65, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0xd8, 0x06, 0x0a, 0x16,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x30, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x32,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d,
	0x41, 0x4c, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x34, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x36,
	0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d,
	0x41, 0x4c, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44,
	0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x38, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x39, 0x10, 0x09, 0x12, 0x29,
	0x0a, 0x24, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x32, 0x35, 0x36, 0x10, 0xe4, 0x02, 0x12, 0x29, 0x0a, 0x24, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x31, 0x32,
	0x38, 0x10, 0xe4, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4e,
	0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x36, 0x34, 0x10, 0xa4, 0x01, 0x12, 0x31,
	0x0a, 0x2c, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54,
	0x4f, 0x52, 0x5f, 0x33, 0x32, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x53, 0x10, 0x88,
	0x01, 0x12, 0x2f, 0x0a, 0x2a, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x33, 0x32, 0x5f, 0x48, 0x41, 0x4c, 0x56, 0x45, 0x53, 0x10,
	0x86, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x33, 0x32, 0x10, 0x84, 0x01, 0x12, 0x27, 0x0a, 0x23,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x31, 0x36, 0x10, 0x74, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45,
	0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x38, 0x10, 0x6c, 0x12, 0x26, 0x0a,
	0x22, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45, 0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x34, 0x10, 0x68, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44,
	0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44, 0x45,
	0x4e, 0x4f, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x32, 0x10, 0x66, 0x12, 0x27, 0x0a,
	0x1a, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x46,
	0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x2a, 0xcd, 0x02, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x45, 0x54, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x58, 0x10, 0x03,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x04, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x43,
	0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52,
	0x45, 0x53, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x05, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46,
	0x55, 0x54, 0x55, 0x52, 0x45, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x55, 0x41, 0x4c, 0x5f,
	0x46, 0x55, 0x4e, 0x44, 0x10, 0x0a, 0x2a, 0x34, 0x0a, 0x0b, 0x50, 0x75, 0x74, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x43, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x43, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x43, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x02, 0x2a, 0x62, 0x0a, 0x0e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x2a, 0x94, 0x03, 0x0a, 0x1a, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x43, 0x4b,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x32, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x34, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x35, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10,
	0x05, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x30,
	0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x33, 0x30, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x53, 0x10, 0x1e, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x31, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x3c, 0x12, 0x16, 0x0a, 0x11, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10,
	0xac, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31,
	0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0xd8, 0x04, 0x12, 0x17, 0x0a, 0x12, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54,
	0x45, 0x10, 0x84, 0x07, 0x12, 0x17, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x33, 0x30, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x88, 0x0e, 0x12, 0x14, 0x0a,
	0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52,
	0x10, 0x90, 0x1c, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x32, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0xa0, 0x38, 0x12, 0x14, 0x0a, 0x0e, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x80, 0xa3, 0x05,
	0x12, 0x15, 0x0a, 0x0f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x57,
	0x45, 0x45, 0x4b, 0x10, 0x80, 0xf5, 0x24, 0x2a, 0xe7, 0x01, 0x0a, 0x27, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x50, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x29, 0x0a, 0x25, 0x48, 0x50, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x2a,
	0x0a, 0x26, 0x48, 0x50, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x4f, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12, 0x36, 0x0a, 0x32, 0x48, 0x50,
	0x44, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x5f, 0x4f,
	0x46, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41,
	0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x50, 0x44, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x04, 0x2a, 0xa0, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x41,
	0x4c, 0x54, 0x10, 0x04, 0x2a, 0x76, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x86, 0x01, 0x0a,
	0x15, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x28, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x52, 0x45,
	0x54, 0x55, 0x52, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x49, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x49, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dtc_DTCProtocol_proto_rawDescOnce sync.Once
	file_dtc_DTCProtocol_proto_rawDescData = file_dtc_DTCProtocol_proto_rawDesc
)

func file_dtc_DTCProtocol_proto_rawDescGZIP() []byte {
	file_dtc_DTCProtocol_proto_rawDescOnce.Do(func() {
		file_dtc_DTCProtocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_dtc_DTCProtocol_proto_rawDescData)
	})
	return file_dtc_DTCProtocol_proto_rawDescData
}

var file_dtc_DTCProtocol_proto_enumTypes = make([]protoimpl.EnumInfo, 29)
var file_dtc_DTCProtocol_proto_msgTypes = make([]protoimpl.MessageInfo, 104)
var file_dtc_DTCProtocol_proto_goTypes = []interface{}{
	(DTCVersion)(0),                                      // 0: DTC_PB.DTCVersion
	(DTCMessageType)(0),                                  // 1: DTC_PB.DTCMessageType
	(EncodingEnum)(0),                                    // 2: DTC_PB.EncodingEnum
	(LogonStatusEnum)(0),                                 // 3: DTC_PB.LogonStatusEnum
	(MessageSupportedEnum)(0),                            // 4: DTC_PB.MessageSupportedEnum
	(RequestActionEnum)(0),                               // 5: DTC_PB.RequestActionEnum
	(UnbundledTradeIndicatorEnum)(0),                     // 6: DTC_PB.UnbundledTradeIndicatorEnum
	(TradeConditionEnum)(0),                              // 7: DTC_PB.TradeConditionEnum
	(OrderStatusEnum)(0),                                 // 8: DTC_PB.OrderStatusEnum
	(OrderUpdateReasonEnum)(0),                           // 9: DTC_PB.OrderUpdateReasonEnum
	(AtBidOrAskEnum)(0),                                  // 10: DTC_PB.AtBidOrAskEnum
	(AtBidOrAskEnum8)(0),                                 // 11: DTC_PB.AtBidOrAskEnum8
	(MarketDepthUpdateTypeEnum)(0),                       // 12: DTC_PB.MarketDepthUpdateTypeEnum
	(FinalUpdateInBatchEnum)(0),                          // 13: DTC_PB.FinalUpdateInBatchEnum
	(OrderTypeEnum)(0),                                   // 14: DTC_PB.OrderTypeEnum
	(TimeInForceEnum)(0),                                 // 15: DTC_PB.TimeInForceEnum
	(BuySellEnum)(0),                                     // 16: DTC_PB.BuySellEnum
	(OpenCloseTradeEnum)(0),                              // 17: DTC_PB.OpenCloseTradeEnum
	(PartialFillHandlingEnum)(0),                         // 18: DTC_PB.PartialFillHandlingEnum
	(MarketDataFeedStatusEnum)(0),                        // 19: DTC_PB.MarketDataFeedStatusEnum
	(PriceDisplayFormatEnum)(0),                          // 20: DTC_PB.PriceDisplayFormatEnum
	(SecurityTypeEnum)(0),                                // 21: DTC_PB.SecurityTypeEnum
	(PutCallEnum)(0),                                     // 22: DTC_PB.PutCallEnum
	(SearchTypeEnum)(0),                                  // 23: DTC_PB.SearchTypeEnum
	(HistoricalDataIntervalEnum)(0),                      // 24: DTC_PB.HistoricalDataIntervalEnum
	(HistoricalPriceDataRejectReasonCodeEnum)(0),         // 25: DTC_PB.HistoricalPriceDataRejectReasonCodeEnum
	(TradingStatusEnum)(0),                               // 26: DTC_PB.TradingStatusEnum
	(MessageSetBoundaryEnum)(0),                          // 27: DTC_PB.MessageSetBoundaryEnum
	(TradingIsDisabledEnum)(0),                           // 28: DTC_PB.TradingIsDisabledEnum
	(*EncodingRequest)(nil),                              // 29: DTC_PB.EncodingRequest
	(*EncodingResponse)(nil),                             // 30: DTC_PB.EncodingResponse
	(*LogonRequest)(nil),                                 // 31: DTC_PB.LogonRequest
	(*LogonResponse)(nil),                                // 32: DTC_PB.LogonResponse
	(*Logoff)(nil),                                       // 33: DTC_PB.Logoff
	(*Heartbeat)(nil),                                    // 34: DTC_PB.Heartbeat
	(*MarketDataFeedStatus)(nil),                         // 35: DTC_PB.MarketDataFeedStatus
	(*MarketDataFeedSymbolStatus)(nil),                   // 36: DTC_PB.MarketDataFeedSymbolStatus
	(*TradingSymbolStatus)(nil),                          // 37: DTC_PB.TradingSymbolStatus
	(*MarketDataRequest)(nil),                            // 38: DTC_PB.MarketDataRequest
	(*MarketDepthRequest)(nil),                           // 39: DTC_PB.MarketDepthRequest
	(*MarketDataReject)(nil),                             // 40: DTC_PB.MarketDataReject
	(*MarketDataSnapshot)(nil),                           // 41: DTC_PB.MarketDataSnapshot
	(*MarketDepthSnapshotLevel)(nil),                     // 42: DTC_PB.MarketDepthSnapshotLevel
	(*MarketDepthSnapshotLevelFloat)(nil),                // 43: DTC_PB.MarketDepthSnapshotLevelFloat
	(*MarketDepthUpdateLevel)(nil),                       // 44: DTC_PB.MarketDepthUpdateLevel
	(*MarketDepthUpdateLevelFloatWithMilliseconds)(nil),  // 45: DTC_PB.MarketDepthUpdateLevelFloatWithMilliseconds
	(*MarketDepthUpdateLevelNoTimestamp)(nil),            // 46: DTC_PB.MarketDepthUpdateLevelNoTimestamp
	(*MarketDataUpdateSessionSettlement)(nil),            // 47: DTC_PB.MarketDataUpdateSessionSettlement
	(*MarketDataUpdateSessionOpen)(nil),                  // 48: DTC_PB.MarketDataUpdateSessionOpen
	(*MarketDataUpdateSessionNumTrades)(nil),             // 49: DTC_PB.MarketDataUpdateSessionNumTrades
	(*MarketDataUpdateTradingSessionDate)(nil),           // 50: DTC_PB.MarketDataUpdateTradingSessionDate
	(*MarketDepthReject)(nil),                            // 51: DTC_PB.MarketDepthReject
	(*MarketDataUpdateTrade)(nil),                        // 52: DTC_PB.MarketDataUpdateTrade
	(*MarketDataUpdateTradeCompact)(nil),                 // 53: DTC_PB.MarketDataUpdateTradeCompact
	(*MarketDataUpdateLastTradeSnapshot)(nil),            // 54: DTC_PB.MarketDataUpdateLastTradeSnapshot
	(*MarketDataUpdateTradeWithUnbundledIndicator)(nil),  // 55: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator
	(*MarketDataUpdateTradeWithUnbundledIndicator2)(nil), // 56: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator2
	(*MarketDataUpdateTradeNoTimestamp)(nil),             // 57: DTC_PB.MarketDataUpdateTradeNoTimestamp
	(*MarketDataUpdateBidAsk)(nil),                       // 58: DTC_PB.MarketDataUpdateBidAsk
	(*MarketDataUpdateBidAsk2)(nil),                      // 59: DTC_PB.MarketDataUpdateBidAsk2
	(*MarketDataUpdateBidAskCompact)(nil),                // 60: DTC_PB.MarketDataUpdateBidAskCompact
	(*MarketDataUpdateBidAskNoTimeStamp)(nil),            // 61: DTC_PB.MarketDataUpdateBidAskNoTimeStamp
	(*MarketDataUpdateBidAskFloatWithMicroseconds)(nil),  // 62: DTC_PB.MarketDataUpdateBidAskFloatWithMicroseconds
	(*MarketDataUpdateSessionVolume)(nil),                // 63: DTC_PB.MarketDataUpdateSessionVolume
	(*MarketDataUpdateOpenInterest)(nil),                 // 64: DTC_PB.MarketDataUpdateOpenInterest
	(*MarketDataUpdateSessionHigh)(nil),                  // 65: DTC_PB.MarketDataUpdateSessionHigh
	(*MarketDataUpdateSessionLow)(nil),                   // 66: DTC_PB.MarketDataUpdateSessionLow
	(*MarketOrdersRequest)(nil),                          // 67: DTC_PB.MarketOrdersRequest
	(*MarketOrdersReject)(nil),                           // 68: DTC_PB.MarketOrdersReject
	(*MarketOrdersAdd)(nil),                              // 69: DTC_PB.MarketOrdersAdd
	(*MarketOrdersModify)(nil),                           // 70: DTC_PB.MarketOrdersModify
	(*MarketOrdersRemove)(nil),                           // 71: DTC_PB.MarketOrdersRemove
	(*MarketOrdersSnapshotMessageBoundary)(nil),          // 72: DTC_PB.MarketOrdersSnapshotMessageBoundary
	(*SubmitNewSingleOrder)(nil),                         // 73: DTC_PB.SubmitNewSingleOrder
	(*SubmitNewSingleOrderInt)(nil),                      // 74: DTC_PB.SubmitNewSingleOrderInt
	(*SubmitFlattenPositionOrder)(nil),                   // 75: DTC_PB.SubmitFlattenPositionOrder
	(*FlattenPositionsForTradeAccount)(nil),              // 76: DTC_PB.FlattenPositionsForTradeAccount
	(*CancelReplaceOrder)(nil),                           // 77: DTC_PB.CancelReplaceOrder
	(*CancelReplaceOrderInt)(nil),                        // 78: DTC_PB.CancelReplaceOrderInt
	(*CancelOrder)(nil),                                  // 79: DTC_PB.CancelOrder
	(*SubmitNewOCOOrder)(nil),                            // 80: DTC_PB.SubmitNewOCOOrder
	(*SubmitNewOCOOrderInt)(nil),                         // 81: DTC_PB.SubmitNewOCOOrderInt
	(*OpenOrdersRequest)(nil),                            // 82: DTC_PB.OpenOrdersRequest
	(*HistoricalOrderFillsRequest)(nil),                  // 83: DTC_PB.HistoricalOrderFillsRequest
	(*HistoricalOrderFillsReject)(nil),                   // 84: DTC_PB.HistoricalOrderFillsReject
	(*CurrentPositionsRequest)(nil),                      // 85: DTC_PB.CurrentPositionsRequest
	(*CurrentPositionsReject)(nil),                       // 86: DTC_PB.CurrentPositionsReject
	(*OrderUpdate)(nil),                                  // 87: DTC_PB.OrderUpdate
	(*OpenOrdersReject)(nil),                             // 88: DTC_PB.OpenOrdersReject
	(*HistoricalOrderFillResponse)(nil),                  // 89: DTC_PB.HistoricalOrderFillResponse
	(*PositionUpdate)(nil),                               // 90: DTC_PB.PositionUpdate
	(*AddCorrectingOrderFill)(nil),                       // 91: DTC_PB.AddCorrectingOrderFill
	(*CorrectingOrderFillResponse)(nil),                  // 92: DTC_PB.CorrectingOrderFillResponse
	(*TradeAccountsRequest)(nil),                         // 93: DTC_PB.TradeAccountsRequest
	(*TradeAccountResponse)(nil),                         // 94: DTC_PB.TradeAccountResponse
	(*ExchangeListRequest)(nil),                          // 95: DTC_PB.ExchangeListRequest
	(*ExchangeListResponse)(nil),                         // 96: DTC_PB.ExchangeListResponse
	(*SymbolsForExchangeRequest)(nil),                    // 97: DTC_PB.SymbolsForExchangeRequest
	(*UnderlyingSymbolsForExchangeRequest)(nil),          // 98: DTC_PB.UnderlyingSymbolsForExchangeRequest
	(*SymbolsForUnderlyingRequest)(nil),                  // 99: DTC_PB.SymbolsForUnderlyingRequest
	(*SymbolSearchRequest)(nil),                          // 100: DTC_PB.SymbolSearchRequest
	(*SecurityDefinitionForSymbolRequest)(nil),           // 101: DTC_PB.SecurityDefinitionForSymbolRequest
	(*SecurityDefinitionResponse)(nil),                   // 102: DTC_PB.SecurityDefinitionResponse
	(*SecurityDefinitionReject)(nil),                     // 103: DTC_PB.SecurityDefinitionReject
	(*AccountBalanceRequest)(nil),                        // 104: DTC_PB.AccountBalanceRequest
	(*AccountBalanceReject)(nil),                         // 105: DTC_PB.AccountBalanceReject
	(*AccountBalanceUpdate)(nil),                         // 106: DTC_PB.AccountBalanceUpdate
	(*AccountBalanceAdjustment)(nil),                     // 107: DTC_PB.AccountBalanceAdjustment
	(*AccountBalanceAdjustmentReject)(nil),               // 108: DTC_PB.AccountBalanceAdjustmentReject
	(*AccountBalanceAdjustmentComplete)(nil),             // 109: DTC_PB.AccountBalanceAdjustmentComplete
	(*HistoricalAccountBalancesRequest)(nil),             // 110: DTC_PB.HistoricalAccountBalancesRequest
	(*HistoricalAccountBalancesReject)(nil),              // 111: DTC_PB.HistoricalAccountBalancesReject
	(*HistoricalAccountBalanceResponse)(nil),             // 112: DTC_PB.HistoricalAccountBalanceResponse
	(*UserMessage)(nil),                                  // 113: DTC_PB.UserMessage
	(*GeneralLogMessage)(nil),                            // 114: DTC_PB.GeneralLogMessage
	(*JournalEntryAdd)(nil),                              // 115: DTC_PB.JournalEntryAdd
	(*JournalEntriesRequest)(nil),                        // 116: DTC_PB.JournalEntriesRequest
	(*JournalEntriesReject)(nil),                         // 117: DTC_PB.JournalEntriesReject
	(*JournalEntryResponse)(nil),                         // 118: DTC_PB.JournalEntryResponse
	(*AlertMessage)(nil),                                 // 119: DTC_PB.AlertMessage
	(*HistoricalPriceDataRequest)(nil),                   // 120: DTC_PB.HistoricalPriceDataRequest
	(*HistoricalPriceDataResponseHeader)(nil),            // 121: DTC_PB.HistoricalPriceDataResponseHeader
	(*HistoricalPriceDataReject)(nil),                    // 122: DTC_PB.HistoricalPriceDataReject
	(*HistoricalPriceDataRecordResponse)(nil),            // 123: DTC_PB.HistoricalPriceDataRecordResponse
	(*HistoricalPriceDataTickRecordResponse)(nil),        // 124: DTC_PB.HistoricalPriceDataTickRecordResponse
	(*HistoricalPriceDataResponseTrailer)(nil),           // 125: DTC_PB.HistoricalPriceDataResponseTrailer
	(*HistoricalMarketDepthDataRequest)(nil),             // 126: DTC_PB.HistoricalMarketDepthDataRequest
	(*HistoricalMarketDepthDataResponseHeader)(nil),      // 127: DTC_PB.HistoricalMarketDepthDataResponseHeader
	(*HistoricalMarketDepthDataReject)(nil),              // 128: DTC_PB.HistoricalMarketDepthDataReject
	(*HistoricalMarketDepthDataRecordResponse)(nil),      // 129: DTC_PB.HistoricalMarketDepthDataRecordResponse
	(*TradeAccountTradingIsDisabledRequest)(nil),         // 130: DTC_PB.TradeAccountTradingIsDisabledRequest
	(*TradeAccountTradingIsDisabledResponse)(nil),        // 131: DTC_PB.TradeAccountTradingIsDisabledResponse
	(*TradeAccountDataDuplicate)(nil),                    // 132: DTC_PB.TradeAccountDataDuplicate
}
var file_dtc_DTCProtocol_proto_depIdxs = []int32{
	2,  // 0: DTC_PB.EncodingRequest.Encoding:type_name -> DTC_PB.EncodingEnum
	2,  // 1: DTC_PB.EncodingResponse.Encoding:type_name -> DTC_PB.EncodingEnum
	3,  // 2: DTC_PB.LogonResponse.Result:type_name -> DTC_PB.LogonStatusEnum
	19, // 3: DTC_PB.MarketDataFeedStatus.Status:type_name -> DTC_PB.MarketDataFeedStatusEnum
	19, // 4: DTC_PB.MarketDataFeedSymbolStatus.Status:type_name -> DTC_PB.MarketDataFeedStatusEnum
	26, // 5: DTC_PB.TradingSymbolStatus.Status:type_name -> DTC_PB.TradingStatusEnum
	5,  // 6: DTC_PB.MarketDataRequest.RequestAction:type_name -> DTC_PB.RequestActionEnum
	5,  // 7: DTC_PB.MarketDepthRequest.RequestAction:type_name -> DTC_PB.RequestActionEnum
	26, // 8: DTC_PB.MarketDataSnapshot.TradingStatus:type_name -> DTC_PB.TradingStatusEnum
	10, // 9: DTC_PB.MarketDepthSnapshotLevel.Side:type_name -> DTC_PB.AtBidOrAskEnum
	11, // 10: DTC_PB.MarketDepthSnapshotLevelFloat.Side:type_name -> DTC_PB.AtBidOrAskEnum8
	13, // 11: DTC_PB.MarketDepthSnapshotLevelFloat.FinalUpdateInBatch:type_name -> DTC_PB.FinalUpdateInBatchEnum
	10, // 12: DTC_PB.MarketDepthUpdateLevel.Side:type_name -> DTC_PB.AtBidOrAskEnum
	12, // 13: DTC_PB.MarketDepthUpdateLevel.UpdateType:type_name -> DTC_PB.MarketDepthUpdateTypeEnum
	13, // 14: DTC_PB.MarketDepthUpdateLevel.FinalUpdateInBatch:type_name -> DTC_PB.FinalUpdateInBatchEnum
	13, // 15: DTC_PB.MarketDepthUpdateLevelFloatWithMilliseconds.FinalUpdateInBatch:type_name -> DTC_PB.FinalUpdateInBatchEnum
	13, // 16: DTC_PB.MarketDepthUpdateLevelNoTimestamp.FinalUpdateInBatch:type_name -> DTC_PB.FinalUpdateInBatchEnum
	10, // 17: DTC_PB.MarketDataUpdateTrade.AtBidOrAsk:type_name -> DTC_PB.AtBidOrAskEnum
	10, // 18: DTC_PB.MarketDataUpdateTradeCompact.AtBidOrAsk:type_name -> DTC_PB.AtBidOrAskEnum
	11, // 19: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator.AtBidOrAsk:type_name -> DTC_PB.AtBidOrAskEnum8
	6,  // 20: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator.UnbundledTradeIndicator:type_name -> DTC_PB.UnbundledTradeIndicatorEnum
	7,  // 21: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator.TradeCondition:type_name -> DTC_PB.TradeConditionEnum
	11, // 22: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator2.AtBidOrAsk:type_name -> DTC_PB.AtBidOrAskEnum8
	6,  // 23: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator2.UnbundledTradeIndicator:type_name -> DTC_PB.UnbundledTradeIndicatorEnum
	7,  // 24: DTC_PB.MarketDataUpdateTradeWithUnbundledIndicator2.TradeCondition:type_name -> DTC_PB.TradeConditionEnum
	11, // 25: DTC_PB.MarketDataUpdateTradeNoTimestamp.AtBidOrAsk:type_name -> DTC_PB.AtBidOrAskEnum8
	6,  // 26: DTC_PB.MarketDataUpdateTradeNoTimestamp.UnbundledTradeIndicator:type_name -> DTC_PB.UnbundledTradeIndicatorEnum
	7,  // 27: DTC_PB.MarketDataUpdateTradeNoTimestamp.TradeCondition:type_name -> DTC_PB.TradeConditionEnum
	5,  // 28: DTC_PB.MarketOrdersRequest.RequestAction:type_name -> DTC_PB.RequestActionEnum
	16, // 29: DTC_PB.MarketOrdersAdd.Side:type_name -> DTC_PB.BuySellEnum
	16, // 30: DTC_PB.MarketOrdersModify.Side:type_name -> DTC_PB.BuySellEnum
	16, // 31: DTC_PB.MarketOrdersRemove.Side:type_name -> DTC_PB.BuySellEnum
	27, // 32: DTC_PB.MarketOrdersSnapshotMessageBoundary.MessageBoundary:type_name -> DTC_PB.MessageSetBoundaryEnum
	14, // 33: DTC_PB.SubmitNewSingleOrder.OrderType:type_name -> DTC_PB.OrderTypeEnum
	16, // 34: DTC_PB.SubmitNewSingleOrder.BuySell:type_name -> DTC_PB.BuySellEnum
	15, // 35: DTC_PB.SubmitNewSingleOrder.TimeInForce:type_name -> DTC_PB.TimeInForceEnum
	17, // 36: DTC_PB.SubmitNewSingleOrder.OpenOrClose:type_name -> DTC_PB.OpenCloseTradeEnum
	14, // 37: DTC_PB.SubmitNewSingleOrderInt.OrderType:type_name -> DTC_PB.OrderTypeEnum
	16, // 38: DTC_PB.SubmitNewSingleOrderInt.BuySell:type_name -> DTC_PB.BuySellEnum
	15, // 39: DTC_PB.SubmitNewSingleOrderInt.TimeInForce:type_name -> DTC_PB.TimeInForceEnum
	17, // 40: DTC_PB.SubmitNewSingleOrderInt.OpenOrClose:type_name -> DTC_PB.OpenCloseTradeEnum
	15, // 41: DTC_PB.CancelReplaceOrder.TimeInForce:type_name -> DTC_PB.TimeInForceEnum
	15, // 42: DTC_PB.CancelReplaceOrderInt.TimeInForce:type_name -> DTC_PB.TimeInForceEnum
	14, // 43: DTC_PB.SubmitNewOCOOrder.OrderType_1:type_name -> DTC_PB.OrderTypeEnum
	16, // 44: DTC_PB.SubmitNewOCOOrder.BuySell_1:type_name -> DTC_PB.BuySellEnum
	14, // 45: DTC_PB.SubmitNewOCOOrder.OrderType_2:type_name -> DTC_PB.OrderTypeEnum
	16, // 46: DTC_PB.SubmitNewOCOOrder.BuySell_2:type_name -> DTC_PB.BuySellEnum
	15, // 47: DTC_PB.SubmitNewOCOOrder.TimeInForce:type_name -> DTC_PB.TimeInForceEnum
	17, // 48: DTC_PB.SubmitNewOCOOrder.OpenOrClose:type_name -> DTC_PB.OpenCloseTradeEnum
	18, // 49: DTC_PB.SubmitNewOCOOrder.PartialFillHandling:type_name -> DTC_PB.PartialFillHandlingEnum
	14, // 50: DTC_PB.SubmitNewOCOOrderInt.OrderType_1:type_name -> DTC_PB.OrderTypeEnum
	16, // 51: DTC_PB.SubmitNewOCOOrderInt.BuySell_1:type_name -> DTC_PB.BuySellEnum
	14, // 52: DTC_PB.SubmitNewOCOOrderInt.OrderType_2:type_name -> DTC_PB.OrderTypeEnum
	16, // 53: DTC_PB.SubmitNewOCOOrderInt.BuySell_2:type_name -> DTC_PB.BuySellEnum
	15, // 54: DTC_PB.SubmitNewOCOOrderInt.TimeInForce:type_name -> DTC_PB.TimeInForceEnum
	17, // 55: DTC_PB.SubmitNewOCOOrderInt.OpenOrClose:type_name -> DTC_PB.OpenCloseTradeEnum
	18, // 56: DTC_PB.SubmitNewOCOOrderInt.PartialFillHandling:type_name -> DTC_PB.PartialFillHandlingEnum
	8,  // 57: DTC_PB.OrderUpdate.OrderStatus:type_name -> DTC_PB.OrderStatusEnum
	9,  // 58: DTC_PB.OrderUpdate.OrderUpdateReason:type_name -> DTC_PB.OrderUpdateReasonEnum
	14, // 59: DTC_PB.OrderUpdate.OrderType:type_name -> DTC_PB.OrderTypeEnum
	16, // 60: DTC_PB.OrderUpdate.BuySell:type_name -> DTC_PB.BuySellEnum
	15, // 61: DTC_PB.OrderUpdate.TimeInForce:type_name -> DTC_PB.TimeInForceEnum
	17, // 62: DTC_PB.OrderUpdate.OpenOrClose:type_name -> DTC_PB.OpenCloseTradeEnum
	16, // 63: DTC_PB.HistoricalOrderFillResponse.BuySell:type_name -> DTC_PB.BuySellEnum
	17, // 64: DTC_PB.HistoricalOrderFillResponse.OpenClose:type_name -> DTC_PB.OpenCloseTradeEnum
	16, // 65: DTC_PB.AddCorrectingOrderFill.BuySell:type_name -> DTC_PB.BuySellEnum
	21, // 66: DTC_PB.SymbolsForExchangeRequest.SecurityType:type_name -> DTC_PB.SecurityTypeEnum
	5,  // 67: DTC_PB.SymbolsForExchangeRequest.RequestAction:type_name -> DTC_PB.RequestActionEnum
	21, // 68: DTC_PB.UnderlyingSymbolsForExchangeRequest.SecurityType:type_name -> DTC_PB.SecurityTypeEnum
	21, // 69: DTC_PB.SymbolsForUnderlyingRequest.SecurityType:type_name -> DTC_PB.SecurityTypeEnum
	21, // 70: DTC_PB.SymbolSearchRequest.SecurityType:type_name -> DTC_PB.SecurityTypeEnum
	23, // 71: DTC_PB.SymbolSearchRequest.SearchType:type_name -> DTC_PB.SearchTypeEnum
	21, // 72: DTC_PB.SecurityDefinitionResponse.SecurityType:type_name -> DTC_PB.SecurityTypeEnum
	20, // 73: DTC_PB.SecurityDefinitionResponse.PriceDisplayFormat:type_name -> DTC_PB.PriceDisplayFormatEnum
	22, // 74: DTC_PB.SecurityDefinitionResponse.PutOrCall:type_name -> DTC_PB.PutCallEnum
	24, // 75: DTC_PB.HistoricalPriceDataRequest.RecordInterval:type_name -> DTC_PB.HistoricalDataIntervalEnum
	24, // 76: DTC_PB.HistoricalPriceDataResponseHeader.RecordInterval:type_name -> DTC_PB.HistoricalDataIntervalEnum
	25, // 77: DTC_PB.HistoricalPriceDataReject.RejectReasonCode:type_name -> DTC_PB.HistoricalPriceDataRejectReasonCodeEnum
	10, // 78: DTC_PB.HistoricalPriceDataTickRecordResponse.AtBidOrAsk:type_name -> DTC_PB.AtBidOrAskEnum
	25, // 79: DTC_PB.HistoricalMarketDepthDataReject.RejectReasonCode:type_name -> DTC_PB.HistoricalPriceDataRejectReasonCodeEnum
	28, // 80: DTC_PB.TradeAccountTradingIsDisabledRequest.SetTradingIsDisabled:type_name -> DTC_PB.TradingIsDisabledEnum
	28, // 81: DTC_PB.TradeAccountTradingIsDisabledRequest.SetDisableTradingForParentAccountOnly:type_name -> DTC_PB.TradingIsDisabledEnum
	28, // 82: DTC_PB.TradeAccountTradingIsDisabledResponse.TradingIsDisabled:type_name -> DTC_PB.TradingIsDisabledEnum
	28, // 83: DTC_PB.TradeAccountTradingIsDisabledResponse.DisableTradingForParentAccountOnly:type_name -> DTC_PB.TradingIsDisabledEnum
	84, // [84:84] is the sub-list for method output_type
	84, // [84:84] is the sub-list for method input_type
	84, // [84:84] is the sub-list for extension type_name
	84, // [84:84] is the sub-list for extension extendee
	0,  // [0:84] is the sub-list for field type_name
}

func init() { file_dtc_DTCProtocol_proto_init() }
func file_dtc_DTCProtocol_proto_init() {
	if File_dtc_DTCProtocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dtc_DTCProtocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logoff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataFeedStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataFeedSymbolStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingSymbolStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthSnapshotLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthSnapshotLevelFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdateLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdateLevelFloatWithMilliseconds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthUpdateLevelNoTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateSessionSettlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateSessionOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateSessionNumTrades); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateTradingSessionDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDepthReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateTradeCompact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateLastTradeSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateTradeWithUnbundledIndicator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateTradeWithUnbundledIndicator2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateTradeNoTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateBidAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateBidAsk2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateBidAskCompact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateBidAskNoTimeStamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateBidAskFloatWithMicroseconds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateSessionVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateOpenInterest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateSessionHigh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketDataUpdateSessionLow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketOrdersReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketOrdersAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketOrdersModify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketOrdersRemove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketOrdersSnapshotMessageBoundary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitNewSingleOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitNewSingleOrderInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitFlattenPositionOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlattenPositionsForTradeAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReplaceOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelReplaceOrderInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitNewOCOOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitNewOCOOrderInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalOrderFillsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalOrderFillsReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentPositionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentPositionsReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenOrdersReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalOrderFillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddCorrectingOrderFill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CorrectingOrderFillResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAccountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolsForExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnderlyingSymbolsForExchangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolsForUnderlyingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SymbolSearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityDefinitionForSymbolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityDefinitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityDefinitionReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalanceReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalanceUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalanceAdjustment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalanceAdjustmentReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBalanceAdjustmentComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalAccountBalancesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalAccountBalancesReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalAccountBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneralLogMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalEntryAdd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalEntriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalEntriesReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalEntryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceDataResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceDataReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceDataRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceDataTickRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalPriceDataResponseTrailer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalMarketDepthDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalMarketDepthDataResponseHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalMarketDepthDataReject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalMarketDepthDataRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAccountTradingIsDisabledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAccountTradingIsDisabledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dtc_DTCProtocol_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeAccountDataDuplicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dtc_DTCProtocol_proto_rawDesc,
			NumEnums:      29,
			NumMessages:   104,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dtc_DTCProtocol_proto_goTypes,
		DependencyIndexes: file_dtc_DTCProtocol_proto_depIdxs,
		EnumInfos:         file_dtc_DTCProtocol_proto_enumTypes,
		MessageInfos:      file_dtc_DTCProtocol_proto_msgTypes,
	}.Build()
	File_dtc_DTCProtocol_proto = out.File
	file_dtc_DTCProtocol_proto_rawDesc = nil
	file_dtc_DTCProtocol_proto_goTypes = nil
	file_dtc_DTCProtocol_proto_depIdxs = nil
}
